package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class ItemTypeSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public ItemTypeSearchFilter(final SearchProperty filterProperty, final List<String> filterValues) {
        super(filterProperty);
        this.filterValues = filterValues;
    }

    public ItemTypeSearchFilter(final SearchProperty searchProperty,
                                final boolean includeBlanks,
                                final List<String> filterValues) {
        super(searchProperty, includeBlanks);
        this.filterValues = filterValues;
    }

    @Override
    public Optional<FilterQuery> getFilterQuery(final SearchPermissions searchPermissions) {
        List<String> filterValues = new ArrayList<>(this.filterValues);

        final String query = getFilterProperty().getColumnName() + " IN (:" + getFilterProperty().getProperty() + ") ";

        Map<String, Object> parameters = new HashMap<>();
        parameters.put(getFilterProperty().getProperty(), filterValues);

        return Optional.of(new FilterQuery(query, parameters));
    }

    public List<String> getFilterValues() {
        return ImmutableList.copyOf(filterValues);
    }

    @Override
    public boolean isEmpty() {
        return getFilterValues().isEmpty() && !isIncludeBlanks();
    }

    private String createFilter(final SearchPermissions searchPermissions) {
        //Return empty
        if(searchPermissions.getPreviewAll().isPresent() || searchPermissions.getPreviewVersion().isPresent()) {
            return "";
        }


        StringBuilder sb = new StringBuilder();
        boolean firstRecord = true;
        for(Map.Entry<String, Collection<String>> entry : searchPermissions.getItemTypeToWorkflows().entrySet()) {
            if(!firstRecord) {
                sb.append(" AND ");
            }

            firstRecord = false;
            final String itemTypeParameterName = getFilterProperty().getProperty() + entry.getKey();
            final String workflowParameterName = getFilterProperty().getProperty() + entry.getKey() + "Workflow";
            sb.append(getFilterProperty().getColumnName() + " = :" + itemTypeParameterName + " AND " + SearchProperty.WORKFLOW_STATUS.getColumnName() + " IN (:" + workflowParameterName);

            work
        }

        return sb.toString();
    }

    private String concatWorkflows() {

    }
}
