package org.opentestsystem.ap.imrt.iss.service.filter;

import com.google.common.collect.Sets;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ASL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ASL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BRAILLE_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BRAILLE_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CALCULATED_EXPOSURES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CC_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CC_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CONTENT_TASK_MODEL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CREATED_BY;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CREATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PERFORMANCE_TASK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.STIMULUS_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TRANSLATION_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TRANSLATION_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TTS_SIGHT_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TTS_VISUAL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TTS_VISUAL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WORKFLOW_STATUS_UPDATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WRITING_PURPOSE;

/**
 * Utility class for filter processing.  Since callers can use whatever values they want for searches we need to ensure
 * IMRT knows which fields are supported by the system.
 */
public class ImrtSearchIndexProperties {
    //Map containing the client search property mapping to internal fields
    private static final Map<String, String> IMRT_SEARCH_PROPERTIES;
    private static final Set<String> SUPPORTED_IMRT_ITEM_FIELDS;

    static {
        Map<String, String> filterToFields = new HashMap<>();
        filterToFields.put(ITEM_ID, "id");
        filterToFields.put(GRADE, "grade");
        filterToFields.put(STIMULUS_ID, "associatedStimulusId");
        filterToFields.put(DOK, "depthOfKnowledge");
        filterToFields.put(WORKFLOW_STATUS, "workflowStatus");
        filterToFields.put(ITEM_TYPE, "itemType");
        filterToFields.put(SUBJECT, "subject");
        filterToFields.put(DAYS_IN_WORKFLOW_STATUS, "workflowStatusSetAt");
        filterToFields.put(BEING_CREATED, "beingCreated");
        filterToFields.put(ORG_TYPE_ID, "organizationTypeId");
        filterToFields.put(ORG_NAME, "organizationName");
        filterToFields.put(CONTENT_TASK_MODEL, "contentTaskModel");
        filterToFields.put(ITEM_AUTHOR, "itemAuthor");
        filterToFields.put(WORKFLOW_STATUS_UPDATE_DATE, "workflowStatusSetAt");
        filterToFields.put(CREATE_DATE, "itemCreatedAt");
        filterToFields.put(CREATED_BY, "itemCreatedBy");
        filterToFields.put(CALCULATED_EXPOSURES_COUNT, "exposuresCount");
        filterToFields.put(CALCULATED_FORM_COUNT, "formCount");
        filterToFields.put(ITEM_DIFFICULTY_QUINTILE, "itemDifficultyQuintile");
        filterToFields.put(ASL_REQUIRED, "aslRequired");
        filterToFields.put(ASL_PROVIDED, "aslProvided");
        filterToFields.put(BRAILLE_REQUIRED, "brailleRequired");
        filterToFields.put(BRAILLE_PROVIDED, "brailleProvided");
        filterToFields.put(CC_REQUIRED, "ccRequired");
        filterToFields.put(CC_PROVIDED, "ccProvided");
        filterToFields.put(TRANSLATION_REQUIRED, "translationRequired");
        filterToFields.put(TRANSLATION_PROVIDED, "translationProvided");
        filterToFields.put(PRIMARY_CLAIM, "primaryClaim");
        filterToFields.put(PRIMARY_TARGET, "primaryTarget");
        filterToFields.put(PRIMARY_COMMON_CORE_STANDARD, "primaryCommonCoreStandard");
        filterToFields.put(PRIMARY_CONTENT_DOMAIN, "primaryContentDomain");
        filterToFields.put(SECONDARY_CLAIM, "secondaryClaim");
        filterToFields.put(SECONDARY_TARGET, "secondaryTarget");
        filterToFields.put(SECONDARY_COMMON_CORE_STANDARD, "secondaryCommonCoreStandard");
        filterToFields.put(SECONDARY_CONTENT_DOMAIN, "secondaryContentDomain");
        filterToFields.put(QUATERNARY_CLAIM, "quaternaryClaim");
        filterToFields.put(QUATERNARY_TARGET, "quaternaryTarget");
        filterToFields.put(QUATERNARY_COMMON_CORE_STANDARD, "quaternaryCommonCoreStandard");
        filterToFields.put(QUATERNARY_CONTENT_DOMAIN, "quaternaryContentDomain");
        filterToFields.put(TERTIARY_CLAIM, "tertiaryClaim");
        filterToFields.put(TERTIARY_TARGET, "tertiaryTarget");
        filterToFields.put(TERTIARY_COMMON_CORE_STANDARD, "tertiaryCommonCoreStandard");
        filterToFields.put(TERTIARY_CONTENT_DOMAIN, "tertiaryContentDomain");
        filterToFields.put(WRITING_PURPOSE, WRITING_PURPOSE);
        filterToFields.put(PERFORMANCE_TASK, PERFORMANCE_TASK);
        filterToFields.put(TTS_SIGHT_PROVIDED, "sightTtsProvided");
        filterToFields.put(TTS_VISUAL_PROVIDED, "visualTtsProvided");
        filterToFields.put(TTS_VISUAL_REQUIRED, "visualTtsRequired");


        IMRT_SEARCH_PROPERTIES = Collections.unmodifiableMap(filterToFields);
        SUPPORTED_IMRT_ITEM_FIELDS = Sets.newHashSet(IMRT_SEARCH_PROPERTIES.values());
    }


    /**
     * Normally the imrt property and the searchable property will align.  However, there are times where we name
     * things in IMRT differently than the item dictionary.  This handles the mapping.
     *
     * @param property the request filter property
     * @return the query property to use
     */
    public static Optional<String> getImrtSearchProperty(final String property) {
        return Optional.ofNullable(IMRT_SEARCH_PROPERTIES.get(property));
    }

    /**
     * Determines if the property is a valid imrt property
     *
     * @param property the imrt property used for filtering
     * @return {@code true} if the imrt property is valid and supported
     */
    public static boolean isValidImrtField(final String property) {
        return SUPPORTED_IMRT_ITEM_FIELDS.contains(property);
    }
}