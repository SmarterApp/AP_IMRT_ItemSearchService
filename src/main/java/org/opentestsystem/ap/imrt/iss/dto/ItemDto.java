package org.opentestsystem.ap.imrt.iss.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.opentestsystem.ap.common.model.Item;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static java.time.temporal.ChronoUnit.DAYS;
import static org.apache.commons.lang3.StringUtils.EMPTY;

/**
 * Representation of the {@link org.opentestsystem.ap.imrt.common.model.ImrtItem} domain object
 */
@JsonPropertyOrder(alphabetic = true)
public class ItemDto {
    private String id = EMPTY;
    private String subject = EMPTY;
    private String intendedGrade = EMPTY;
    private String workflowStatus = EMPTY;
    private String type = EMPTY;
    private String depthOfKnowledge = EMPTY;
    private String createdBy = EMPTY;
    private Instant createDate;
    private Item itemDetail;
    private String stimulusId = EMPTY;
    private String beingCreated = EMPTY;
    private String organizationTypeId = EMPTY;
    private String organizationName = EMPTY;
    private String contentTaskModel = EMPTY;
    private Instant workflowStatusUpdatedDate;
    private String itemAuthor = EMPTY;

    //Standard Alignment Information
    private String primaryClaim = EMPTY;
    private String primaryTarget = EMPTY;
    private String primaryContentDomain = EMPTY;
    private String primaryCommonCoreStandard = EMPTY;
    private String secondaryClaim = EMPTY;
    private String secondaryTarget = EMPTY;
    private String secondaryContentDomain = EMPTY;
    private String secondaryCommonCoreStandard = EMPTY;
    private String tertiaryClaim = EMPTY;
    private String tertiaryTarget = EMPTY;
    private String tertiaryContentDomain = EMPTY;
    private String tertiaryCommonCoreStandard = EMPTY;
    private String quaternaryClaim = EMPTY;
    private String quaternaryTarget = EMPTY;
    private String quaternaryContentDomain = EMPTY;
    private String quaternaryCommonCoreStandard = EMPTY;

    private Instant englishContentLastUpdatedDate;
    private Instant spanishContentLastUpdatedDate;
    private Instant updateDate;

    //TODO - Check with client about this date
    private Instant fieldTestDate;

    private String aslProvided = EMPTY;
    private String aslRequired = EMPTY;
    private List<AttachmentDto> aslAttachments = Collections.emptyList();
    private String brailleProvided = EMPTY;
    private String brailleRequired = EMPTY;
    private List<AttachmentDto> brailleAttachments = Collections.emptyList();
    private String closedCaptioningProvided = EMPTY;
    private String closedCaptioningRequired = EMPTY;
    private List<AttachmentDto> closedCaptioningAttachments = Collections.emptyList();
    private String allowCalculator = EMPTY;
    private String translationProvided = EMPTY;
    private String translationRequired = EMPTY;
    private String itemDifficultyQuintile = EMPTY;
    private String performanceTask = EMPTY;
    private String testCategory = EMPTY;
    private String writingPurpose = EMPTY;
    private String scoringEngine = EMPTY;

    private String associatedItemCount = EMPTY;

    private String aslUploadedPriorToLastContentUpdate = EMPTY;
    private String brailleUploadedPriorToLastContentUpdate = EMPTY;
    private String closedCaptioningUploadedPriorToLastContentUpdate = EMPTY;

    private String calculatedFormCount = EMPTY;
    private String calculatedExposuresCount = EMPTY;

    private String sightTtsProvided = EMPTY;
    private String visualTtsProvided = EMPTY;
    private String visualTtsRequired = EMPTY;

    private Collection<ValidationResultDto> validationResults;

    private String englishPassagesCount = EMPTY;
    private String spanishPassagesCount = EMPTY;
    private String contentChangedAfterOperational = EMPTY;

    private String unresolvedUpdateNeed = EMPTY;
    private Instant currentUpdateNeedCreatedDate;
    private Instant currentUpdateNeedResolutionDate;
    private Instant currentUpdateNeedInternalResolutionDate;
    private String currentUpdateNeedResolution = EMPTY;
    private String currentUpdateNeedInternalResolution = EMPTY;

    /**
     * @return the unique item id
     */
    public String getId() {
        return id;
    }

    /**
     * @return the subject for the item
     */
    public String getSubject() {
        return subject;
    }

    /**
     * @return the intendedGrade for the item
     */
    public String getIntendedGrade() {
        return intendedGrade;
    }

    /**
     * @return the current workflow status of the item
     */
    public String getWorkflowStatus() {
        return workflowStatus;
    }

    /**
     * @return the type of item.  This will be the item type code
     */
    public String getType() {
        return type;
    }

    /**
     * @return the depth of knowledge value for the item
     */
    public String getDepthOfKnowledge() {
        return depthOfKnowledge;
    }

    /**
     * @return the itembank user for the user that created the item
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * @return the time the item was created
     */
    public Instant getCreateDate() {
        return createDate;
    }

    /**
     * @return the item's associated stimulus id otherwise blank
     */
    public String getStimulusId() {
        return stimulusId;
    }

    /**
     * @return the item detail as stored in the item bank
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Item getItemDetail() {
        return itemDetail;
    }

    /**
     * @return {@code true} if the item is being created and is not yet officially in the item bank
     */
    @JsonProperty("isBeingCreated")
    public String isBeingCreated() {
        return beingCreated;
    }

    /**
     * @return The organization type id for the item
     */
    public String getOrganizationTypeId() {
        return organizationTypeId;
    }

    /**
     * @return The organization name for the item
     */
    public String getOrganizationName() {
        return organizationName;
    }

    /**
     * @return the primary claim for the item
     */
    public String getPrimaryClaim() {
        return primaryClaim;
    }

    /**
     * @return the primary target
     */
    public String getPrimaryTarget() {
        return primaryTarget;
    }

    /**
     * @return the primary content domain
     */
    public String getPrimaryContentDomain() {
        return primaryContentDomain;
    }

    /**
     * @return the primary common core standard
     */
    public String getPrimaryCommonCoreStandard() {
        return primaryCommonCoreStandard;
    }

    /**
     * @return the secondary claim
     */
    public String getSecondaryClaim() {
        return secondaryClaim;
    }

    /**
     * @return the secondary target
     */
    public String getSecondaryTarget() {
        return secondaryTarget;
    }

    /**
     * @return the secondary content domain
     */
    public String getSecondaryContentDomain() {
        return secondaryContentDomain;
    }

    /**
     * @return the secondary common core standard
     */
    public String getSecondaryCommonCoreStandard() {
        return secondaryCommonCoreStandard;
    }

    /**
     * @return the tertiary claim id
     */
    public String getTertiaryClaim() {
        return tertiaryClaim;
    }

    /**
     * @return the tertiary target
     */
    public String getTertiaryTarget() {
        return tertiaryTarget;
    }

    /**
     * @return the tertiary content domain
     */
    public String getTertiaryContentDomain() {
        return tertiaryContentDomain;
    }

    /**
     * @return the tertiary common core standard
     */
    public String getTertiaryCommonCoreStandard() {
        return tertiaryCommonCoreStandard;
    }

    /**
     * @return the quaternary claim id
     */
    public String getQuaternaryClaim() {
        return quaternaryClaim;
    }

    /**
     * @return the quaternary target
     */
    public String getQuaternaryTarget() {
        return quaternaryTarget;
    }

    /**
     * @return the quaternary content domain
     */
    public String getQuaternaryContentDomain() {
        return quaternaryContentDomain;
    }

    /**
     * @return the quaternary common core standard
     */
    public String getQuaternaryCommonCoreStandard() {
        return quaternaryCommonCoreStandard;
    }

    /**
     * @return the item's content task model
     */
    public String getContentTaskModel() {
        return contentTaskModel;
    }

    /**
     * @return the last time the workflow status was set or updated
     */
    public Instant getWorkflowStatusUpdatedDate() {
        return workflowStatusUpdatedDate;
    }

    /**
     * @return the number of days since the workflow status was changed.  Days based on UTC
     */
    public Optional<String> getDaysInWorkflowStatus() {
        if (workflowStatusUpdatedDate == null) {
            return Optional.empty();
        }

        LocalDate updateDate = LocalDateTime.ofInstant(workflowStatusUpdatedDate, ZoneId.of(ZoneOffset.UTC.getId())).toLocalDate();
        LocalDate now = LocalDateTime.ofInstant(Instant.now(), ZoneId.of(ZoneOffset.UTC.getId())).toLocalDate();

        return Optional.of(String.valueOf(DAYS.between(updateDate, now)));
    }

    /**
     * @return the item's author as defined in the item
     */
    public String getItemAuthor() {
        return itemAuthor;
    }

    /**
     * @return the last update date for English content
     */
    public Instant getEnglishContentLastUpdatedDate() {
        return englishContentLastUpdatedDate;
    }

    /**
     * @return the last update date for Spanish content
     */
    public Instant getSpanishContentLastUpdatedDate() {
        return spanishContentLastUpdatedDate;
    }

    /**
     * @return the date the item was field tested
     */
    public Instant getFieldTestDate() {
        return fieldTestDate;
    }

    /**
     * @return {@code true} if asl provided
     */
    @JsonProperty("isAslProvided")
    public String isAslProvided() {
        return aslProvided;
    }

    /**
     * @return whether ASL is required for the item
     */
    @JsonProperty("isAslRequired")
    public String getAslRequired() {
        return aslRequired;
    }

    /**
     * @return The attached ASL file(s)
     */
    public List<AttachmentDto> getAslAttachments() {
        return aslAttachments;
    }

    /**
     * @return whether Brailled is provided
     */
    @JsonProperty("isBrailleProvided")
    public String isBrailleProvided() {
        return brailleProvided;
    }

    /**
     * @return whether Braille is required
     */
    @JsonProperty("isBrailleRequired")
    public String getBrailleRequired() {
        return brailleRequired;
    }

    /**
     * @return The attached braille file(s)
     */
    public List<AttachmentDto> getBrailleAttachments() {
        return brailleAttachments;
    }

    //TODO - this is no longer supported and should be removed by IAT. Then this can be removed
    public String getTotalExposures() {
        return EMPTY;
    }

    /**
     * @return whether closed captioning is provided on the item
     */
    @JsonProperty("isClosedCaptioningProvided")
    public String getClosedCaptioningProvided() {
        return closedCaptioningProvided;
    }

    /**
     * @return whether closed captioning is required
     */
    @JsonProperty("isClosedCaptioningRequired")
    public String getClosedCaptioningRequired() {
        return closedCaptioningRequired;
    }

    /**
     * @return The attached closed-captioning file(s)
     */
    public List<AttachmentDto> getClosedCaptioningAttachments() {
        return closedCaptioningAttachments;
    }

    /**
     * @return whether a calculator is allowed for the item
     */
    public String getAllowCalculator() {
        return allowCalculator;
    }

    /**
     * @return whether translation has been provided for the item
     */
    @JsonProperty("isTranslationProvided")
    public String getTranslationProvided() {
        return translationProvided;
    }

    /**
     * @return whether translation is required for the item
     */
    @JsonProperty("isTranslationRequired")
    public String getTranslationRequired() {
        return translationRequired;
    }

    /**
     * @return the item difficulty quintile - values 1-5 or null if not set
     */
    public String getItemDifficultyQuintile() {
        return itemDifficultyQuintile;
    }

    /**
     * @return the type of performance task associated with the itme
     */
    public String getPerformanceTask() {
        return performanceTask;
    }

    /**
     * @return the test category for the item
     */
    public String getTestCategory() {
        return testCategory;
    }

    /**
     * @return the writing purpose for an item
     */
    public String getWritingPurpose() {
        return writingPurpose;
    }

    /**
     * @return the associated item count.  This will only be populated for stimulus item types
     */
    public String getAssociatedItemCount() {
        return associatedItemCount;
    }

    /**
     * @return {@code true} if the ASL content was uploaded prior to the content was updated
     */
    @JsonProperty("isAslUploadedPriorToLastContentUpdate")
    public String isAslUploadedPriorToLastContentUpdate() {
        return aslUploadedPriorToLastContentUpdate;
    }

    /**
     * @return {@code true} if the ASL content was uploaded prior to the content was updated
     */
    @JsonProperty("isBrailleUploadedPriorToLastContentUpdate")
    public String isBrailleUploadedPriorToLastContentUpdate() {
        return brailleUploadedPriorToLastContentUpdate;
    }

    /**
     * @return {@code true} if the Closed Captioning content was uploaded prior to the content was updated
     */
    @JsonProperty("isClosedCaptioningUploadedPriorToLastContentUpdate")
    public String isClosedCaptioningUploadedPriorToLastContentUpdate() {
        return closedCaptioningUploadedPriorToLastContentUpdate;
    }

    /**
     * @return the scoring engine associated with the item
     */
    public String getScoringEngine() {
        return scoringEngine;
    }

    /**
     * @return the total number of forms which contained the item
     */
    public String getCalculatedFormCount() {
        return calculatedFormCount;
    }

    /**
     * @return the total number of exposures across all forms
     */
    public String getCalculatedExposuresCount() {
        return calculatedExposuresCount;
    }

    /**
     * @return Indication that Sight Text-to-Speech has been provided
     */
    @JsonProperty("isSightTTSProvided")
    public String getSightTtsProvided() {
        return sightTtsProvided;
    }

    /**
     * @return Indication that Visual Text-to-Speech has been provided
     */
    @JsonProperty("isVisualTTSProvided")
    public String getVisualTtsProvided() {
        return visualTtsProvided;
    }

    /**
     * @return Indication that Sight Text-to-Speech is required
     */
    @JsonProperty("isVisualTTSRequired")
    public String getVisualTtsRequired() {
        return visualTtsRequired;
    }

    /**
     * @return the last time the item was updated
     */
    public Instant getUpdateDate() {
        return updateDate;
    }

    /**
     * @return the {@link ValidationResultDto} for the item
     */
    public Collection<ValidationResultDto> getValidationResults() {
        return validationResults;
    }

    /**
     * @return the number of english passages associated with item
     */
    public String getEnglishPassagesCount() {
        return englishPassagesCount;
    }

    /**
     * @return the number of spanish passages associated with item
     */
    public String getSpanishPassagesCount() {
        return spanishPassagesCount;
    }

    /**
     * @return {@code true} if the English or Spanish content has changed after an item has gone operational
     */
    @JsonProperty("isContentChangedAfterOperational")
    public String getContentChangedAfterOperational() {
        return contentChangedAfterOperational;
    }

    /**
     * @return {@code true} if there is an unresolved content update need
     */
    @JsonProperty("hasUnresolvedUpdateNeed")
    public String isUnresolvedUpdateNeed() {
        return unresolvedUpdateNeed;
    }

    /**
     * @return the current content update need create date
     */
    public Instant getCurrentUpdateNeedCreatedDate() {
        return currentUpdateNeedCreatedDate;
    }

    /**
     * @return the current content update need resolution date
     */
    public Instant getCurrentUpdateNeedResolutionDate() {
        return currentUpdateNeedResolutionDate;
    }

    /**
     * @return the current content update need internal resolution date
     */
    public Instant getCurrentUpdateNeedInternalResolutionDate() {
        return currentUpdateNeedInternalResolutionDate;
    }

    /**
     * @return the current content update need resolution value
     */
    public String getCurrentUpdateNeedResolution() {
        return currentUpdateNeedResolution;
    }

    /**
     * @return the current content update need internal resolution value
     */
    public String getCurrentUpdateNeedInternalResolution() {
        return currentUpdateNeedInternalResolution;
    }

    /**
     * @return a new {@link Builder}
     */
    public static Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private String id = EMPTY;
        private String subject = EMPTY;
        private String intendedGrade = EMPTY;
        private String workflowStatus = EMPTY;
        private String type = EMPTY;
        private String depthOfKnowledge = EMPTY;
        private String createdBy = EMPTY;
        private Instant createDate;
        private Item itemDetail;
        private String stimulusId = EMPTY;
        private String beingCreated = EMPTY;
        private String organizationTypeId = EMPTY;
        private String organizationName = EMPTY;
        private String contentTaskModel = EMPTY;
        private Instant workflowStatusUpdatedDate;
        private String itemAuthor = EMPTY;
        //Standard Alignment Information
        private String primaryClaim = EMPTY;
        private String primaryTarget = EMPTY;
        private String primaryContentDomain = EMPTY;
        private String primaryCommonCoreStandard = EMPTY;
        private String secondaryClaim = EMPTY;
        private String secondaryTarget = EMPTY;
        private String secondaryContentDomain = EMPTY;
        private String secondaryCommonCoreStandard = EMPTY;
        private String tertiaryClaim = EMPTY;
        private String tertiaryTarget = EMPTY;
        private String tertiaryContentDomain = EMPTY;
        private String tertiaryCommonCoreStandard = EMPTY;
        private String quaternaryClaim = EMPTY;
        private String quaternaryTarget = EMPTY;
        private String quaternaryContentDomain = EMPTY;
        private String quaternaryCommonCoreStandard = EMPTY;
        private Instant englishContentLastUpdatedDate;
        private Instant spanishContentLastUpdatedDate;
        private Instant fieldTestDate;
        private String aslProvided = EMPTY;
        private String aslRequired = EMPTY;
        private List<AttachmentDto> aslAttachments = Collections.emptyList();
        private String brailleProvided = EMPTY;
        private String brailleRequired = EMPTY;
        private List<AttachmentDto> brailleAttachments = Collections.emptyList();
        private String closedCaptioningProvided = EMPTY;
        private String closedCaptioningRequired = EMPTY;
        private List<AttachmentDto> closedCaptioningAttachments = Collections.emptyList();
        private String allowCalculator = EMPTY;
        private String translationProvided = EMPTY;
        private String translationRequired = EMPTY;
        private String itemDifficultyQuintile = EMPTY;
        private String performanceTask = EMPTY;
        private String testCategory = EMPTY;
        private String writingPurpose = EMPTY;
        //TODO - This will need to be derived by IMRT
        private String associatedItemCount = EMPTY;
        private String aslUploadedPriorToLastContentUpdate = EMPTY;
        private String brailleUploadedPriorToLastContentUpdate = EMPTY;
        private String closedCaptioningUploadedPriorToLastContentUpdate = EMPTY;
        private String scoringEngine = EMPTY;
        private String calculatedFormCount = EMPTY;
        private String calculatedExposuresCount = EMPTY;
        private String sightTtsProvided = EMPTY;
        private String visualTtsProvided = EMPTY;
        private String visualTtsRequired = EMPTY;
        private Instant updateDate;
        private Collection<ValidationResultDto> validationResults;
        private String englishPassagesCount;
        private String spanishPassagesCount;
        private String contentChangedAfterOperational;
        private String unresolvedUpdateNeed = EMPTY;
        private Instant currentUpdateNeedCreatedDate;
        private Instant currentUpdateNeedResolutionDate;
        private Instant currentUpdateNeedInternalResolutionDate;
        private String currentUpdateNeedResolution = EMPTY;
        private String currentUpdateNeedInternalResolution = EMPTY;

        private Builder() {
        }

        public Builder withId(String id) {
            this.id = id;
            return this;
        }

        public Builder withSubject(String subject) {
            this.subject = subject;
            return this;
        }

        public Builder withIntendedGrade(String intendedGrade) {
            this.intendedGrade = intendedGrade;
            return this;
        }

        public Builder withWorkflowStatus(String workflowStatus) {
            this.workflowStatus = workflowStatus;
            return this;
        }

        public Builder withType(String type) {
            this.type = type;
            return this;
        }

        public Builder withDepthOfKnowledge(String depthOfKnowledge) {
            this.depthOfKnowledge = depthOfKnowledge;
            return this;
        }

        public Builder withCreatedBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder withCreateDate(Instant createDate) {
            this.createDate = createDate;
            return this;
        }

        public Builder withItemDetail(Item itemDetail) {
            this.itemDetail = itemDetail;
            return this;
        }

        public Builder withStimulusId(String stimulusId) {
            this.stimulusId = stimulusId;
            return this;
        }

        public Builder withBeingCreated(String beingCreated) {
            this.beingCreated = beingCreated;
            return this;
        }

        public Builder withOrganizationTypeId(String organizationTypeId) {
            this.organizationTypeId = organizationTypeId;
            return this;
        }

        public Builder withOrganizationName(String organizationName) {
            this.organizationName = organizationName;
            return this;
        }

        public Builder withContentTaskModel(String contentTaskModel) {
            this.contentTaskModel = contentTaskModel;
            return this;
        }

        public Builder withWorkflowStatusUpdatedDate(Instant workflowStatusUpdatedDate) {
            this.workflowStatusUpdatedDate = workflowStatusUpdatedDate;
            return this;
        }

        public Builder withItemAuthor(String itemAuthor) {
            this.itemAuthor = itemAuthor;
            return this;
        }

        public Builder withPrimaryClaim(String primaryClaim) {
            this.primaryClaim = primaryClaim;
            return this;
        }

        public Builder withPrimaryTarget(String primaryTarget) {
            this.primaryTarget = primaryTarget;
            return this;
        }

        public Builder withPrimaryContentDomain(String primaryContentDomain) {
            this.primaryContentDomain = primaryContentDomain;
            return this;
        }

        public Builder withPrimaryCommonCoreStandard(String primaryCommonCoreStandard) {
            this.primaryCommonCoreStandard = primaryCommonCoreStandard;
            return this;
        }

        public Builder withSecondaryClaim(String secondaryClaim) {
            this.secondaryClaim = secondaryClaim;
            return this;
        }

        public Builder withSecondaryTarget(String secondaryTarget) {
            this.secondaryTarget = secondaryTarget;
            return this;
        }

        public Builder withSecondaryContentDomain(String secondaryContentDomain) {
            this.secondaryContentDomain = secondaryContentDomain;
            return this;
        }

        public Builder withSecondaryCommonCoreStandard(String secondaryCommonCoreStandard) {
            this.secondaryCommonCoreStandard = secondaryCommonCoreStandard;
            return this;
        }

        public Builder withTertiaryClaim(String tertiaryClaim) {
            this.tertiaryClaim = tertiaryClaim;
            return this;
        }

        public Builder withTertiaryTarget(String tertiaryTarget) {
            this.tertiaryTarget = tertiaryTarget;
            return this;
        }

        public Builder withTertiaryContentDomain(String tertiaryContentDomain) {
            this.tertiaryContentDomain = tertiaryContentDomain;
            return this;
        }

        public Builder withTertiaryCommonCoreStandard(String tertiaryCommonCoreStandard) {
            this.tertiaryCommonCoreStandard = tertiaryCommonCoreStandard;
            return this;
        }

        public Builder withQuaternaryClaim(String quaternaryClaim) {
            this.quaternaryClaim = quaternaryClaim;
            return this;
        }

        public Builder withQuaternaryTarget(String quaternaryTarget) {
            this.quaternaryTarget = quaternaryTarget;
            return this;
        }

        public Builder withQuaternaryContentDomain(String quaternaryContentDomain) {
            this.quaternaryContentDomain = quaternaryContentDomain;
            return this;
        }

        public Builder withQuaternaryCommonCoreStandard(String quaternaryCommonCoreStandard) {
            this.quaternaryCommonCoreStandard = quaternaryCommonCoreStandard;
            return this;
        }

        public Builder withEnglishContentLastUpdatedDate(Instant englishContentLastUpdatedDate) {
            this.englishContentLastUpdatedDate = englishContentLastUpdatedDate;
            return this;
        }

        public Builder withSpanishContentLastUpdatedDate(Instant spanishContentLastUpdatedDate) {
            this.spanishContentLastUpdatedDate = spanishContentLastUpdatedDate;
            return this;
        }

        public Builder withFieldTestDate(Instant fieldTestDate) {
            this.fieldTestDate = fieldTestDate;
            return this;
        }

        public Builder withAslProvided(String aslProvided) {
            this.aslProvided = aslProvided;
            return this;
        }

        public Builder withAslRequired(String aslRequired) {
            this.aslRequired = aslRequired;
            return this;
        }

        public Builder withAslAttachments(List<AttachmentDto> aslAttachments) {
            this.aslAttachments = aslAttachments;
            return this;
        }

        public Builder withBrailleProvided(String brailleProvided) {
            this.brailleProvided = brailleProvided;
            return this;
        }

        public Builder withBrailleRequired(String brailleRequired) {
            this.brailleRequired = brailleRequired;
            return this;
        }

        public Builder withBrailleAttachments(List<AttachmentDto> brailleAttachments) {
            this.brailleAttachments = brailleAttachments;
            return this;
        }

        public Builder withClosedCaptioningProvided(String closedCaptioningProvided) {
            this.closedCaptioningProvided = closedCaptioningProvided;
            return this;
        }

        public Builder withClosedCaptioningAttachments(List<AttachmentDto> closedCaptioningAttachments) {
            this.closedCaptioningAttachments = closedCaptioningAttachments;
            return this;
        }

        public Builder withClosedCaptioningRequired(String closedCaptioningRequired) {
            this.closedCaptioningRequired = closedCaptioningRequired;
            return this;
        }

        public Builder withAllowCalculator(String allowCalculator) {
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder withTranslationProvided(String translationProvided) {
            this.translationProvided = translationProvided;
            return this;
        }

        public Builder withTranslationRequired(String translationRequired) {
            this.translationRequired = translationRequired;
            return this;
        }

        public Builder withItemDifficultyQuintile(String itemDifficultyQuintile) {
            this.itemDifficultyQuintile = itemDifficultyQuintile;
            return this;
        }

        public Builder withPerformanceTask(String performanceTask) {
            this.performanceTask = performanceTask;
            return this;
        }

        public Builder withTestCategory(String testCategory) {
            this.testCategory = testCategory;
            return this;
        }

        public Builder withWritingPurpose(String writingPurpose) {
            this.writingPurpose = writingPurpose;
            return this;
        }

        public Builder withAssociatedItemCount(String associatedItemCount) {
            this.associatedItemCount = associatedItemCount;
            return this;
        }

        public Builder withAslUploadedPriorToLastContentUpdate(String aslUploadedPriorToLastContentUpdate) {
            this.aslUploadedPriorToLastContentUpdate = aslUploadedPriorToLastContentUpdate;
            return this;
        }

        public Builder withBrailleUploadedPriorToLastContentUpdate(String brailleUploadedPriorToLastContentUpdate) {
            this.brailleUploadedPriorToLastContentUpdate = brailleUploadedPriorToLastContentUpdate;
            return this;
        }

        public Builder withClosedCaptioningUploadedPriorToLastContentUpdate(String closedCaptioningUploadedPriorToLastContentUpdate) {
            this.closedCaptioningUploadedPriorToLastContentUpdate = closedCaptioningUploadedPriorToLastContentUpdate;
            return this;
        }

        public Builder withScoringEngine(String scoringEngine) {
            this.scoringEngine = scoringEngine;
            return this;
        }

        public Builder withCalculatedFormCount(final String calculatedFormCount) {
            this.calculatedFormCount = calculatedFormCount;
            return this;
        }

        public Builder withCalculatedExposuresCount(final String calculatedExposuresCount) {
            this.calculatedExposuresCount = calculatedExposuresCount;
            return this;
        }

        public Builder withSightTTSProvided(final String sightTTSProvided) {
            this.sightTtsProvided = sightTTSProvided;
            return this;
        }

        public Builder withVisualTTSProvided(final String visualTTSProvided) {
            this.visualTtsProvided = visualTTSProvided;
            return this;
        }

        public Builder withVisualTTSRequired(final String visualTTSRequired) {
            this.visualTtsRequired = visualTTSRequired;
            return this;
        }

        public Builder withUpdateDate(final Instant updateDate) {
            this.updateDate = updateDate;
            return this;
        }

        public Builder withValidationResults(final Collection<ValidationResultDto> validationResults) {
            this.validationResults = validationResults;
            return this;
        }

        public Builder withEnglishPassagesCount(final String englishPassagesCount) {
            this.englishPassagesCount = englishPassagesCount;
            return this;
        }

        public Builder withSpanishPassagesCount(final String spanishPassagesCount) {
            this.spanishPassagesCount = spanishPassagesCount;
            return this;
        }

        public Builder withContentChangedAfterOperational(final String contentChangedAfterOperational) {
            this.contentChangedAfterOperational = contentChangedAfterOperational;
            return this;
        }

        public Builder withUnresolvedUpdateNeed(final String unresolvedUpdateNeed) {
            this.unresolvedUpdateNeed = unresolvedUpdateNeed;
            return this;
        }

        public Builder withCurrentUpdateNeedCreatedDate(final Instant currentUpdateNeedCreateDate) {
            this.currentUpdateNeedCreatedDate = currentUpdateNeedCreateDate;
            return this;
        }

        public Builder withCurrentUpdateNeedResolutionDate(final Instant currentUpdateNeedResolutionDate) {
            this.currentUpdateNeedResolutionDate = currentUpdateNeedResolutionDate;
            return this;
        }

        public Builder withCurrentUpdateNeedInternalResolutionDate(final Instant currentUpdateNeedInternalResolutionDate) {
            this.currentUpdateNeedInternalResolutionDate = currentUpdateNeedInternalResolutionDate;
            return this;
        }

        public Builder withCurrentUpdateNeedResolution(final String currentUpdateNeedResolution) {
            this.currentUpdateNeedResolution = currentUpdateNeedResolution;
            return this;
        }

        public Builder withCurrentUpdateNeedInternalResolution(final String currentUpdateNeedInternalResolution) {
            this.currentUpdateNeedInternalResolution = currentUpdateNeedInternalResolution;
            return this;
        }

        public ItemDto build() {
            ItemDto itemDto = new ItemDto();
            itemDto.primaryCommonCoreStandard = this.primaryCommonCoreStandard;
            itemDto.primaryClaim = this.primaryClaim;
            itemDto.aslRequired = this.aslRequired;
            itemDto.closedCaptioningUploadedPriorToLastContentUpdate = this.closedCaptioningUploadedPriorToLastContentUpdate;
            itemDto.stimulusId = this.stimulusId;
            itemDto.organizationTypeId = this.organizationTypeId;
            itemDto.tertiaryContentDomain = this.tertiaryContentDomain;
            itemDto.englishContentLastUpdatedDate = this.englishContentLastUpdatedDate;
            itemDto.spanishContentLastUpdatedDate = this.spanishContentLastUpdatedDate;
            itemDto.allowCalculator = this.allowCalculator;
            itemDto.brailleProvided = this.brailleProvided;
            itemDto.createDate = this.createDate;
            itemDto.tertiaryTarget = this.tertiaryTarget;
            itemDto.translationProvided = this.translationProvided;
            itemDto.primaryContentDomain = this.primaryContentDomain;
            itemDto.secondaryCommonCoreStandard = this.secondaryCommonCoreStandard;
            itemDto.brailleRequired = this.brailleRequired;
            itemDto.quaternaryCommonCoreStandard = this.quaternaryCommonCoreStandard;
            itemDto.fieldTestDate = this.fieldTestDate;
            itemDto.workflowStatusUpdatedDate = this.workflowStatusUpdatedDate;
            itemDto.quaternaryTarget = this.quaternaryTarget;
            itemDto.contentTaskModel = this.contentTaskModel;
            itemDto.closedCaptioningRequired = this.closedCaptioningRequired;
            itemDto.translationRequired = this.translationRequired;
            itemDto.quaternaryContentDomain = this.quaternaryContentDomain;
            itemDto.secondaryContentDomain = this.secondaryContentDomain;
            itemDto.closedCaptioningProvided = this.closedCaptioningProvided;
            itemDto.itemAuthor = this.itemAuthor;
            itemDto.aslProvided = this.aslProvided;
            itemDto.primaryTarget = this.primaryTarget;
            itemDto.depthOfKnowledge = this.depthOfKnowledge;
            itemDto.beingCreated = this.beingCreated;
            itemDto.secondaryTarget = this.secondaryTarget;
            itemDto.tertiaryClaim = this.tertiaryClaim;
            itemDto.subject = this.subject;
            itemDto.associatedItemCount = this.associatedItemCount;
            itemDto.type = this.type;
            itemDto.tertiaryCommonCoreStandard = this.tertiaryCommonCoreStandard;
            itemDto.testCategory = this.testCategory;
            itemDto.organizationName = this.organizationName;
            itemDto.aslUploadedPriorToLastContentUpdate = this.aslUploadedPriorToLastContentUpdate;
            itemDto.quaternaryClaim = this.quaternaryClaim;
            itemDto.itemDifficultyQuintile = this.itemDifficultyQuintile;
            itemDto.secondaryClaim = this.secondaryClaim;
            itemDto.writingPurpose = this.writingPurpose;
            itemDto.brailleUploadedPriorToLastContentUpdate = this.brailleUploadedPriorToLastContentUpdate;
            itemDto.intendedGrade = this.intendedGrade;
            itemDto.workflowStatus = this.workflowStatus;
            itemDto.itemDetail = this.itemDetail;
            itemDto.id = this.id;
            itemDto.performanceTask = this.performanceTask;
            itemDto.createdBy = this.createdBy;
            itemDto.scoringEngine = this.scoringEngine;
            itemDto.calculatedExposuresCount = this.calculatedExposuresCount;
            itemDto.calculatedFormCount = this.calculatedFormCount;
            itemDto.aslAttachments = this.aslAttachments;
            itemDto.brailleAttachments = this.brailleAttachments;
            itemDto.closedCaptioningAttachments = this.closedCaptioningAttachments;
            itemDto.sightTtsProvided = this.sightTtsProvided;
            itemDto.visualTtsProvided = this.visualTtsProvided;
            itemDto.visualTtsRequired = this.visualTtsRequired;
            itemDto.updateDate = this.updateDate;
            itemDto.validationResults = validationResults;
            itemDto.englishPassagesCount = englishPassagesCount;
            itemDto.spanishPassagesCount = spanishPassagesCount;
            itemDto.contentChangedAfterOperational = contentChangedAfterOperational;
            itemDto.unresolvedUpdateNeed = unresolvedUpdateNeed;
            itemDto.currentUpdateNeedCreatedDate = currentUpdateNeedCreatedDate;
            itemDto.currentUpdateNeedInternalResolution = currentUpdateNeedInternalResolution;
            itemDto.currentUpdateNeedInternalResolutionDate = currentUpdateNeedInternalResolutionDate;
            itemDto.currentUpdateNeedResolution = currentUpdateNeedResolution;
            itemDto.currentUpdateNeedResolutionDate = currentUpdateNeedResolutionDate;

            return itemDto;
        }
    }
}