package org.opentestsystem.ap.imrt.iss.dto.search;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.*;

/**
 * Represents a general filter
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "property", visible = true)
@JsonSubTypes({
        @JsonSubTypes.Type(value = MatchFilter.class, name = ITEM_ID),
        @JsonSubTypes.Type(value = MatchFilter.class, name = GRADE),
        @JsonSubTypes.Type(value = MatchFilter.class, name = SUBJECT),
        @JsonSubTypes.Type(value = MatchFilter.class, name = DOK),
        @JsonSubTypes.Type(value = MatchFilter.class, name = WORKFLOW_STATUS),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ITEM_TYPE),
        @JsonSubTypes.Type(value = MatchFilter.class, name = STIMULUS_ID),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ORG_TYPE_ID),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ASL_PROVIDED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ASL_REQUIRED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = BRAILLE_PROVIDED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = BRAILLE_REQUIRED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = CC_PROVIDED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = CC_REQUIRED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TRANSLATION_PROVIDED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TRANSLATION_REQUIRED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = PRIMARY_CLAIM),
        @JsonSubTypes.Type(value = MatchFilter.class, name = PRIMARY_TARGET),
        @JsonSubTypes.Type(value = MatchFilter.class, name = SECONDARY_CLAIM),
        @JsonSubTypes.Type(value = MatchFilter.class, name = SECONDARY_TARGET),
        @JsonSubTypes.Type(value = MatchFilter.class, name = QUATERNARY_CLAIM),
        @JsonSubTypes.Type(value = MatchFilter.class, name = QUATERNARY_TARGET),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TERTIARY_CLAIM),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TERTIARY_TARGET),
        @JsonSubTypes.Type(value = MatchFilter.class, name = WRITING_PURPOSE),
        @JsonSubTypes.Type(value = MatchFilter.class, name = PERFORMANCE_TASK),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TTS_VISUAL_REQUIRED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = FORM_TYPE),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ASSESSMENT_TYPE),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TEST_CATEGORY),
        @JsonSubTypes.Type(value = MatchFilter.class, name = SCORING_ENGINE),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ALLOW_CALCULATOR),
        @JsonSubTypes.Type(value = MatchFilter.class, name = CURRENT_UPDATE_NEED_RESOLUTION),
        @JsonSubTypes.Type(value = MatchFilter.class, name = CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION),
        @JsonSubTypes.Type(value = MatchFilter.class, name = ILLUSTRATED_GLOSSARY_REQUIRED),
        @JsonSubTypes.Type(value = MatchFilter.class, name = TRANSLATED_GLOSSARY_REQUIRED),
        @JsonSubTypes.Type(value = KeywordFilter.class, name = KEYWORDS),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = DAYS_IN_WORKFLOW_STATUS),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = CALCULATED_FORM_COUNT),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = CALCULATED_EXPOSURES_COUNT),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = ITEM_DIFFICULTY_QUINTILE),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = ASSOCIATED_ITEM_COUNT),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = ENGLISH_PASSAGES_COUNT),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = SPANISH_PASSAGES_COUNT),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = VALIDATION_RESULT_SEVERITY_COUNT_SEVERE),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = VALIDATION_RESULT_SEVERITY_COUNT_DEGRADED),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = VALIDATION_RESULT_SEVERITY_COUNT_TOLERABLE),
        @JsonSubTypes.Type(value = IntegerRangeFilter.class, name = VALIDATION_RESULT_SEVERITY_COUNT_BENIGN),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = BEING_CREATED),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = TTS_SIGHT_PROVIDED),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = CLOSED_CAPTIONING_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = CONTENT_CHANGED_AFTER_OPERATIONAL),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = TTS_VISUAL_PROVIDED),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = HAS_UNRESOLVED_UPDATE_NEED),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = TRANSLATED_GLOSSARY_PROVIDED),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = ENGLISH_GLOSSARY_PROVIDED),
        @JsonSubTypes.Type(value = BooleanFlagFilter.class, name = ILLUSTRATED_GLOSSARY_PROVIDED),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = ORG_NAME),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = CONTENT_TASK_MODEL),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = ITEM_AUTHOR),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = CREATED_BY),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = PRIMARY_COMMON_CORE_STANDARD),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = SECONDARY_COMMON_CORE_STANDARD),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = TERTIARY_COMMON_CORE_STANDARD),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = QUATERNARY_COMMON_CORE_STANDARD),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = PRIMARY_CONTENT_DOMAIN),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = SECONDARY_CONTENT_DOMAIN),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = TERTIARY_CONTENT_DOMAIN),
        @JsonSubTypes.Type(value = ContainsFilter.class, name = QUATERNARY_CONTENT_DOMAIN),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = WORKFLOW_STATUS_UPDATE_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = CREATE_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = ENGLISH_CONTENT_LAST_UPDATED_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = SPANISH_CONTENT_LAST_UPDATED_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = UPDATED_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = CURRENT_UPDATE_NEED_CREATED_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION_DATE),
        @JsonSubTypes.Type(value = DateRangeFilter.class, name = CURRENT_UPDATE_NEED_RESOLUTION_DATE)
})
public abstract class Filter {
    private final SearchProperty searchProperty;
    private final boolean includeBlanks;

    protected Filter(final String property, final boolean includeBlanks) {
        this.searchProperty = SearchProperty.findSearchProperty(property)
                .orElseThrow(() -> new IllegalArgumentException("Invalid filter property " + property));
        this.includeBlanks = includeBlanks;
    }

    /**
     * @return the property to filter search results
     */
    @JsonIgnore
    public SearchProperty getSearchProperty() {
        return searchProperty;
    }

    public String getProperty() {
        return searchProperty.getProperty();
    }

    /**
     * @return the type code for the type of filter (e.g. "match")
     */
    public abstract String getType();

    /**
     * @return {@code true} to include blank values
     */
    public boolean isIncludeBlanks() {
        return includeBlanks;
    }
}
