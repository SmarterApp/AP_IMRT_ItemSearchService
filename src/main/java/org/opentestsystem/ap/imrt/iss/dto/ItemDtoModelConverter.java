package org.opentestsystem.ap.imrt.iss.dto;

import org.opentestsystem.ap.imrt.common.model.Attachment;
import org.opentestsystem.ap.imrt.common.model.AttachmentFileTypes;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.Stimulus;
import org.opentestsystem.ap.imrt.iss.model.AbstractModelConverter;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import static com.google.common.base.Preconditions.checkNotNull;
import static org.apache.logging.log4j.core.config.plugins.Plugin.EMPTY;

/**
 * Maps a {@link ImrtItem} to an {@link ItemDto}
 */
@Component
public class ItemDtoModelConverter extends AbstractModelConverter<BaseItem, ItemDto> {

    @Override
    public ItemDto convert(final BaseItem domainObject) {
        return mapToBuilder(domainObject).build();
    }

    /**
     * Maps the {@link BaseItem} including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObject the {@link BaseItem} to map
     * @return the mapped {@link ItemDto}
     */
    public ItemDto mapWithDetail(final BaseItem domainObject) {
        return mapToBuilder(domainObject)
                .withItemDetail(domainObject.getItemJson())
                .build();
    }

    /**
     * Maps a collection of {@link BaseItem}'s including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObjects the collection of {@link BaseItem} to map
     * @return list of mapped {@link ItemDto}
     */
    public List<ItemDto> mapWithDetail(final Collection<BaseItem> domainObjects) {
        checkNotNull(domainObjects);

        return domainObjects.stream()
                .map(this::mapWithDetail)
                .collect(Collectors.toList());
    }

    private ItemDto.Builder mapToBuilder(final BaseItem item) {

        Collection<ValidationResultDto> validationResults = item.getValidationResults()
                .stream()
                .map(result -> ValidationResultDto.builder()
                        .withCategory(result.getCategory())
                        .withDetail(result.getDetail())
                        .withMessage(result.getMessage())
                        .withSeverity(result.getSeverity())
                        .withValidationItemId(result.getValidationItemId())
                        .withValidationItemType(result.getValidationItemType())
                        .build()).collect(Collectors.toList());

        return ItemDto.builder()
                .withDepthOfKnowledge(item.getDepthOfKnowledge())
                .withIntendedGrade(item.getGrade())
                .withId(String.valueOf(item.getId()))
                .withCreateDate(item.getItemCreatedAt())
                .withCreatedBy(item.getItemCreatedBy())
                .withType(item.getItemType())
                .withSubject(item.getSubject())
                .withStimulusId(item.getAssociatedStimulusId() == null ? EMPTY : String.valueOf(item.getAssociatedStimulusId()))
                .withBeingCreated(convertToString(item.isBeingCreated()))
                .withWorkflowStatus(item.getWorkflowStatus())
                .withOrganizationTypeId(item.getOrganizationTypeId())
                .withOrganizationName(item.getOrganizationName())
                .withPrimaryTarget(item.getPrimaryTarget())
                .withPrimaryClaim(item.getPrimaryClaim())
                .withPrimaryCommonCoreStandard(item.getPrimaryCommonCoreStandard())
                .withPrimaryContentDomain(item.getPrimaryContentDomain())
                .withSecondaryTarget(item.getSecondaryTarget())
                .withSecondaryClaim(item.getSecondaryClaim())
                .withSecondaryCommonCoreStandard(item.getSecondaryCommonCoreStandard())
                .withSecondaryContentDomain(item.getSecondaryContentDomain())
                .withTertiaryTarget(item.getTertiaryTarget())
                .withTertiaryClaim(item.getTertiaryClaim())
                .withTertiaryCommonCoreStandard(item.getTertiaryCommonCoreStandard())
                .withTertiaryContentDomain(item.getTertiaryContentDomain())
                .withQuaternaryTarget(item.getQuaternaryTarget())
                .withQuaternaryClaim(item.getQuaternaryClaim())
                .withQuaternaryCommonCoreStandard(item.getQuaternaryCommonCoreStandard())
                .withQuaternaryContentDomain(item.getQuaternaryContentDomain())
                .withContentTaskModel(item.getContentTaskModel())
                .withItemAuthor(item.getItemAuthor())
                .withItemDifficultyQuintile(convertToString(item.getItemDifficultyQuintile()))
                .withCalculatedFormCount(convertToString(item.getFormCount()))
                .withCalculatedExposuresCount(convertToString(item.getExposuresCount()))
                .withWorkflowStatusUpdatedDate(item.getWorkflowStatusSetAt())
                .withAslRequired(item.getAslRequired())
                .withAslProvided(item.getAslProvided())
                .withBrailleRequired(item.getBrailleRequired())
                .withBrailleProvided(item.getBrailleProvided())
                .withClosedCaptioningRequired(item.getCcRequired())
                .withClosedCaptioningProvided(item.getCcProvided())
                .withTranslationRequired(item.getTranslationRequired())
                .withTranslationProvided(item.getTranslationProvided())
                .withWritingPurpose(item.getWritingPurpose())
                .withPerformanceTask(item.getPerformanceTask())
                .withAslAttachments(convertToAttachmentDtos(AttachmentFileTypes.ASL, item.getAttachments()))
                .withBrailleAttachments(convertToAttachmentDtos(AttachmentFileTypes.BRAILLE, item.getAttachments()))
                .withClosedCaptioningAttachments(convertToAttachmentDtos(AttachmentFileTypes.CC, item.getAttachments()))
                .withSightTTSProvided(convertToString(item.getSightTtsProvided()))
                .withVisualTTSProvided(convertToString(item.getVisualTtsProvided()))
                .withVisualTTSRequired(item.getVisualTtsRequired())
                .withTestCategory(item.getTestCategory())
                .withEnglishContentLastUpdatedDate(item.getEnglishContentLastUpdatedAt())
                .withSpanishContentLastUpdatedDate(item.getSpanishContentLastUpdatedAt())
                .withAllowCalculator(item.getAllowCalculator())
                .withUpdateDate(item.getUpdatedAt())
                .withScoringEngine(item.getScoringEngine())
                .withAslUploadedPriorToLastContentUpdate(convertToString(item.getAslUploadedPriorToLastContentUpdate()))
                .withBrailleUploadedPriorToLastContentUpdate(convertToString(item.getBrailleUploadedPriorToLastContentUpdate()))
                .withAssociatedItemCount(mapAssociatedItemCount(item))
                .withValidationResults(validationResults)
                .withSpanishPassagesCount(convertToString(item.getSpanishPassagesCount()))
                .withEnglishPassagesCount(convertToString(item.getEnglishPassagesCount()))
                .withContentChangedAfterOperational(convertToString(item.isContentChangedAfterOperational()))
                .withClosedCaptioningUploadedPriorToLastContentUpdate(convertToString(item.getClosedCaptioningUploadedPriorToLastContentUpdate()));
    }

    private String convertToString(Object obj) {
        if (obj == null) {
            return EMPTY;
        }

        return obj.toString();
    }

    private List<AttachmentDto> convertToAttachmentDtos(final String attachmentFileType, final Collection<Attachment> attachments) {
        return attachments.stream()
                .filter(attachment -> attachmentFileType.equals(attachment.getAttachmentKey().getFileType()))
                .map(attachment -> new AttachmentDto(attachment.getAttachmentKey().getFileName(), attachment.getUploadedDate()))
                .collect(Collectors.toList());
    }

    private String mapAssociatedItemCount(BaseItem baseItem) {
        if (!(baseItem instanceof Stimulus)) {
            return "0";
        }

        Stimulus stimulus = (Stimulus) baseItem;

        if (stimulus.getAssociatedItems() == null) {
            return "0";
        }

        return String.valueOf(stimulus.getAssociatedItems().size());
    }
}
