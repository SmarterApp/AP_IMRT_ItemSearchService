package org.opentestsystem.ap.imrt.iss.service.filter;

import com.google.common.collect.Sets;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ASL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ASL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BRAILLE_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BRAILLE_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CALCULATED_EXPOSURES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CC_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CC_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CONTENT_TASK_MODEL;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CREATED_BY;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CREATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.STIMULUS_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TRANSLATION_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TRANSLATION_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS_UPDATE_DATE;

/**
 * Utility class for filter processing.  Since callers can use whatever values they want for searches we need to ensure
 * IMRT knows which fields are supported by the system.
 */
public class FilterProperty {
    //Maps filterable fields to imrt filter fields
    private static final Map<String, String> FILTER_TO_IMRT_FIELDS;
    private static final Set<String> SUPPORTED_IMRT_ITEM_FIELDS;

    static {
        Map<String, String> filterToFields = new HashMap<>();
        filterToFields.put(ITEM_ID, "id");
        filterToFields.put(GRADE, "grade");
        filterToFields.put(STIMULUS_ID, "associatedStimulusId");
        filterToFields.put(DOK, "depthOfKnowledge");
        filterToFields.put(WORKFLOW_STATUS, "workflowStatus");
        filterToFields.put(ITEM_TYPE, "itemType");
        filterToFields.put(SUBJECT, "subject");
        filterToFields.put(DAYS_IN_WORKFLOW_STATUS, "workflowStatusSetAt");
        filterToFields.put(BEING_CREATED, "beingCreated");
        filterToFields.put(ORG_TYPE_ID, "organizationTypeId");
        filterToFields.put(ORG_NAME, "organizationName");
        filterToFields.put(CONTENT_TASK_MODEL, "contentTaskModel");
        filterToFields.put(ITEM_AUTHOR, "itemAuthor");
        filterToFields.put(WORKFLOW_STATUS_UPDATE_DATE, "workflowStatusSetAt");
        filterToFields.put(CREATE_DATE, "itemCreatedAt");
        filterToFields.put(CREATED_BY, "itemCreatedBy");
        filterToFields.put(CALCULATED_EXPOSURES_COUNT, "exposuresCount");
        filterToFields.put(CALCULATED_FORM_COUNT, "formCount");
        filterToFields.put(ITEM_DIFFICULTY_QUINTILE, "itemDifficultyQuintile");
        filterToFields.put(ASL_REQUIRED, "aslRequired");
        filterToFields.put(ASL_PROVIDED, "aslProvided");
        filterToFields.put(BRAILLE_REQUIRED, "brailleRequired");
        filterToFields.put(BRAILLE_PROVIDED, "brailleProvided");
        filterToFields.put(CC_REQUIRED, "ccRequired");
        filterToFields.put(CC_PROVIDED, "ccProvided");
        filterToFields.put(TRANSLATION_REQUIRED, "translationRequired");
        filterToFields.put(TRANSLATION_PROVIDED, "translationProvided");

        filterToFields.put(PRIMARY_CLAIM, "primaryClaim");
        filterToFields.put(PRIMARY_TARGET, "primaryTarget");
        filterToFields.put(SECONDARY_CLAIM, "secondaryClaim");
        filterToFields.put(SECONDARY_TARGET, "secondaryTarget");
        filterToFields.put(QUATERNARY_CLAIM, "quaternaryClaim");
        filterToFields.put(QUATERNARY_TARGET, "quaternaryTarget");
        filterToFields.put(TERTIARY_CLAIM, "tertiaryClaim");
        filterToFields.put(TERTIARY_TARGET, "tertiaryTarget");

        FILTER_TO_IMRT_FIELDS = Collections.unmodifiableMap(filterToFields);
        SUPPORTED_IMRT_ITEM_FIELDS = Sets.newHashSet(FILTER_TO_IMRT_FIELDS.values());
    }


    /**
     * Normally the imrt property and the searchable property will align.  However, there are times where we name
     * things in IMRT differently than the item dictionary.  This handles the mapping.
     *
     * @param property the request filter property
     * @return the query property to use
     */
    public static Optional<String> getImrtSearchProperty(final String property) {
        return Optional.ofNullable(FILTER_TO_IMRT_FIELDS.get(property));
    }

    /**
     * Determines if the property is a valid imrt property
     *
     * @param property the imrt property used for filtering
     * @return {@code true} if the imrt property is valid and supported
     */
    public static boolean isValidImrtField(final String property) {
        return SUPPORTED_IMRT_ITEM_FIELDS.contains(property);
    }
}
