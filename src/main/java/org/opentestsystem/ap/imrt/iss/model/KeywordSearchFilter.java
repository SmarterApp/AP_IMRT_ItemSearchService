package org.opentestsystem.ap.imrt.iss.model;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.imrt.iss.core.keyword.KeywordSearchSyntaxConverter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.springframework.core.convert.converter.Converter;

import java.util.Optional;

/**
 * Handles finding item with matching keyword content
 */
public class KeywordSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private static final String placeholderJoin =
            "  CROSS JOIN (VALUES ('')) t(" + SearchProperty.KEYWORD_CONTENT.getColumnName() + ")\n" +
                    "  CROSS JOIN (VALUES ('')) u(" + SearchProperty.KEYWORD_SECTION.getColumnName() + ")\n";

    private static final String joinTemplate =
            "  JOIN item_keyword kw ON kw.key = (" +
            "    SELECT item_keyword.key FROM item_keyword" +
            "      WHERE item.key=item_keyword.item_key" +
            "      AND %s" +
            "      ORDER BY item_keyword.key LIMIT 1) ";

    private final String value;
    private final boolean caseSensitive;

    private final Converter<KeywordSearchFilter, String> syntaxConverter;

    @SuppressWarnings("WeakerAccess")
    public KeywordSearchFilter(final SearchProperty filterProperty, final String searchString,
                               final boolean caseSensitive) {
        super(filterProperty, false);
        this.value = searchString;
        this.caseSensitive = caseSensitive;
        this.syntaxConverter = new KeywordSearchSyntaxConverter();
    }

    public String getValue() {
        return value;
    }

    @SuppressWarnings("WeakerAccess")
    public boolean isCaseSensitive() {
        return caseSensitive;
    }

    /**
     * @return a join clause that will add the expected columns to the result set without actually doing the join.
     */
    public static String getPlaceholderJoinClause() {
        return placeholderJoin;
    }

    public String getJoinClause() {
        final String query = syntaxConverter.convert(this);
        return String.format(joinTemplate, query);
    }

    @Override
    public Optional<FilterQuery> getFilterQuery(final SearchPermissions searchPermissions) {
        return Optional.empty();
    }

    @Override
    public boolean isEmpty() {
        return StringUtils.isEmpty(getValue());
    }
}
