package org.opentestsystem.ap.imrt.iss.core.keyword;

import com.fathzer.soft.javaluator.Operator;
import org.opentestsystem.ap.imrt.iss.model.KeywordSearchFilter;
import org.springframework.core.convert.converter.Converter;

import java.util.Iterator;

/**
 * Converter from KeywordSearchFilter to SQL String for PostgreSQL core.
 */
public class KeywordSearchSyntaxConverter implements Converter<KeywordSearchFilter, String> {
    @Override
    public String convert(KeywordSearchFilter keywordSearchFilter) {
        final String tableName = keywordSearchFilter.getFilterProperty().getTable();
        final String columnName = keywordSearchFilter.getFilterProperty().getColumnName();
        final boolean caseSensitive = keywordSearchFilter.isCaseSensitive();

        KeywordSearchToRegexEvaluator<String> evaluator =
            new KeywordSearchToRegexEvaluator<String>() {
                @Override
                protected String convertRegexToken(String regexToken) {
                    // SQL requires single quotes in the string to be doubled.
                    String newToken = regexToken.replaceAll("'", "''");

                    String operator = caseSensitive ? " ~ " : " ~* ";
                    return tableName + "." + columnName + operator + "'" + newToken + "'";
                }

                @Override
                protected String evaluate(Operator operator,
                                          Iterator<String> operands, Object evaluationContext) {
                    String eval = null;
                    String o1 = operands.next();
                    String o2 = operands.hasNext() ? operands.next() : null;

                    if (isNegate(operator)) {
                        eval = "NOT " + o1;
                    } else if (isOr(operator)) {
                        eval = "(" + o1 + " OR " + o2 + ")";
                    } else if (isAnd(operator)) {
                        eval = "(" + o1 + " AND " + o2 + ")";
                    }

                    return eval;
                }
            };

        return evaluator.evaluate(keywordSearchFilter.getValue());
    }
}
