package org.opentestsystem.ap.imrt.iss.model.reports.gap;

import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;

import java.time.Instant;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * Store all the information required for the Gap Report output.
 */
public class GapReport {
    private final Collection<SearchFilter> filters;
    private final Collection<SearchProperty> groupFilters;
    private final List<Map<String, Object>> gapReportRecords;
    private final Instant createdDate;

    public GapReport(final Collection<SearchFilter> filters,
                     final Collection<SearchProperty> groupFilters,
                     final List<Map<String, Object>> gapReportRecords,
                     final Instant createdDate) {
        this.filters = filters;
        this.groupFilters = groupFilters;
        this.gapReportRecords = gapReportRecords;
        this.createdDate = createdDate;
    }

    /**
     * @return The {@link org.opentestsystem.ap.imrt.iss.model.SearchFilter}s used to find the data that appears on the
     * report.
     */
    public Collection<SearchFilter> getFilters() {
        return filters;
    }

    /**
     * @return The {@link org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty}s to determine which columns should
     * appear on the report and how the difficulty quintile counts should be grouped.
     */
    public Collection<SearchProperty> getGroupFilters() {
        return groupFilters;
    }

    /**
     * @return A {@link java.util.List} of rows containing the data for the Gap Report.  Each row is a {@link
     * java.util.Map} with a key == the name of the database column and value == the column's value.
     */
    public List<Map<String, Object>> getGapReportRecords() {
        return gapReportRecords;
    }

    /**
     * @return The {@link java.time.Instant} when this Gap Report was created.
     */
    public Instant getCreatedDate() {
        return createdDate;
    }
}
