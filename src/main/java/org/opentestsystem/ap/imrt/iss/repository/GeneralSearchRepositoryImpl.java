package org.opentestsystem.ap.imrt.iss.repository;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.dto.ItemSearchResult;
import org.opentestsystem.ap.imrt.iss.dto.ItemSearchResultBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.apache.commons.lang.StringUtils.defaultString;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ALLOW_CALCULATOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ASL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ASL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ASSOCIATED_ITEM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BRAILLE_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BRAILLE_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CALCULATED_EXPOSURES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CC_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CC_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CLOSED_CAPTIONING_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CONTENT_CHANGED_AFTER_OPERATIONAL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CONTENT_TASK_MODEL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CREATED_BY;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CREATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_CREATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_RESOLUTION;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_RESOLUTION_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ENGLISH_CONTENT_LAST_UPDATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ENGLISH_GLOSSARY_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ENGLISH_PASSAGES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.HAS_UNRESOLVED_UPDATE_NEED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ILLUSTRATED_GLOSSARY_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ILLUSTRATED_GLOSSARY_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ORGANIZATION_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ORGANIZATION_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PERFORMANCE_TASK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SCORING_ENGINE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SPANISH_CONTENT_LAST_UPDATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SPANISH_PASSAGES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.STIMULUS_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TEST_CATEGORY;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TRANSLATED_GLOSSARY_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TRANSLATED_GLOSSARY_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TRANSLATION_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TRANSLATION_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TTS_SIGHT_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TTS_VISUAL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TTS_VISUAL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.UPDATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.VALIDATION_RESULT_SEVERITY_COUNT_BENIGN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.VALIDATION_RESULT_SEVERITY_COUNT_DEGRADED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.VALIDATION_RESULT_SEVERITY_COUNT_SEVERE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.VALIDATION_RESULT_SEVERITY_COUNT_TOLERABLE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.WORKFLOW_STATUS_UPDATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.WRITING_PURPOSE;

@Repository
public class GeneralSearchRepositoryImpl implements GeneralSearchRepository {
    private static final Logger LOG = LoggerFactory.getLogger(GeneralSearchRepositoryImpl.class);

    private static final String BASE_QUERY = "SELECT " +
            ITEM_ID.getColumnName() + ", \n " +
            SUBJECT.getColumnName() + ", \n " +
            INTENDED_GRADE.getColumnName() + ", \n " +
            WORKFLOW_STATUS.getColumnName() + ", \n " +
            ITEM_TYPE.getColumnName() + ", \n " +
            DOK.getColumnName() + ", \n " +
            CREATED_BY.getColumnName() + ", \n " +
            CREATE_DATE.getColumnName() + ", \n " +
            UPDATED_DATE.getColumnName() + ", \n " +
            STIMULUS_ID.getColumnName() + ", \n " +
            WORKFLOW_STATUS_UPDATE_DATE.getColumnName() + ", \n " +
            ORGANIZATION_NAME.getColumnName() + ", \n " +
            ORGANIZATION_TYPE_ID.getColumnName() + ", \n " +
            BEING_CREATED.getColumnName() + ", \n " +
            PRIMARY_CLAIM.getColumnName() + ", \n " +
            PRIMARY_COMMON_CORE_STANDARD.getColumnName() + ", \n " +
            PRIMARY_CONTENT_DOMAIN.getColumnName() + ", \n " +
            PRIMARY_TARGET.getColumnName() + ", \n " +
            SECONDARY_CLAIM.getColumnName() + ", \n " +
            SECONDARY_COMMON_CORE_STANDARD.getColumnName() + ", \n " +
            SECONDARY_CONTENT_DOMAIN.getColumnName() + ", \n " +
            SECONDARY_TARGET.getColumnName() + ", \n " +
            TERTIARY_CLAIM.getColumnName() + ", \n " +
            TERTIARY_COMMON_CORE_STANDARD.getColumnName() + ", \n " +
            TERTIARY_CONTENT_DOMAIN.getColumnName() + ", \n " +
            TERTIARY_TARGET.getColumnName() + ", \n " +
            QUATERNARY_CLAIM.getColumnName() + ", \n " +
            QUATERNARY_COMMON_CORE_STANDARD.getColumnName() + ", \n " +
            QUATERNARY_CONTENT_DOMAIN.getColumnName() + ", \n " +
            QUATERNARY_TARGET.getColumnName() + ", \n " +
            CONTENT_TASK_MODEL.getColumnName() + ", \n " +
            ITEM_AUTHOR.getColumnName() + ", \n " +
            CALCULATED_FORM_COUNT.getColumnName() + ", \n " +
            CALCULATED_EXPOSURES_COUNT.getColumnName() + ", \n " +
            ASL_REQUIRED.getColumnName() + ", \n " +
            ASL_PROVIDED.getColumnName() + ", \n " +
            BRAILLE_REQUIRED.getColumnName() + ", \n " +
            BRAILLE_PROVIDED.getColumnName() + ", \n " +
            CC_REQUIRED.getColumnName() + ", \n " +
            CC_PROVIDED.getColumnName() + ", \n " +
            TRANSLATION_REQUIRED.getColumnName() + ", \n " +
            TRANSLATION_PROVIDED.getColumnName() + ", \n " +
            WRITING_PURPOSE.getColumnName() + ", \n " +
            PERFORMANCE_TASK.getColumnName() + ", \n " +
            TTS_SIGHT_PROVIDED.getColumnName() + ", \n " +
            TTS_VISUAL_PROVIDED.getColumnName() + ", \n " +
            TTS_VISUAL_REQUIRED.getColumnName() + ", \n " +
            TEST_CATEGORY.getColumnName() + ", \n " +
            ENGLISH_CONTENT_LAST_UPDATED_DATE.getColumnName() + ", \n " +
            SPANISH_CONTENT_LAST_UPDATED_DATE.getColumnName() + ", \n " +
            SCORING_ENGINE.getColumnName() + ", \n " +
            ALLOW_CALCULATOR.getColumnName() + ", \n " +
            ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE.getColumnName() + ", \n " +
            BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE.getColumnName() + ", \n " +
            CLOSED_CAPTIONING_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE.getColumnName() + ", \n " +
            ITEM_DIFFICULTY_QUINTILE.getColumnName() + ", \n " +
            ENGLISH_PASSAGES_COUNT.getColumnName() + ", \n " +
            SPANISH_PASSAGES_COUNT.getColumnName() + ", \n " +
            CONTENT_CHANGED_AFTER_OPERATIONAL.getColumnName() + ", \n " +
            HAS_UNRESOLVED_UPDATE_NEED.getColumnName() + ", \n" +
            CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION.getColumnName() + ", \n" +
            CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION_DATE.getColumnName() + ", \n" +
            CURRENT_UPDATE_NEED_CREATED_DATE.getColumnName() + ", \n" +
            CURRENT_UPDATE_NEED_RESOLUTION.getColumnName() + ", \n" +
            CURRENT_UPDATE_NEED_RESOLUTION_DATE.getColumnName() + ", \n" +
            ENGLISH_GLOSSARY_PROVIDED.getColumnName() + ", \n" +
            ILLUSTRATED_GLOSSARY_REQUIRED.getColumnName() + ", \n" +
            ILLUSTRATED_GLOSSARY_PROVIDED.getColumnName() + ", \n" +
            TRANSLATED_GLOSSARY_PROVIDED.getColumnName() + ", \n" +
            TRANSLATED_GLOSSARY_REQUIRED.getColumnName() + ", \n" +
            VALIDATION_RESULT_SEVERITY_COUNT_SEVERE.getColumnName() + ", \n" +
            VALIDATION_RESULT_SEVERITY_COUNT_DEGRADED.getColumnName() + ", \n" +
            VALIDATION_RESULT_SEVERITY_COUNT_TOLERABLE.getColumnName() + ", \n" +
            VALIDATION_RESULT_SEVERITY_COUNT_BENIGN.getColumnName() + ", \n" +

            "(select count(1) from stim_link where item_key_stim = item.key) as " + SearchProperty.ASSOCIATED_ITEM_COUNT.getColumnName() + " \n" +
            "FROM item \n";

    private static final String COUNT_BASE_QUERY = "SELECT COUNT(1) as totalItemCount FROM item";

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final SearchFilterQueryBuilder searchFilterQueryBuilder;
    private final OperationalEventService logger;

    public GeneralSearchRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate, final SearchFilterQueryBuilder searchFilterQueryBuilder, final OperationalEventService logger) {
        this.jdbcTemplate = jdbcTemplate;
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
        this.logger = logger;
    }

    public int getTotalItemsCount(final List<SearchFilter> searchFilters) {
        SearchQuery searchQuery = searchFilterQueryBuilder.buildQuery(searchFilters, COUNT_BASE_QUERY);

        logger.debug(LOG, "Search SQL: \n {}", searchQuery.getSearchQuery());

        return jdbcTemplate.query(searchQuery.getSearchQuery(), searchQuery.getMapSqlParameterSource(), (rs, rowNum) -> rs.getInt("totalItemCount")).get(0);
    }

    @Override
    public List<ItemSearchResult> findSlice(final PageDto pageDto, final List<Sort> sorts, final List<SearchFilter> searchFilters) {
        SearchQuery searchQuery = searchFilterQueryBuilder.buildQuery(Optional.of(pageDto), sorts, searchFilters, BASE_QUERY);

        logger.debug(LOG, "Search SQL: \n {}", searchQuery.getSearchQuery());

        return jdbcTemplate.query(searchQuery.getSearchQuery(), searchQuery.getMapSqlParameterSource(), (rs, rowNum) -> {
            ItemSearchResultBuilder builder = ItemSearchResult.builder();

            builder.withId(String.valueOf(rs.getInt(ITEM_ID.getColumnName())))
                    .withSubject(defaultString(rs.getString(SUBJECT.getColumnName())))
                    .withIntendedGrade(defaultString(rs.getString(INTENDED_GRADE.getColumnName())))
                    .withWorkflowStatus(defaultString(rs.getString(WORKFLOW_STATUS.getColumnName())))
                    .withType(defaultString(rs.getString(ITEM_TYPE.getColumnName())))
                    .withDepthOfKnowledge(rs.getString(defaultString(DOK.getColumnName())))
                    .withCreatedBy(rs.getString(defaultString(CREATED_BY.getColumnName())))
                    .withCreateDate(mapTimestampToInstant(rs, CREATE_DATE.getColumnName()))
                    .withUpdateDate(mapTimestampToInstant(rs, UPDATED_DATE.getColumnName()))
                    .withStimulusId(defaultString(rs.getString(STIMULUS_ID.getColumnName())))
                    .withWorkflowStatusUpdatedDate(mapTimestampToInstant(rs, WORKFLOW_STATUS_UPDATE_DATE.getColumnName()))
                    .withOrganizationName(defaultString(rs.getString(ORGANIZATION_NAME.getColumnName())))
                    .withOrganizationTypeId(defaultString(rs.getString(ORGANIZATION_TYPE_ID.getColumnName())))
                    .withBeingCreated(rs.getBoolean(BEING_CREATED.getColumnName()) ? Boolean.TRUE.toString() : Boolean.FALSE.toString())
                    .withPrimaryClaim(defaultString(rs.getString(PRIMARY_CLAIM.getColumnName())))
                    .withPrimaryContentDomain(defaultString(rs.getString(PRIMARY_CONTENT_DOMAIN.getColumnName())))
                    .withPrimaryCommonCoreStandard(defaultString(rs.getString(PRIMARY_COMMON_CORE_STANDARD.getColumnName())))
                    .withPrimaryTarget(defaultString(rs.getString(PRIMARY_TARGET.getColumnName())))
                    .withSecondaryClaim(defaultString(rs.getString(SECONDARY_CLAIM.getColumnName())))
                    .withSecondaryContentDomain(defaultString(rs.getString(SECONDARY_CONTENT_DOMAIN.getColumnName())))
                    .withSecondaryCommonCoreStandard(defaultString(rs.getString(SECONDARY_COMMON_CORE_STANDARD.getColumnName())))
                    .withSecondaryTarget(defaultString(rs.getString(SECONDARY_TARGET.getColumnName())))
                    .withTertiaryClaim(defaultString(rs.getString(TERTIARY_CLAIM.getColumnName())))
                    .withTertiaryContentDomain(defaultString(rs.getString(TERTIARY_CONTENT_DOMAIN.getColumnName())))
                    .withTertiaryCommonCoreStandard(defaultString(rs.getString(TERTIARY_COMMON_CORE_STANDARD.getColumnName())))
                    .withTertiaryTarget(defaultString(rs.getString(TERTIARY_TARGET.getColumnName())))
                    .withQuaternaryClaim(defaultString(rs.getString(QUATERNARY_CLAIM.getColumnName())))
                    .withQuaternaryContentDomain(defaultString(rs.getString(QUATERNARY_CONTENT_DOMAIN.getColumnName())))
                    .withQuaternaryCommonCoreStandard(defaultString(rs.getString(QUATERNARY_COMMON_CORE_STANDARD.getColumnName())))
                    .withQuaternaryTarget(defaultString(rs.getString(QUATERNARY_TARGET.getColumnName())))
                    .withContentTaskModel(defaultString(rs.getString(CONTENT_TASK_MODEL.getColumnName())))
                    .withItemAuthor(defaultString(rs.getString(ITEM_AUTHOR.getColumnName())))
                    .withCalculatedFormCount(mapToString(rs, CALCULATED_FORM_COUNT.getColumnName()))
                    .withCalculatedExposuresCount(mapToString(rs, CALCULATED_EXPOSURES_COUNT.getColumnName()))
                    .withAslRequired(defaultString(rs.getString(ASL_REQUIRED.getColumnName())))
                    .withAslProvided(defaultString(rs.getString(ASL_PROVIDED.getColumnName())))
                    .withBrailleRequired(defaultString(rs.getString(BRAILLE_REQUIRED.getColumnName())))
                    .withBrailleProvided(defaultString(rs.getString(BRAILLE_PROVIDED.getColumnName())))
                    .withClosedCaptioningProvided(defaultString(rs.getString(CC_PROVIDED.getColumnName())))
                    .withClosedCaptioningRequired(defaultString(rs.getString(CC_REQUIRED.getColumnName())))
                    .withTranslationProvided(defaultString(rs.getString(TRANSLATION_PROVIDED.getColumnName())))
                    .withTranslationRequired(defaultString(rs.getString(TRANSLATION_REQUIRED.getColumnName())))
                    .withWritingPurpose(defaultString(rs.getString(WRITING_PURPOSE.getColumnName())))
                    .withPerformanceTask(defaultString(rs.getString(PERFORMANCE_TASK.getColumnName())))
                    .withSightTtsProvided(defaultString(mapToString(rs, TTS_SIGHT_PROVIDED.getColumnName())))
                    .withVisualTtsProvided(defaultString(mapToString(rs, TTS_VISUAL_PROVIDED.getColumnName())))
                    .withVisualTtsRequired(defaultString(rs.getString(TTS_VISUAL_REQUIRED.getColumnName())))
                    .withTestCategory(defaultString(rs.getString(TEST_CATEGORY.getColumnName())))
                    .withEnglishContentLastUpdatedDate(mapTimestampToInstant(rs, ENGLISH_CONTENT_LAST_UPDATED_DATE.getColumnName()))
                    .withSpanishContentLastUpdatedDate(mapTimestampToInstant(rs, SPANISH_CONTENT_LAST_UPDATED_DATE.getColumnName()))
                    .withScoringEngine(defaultString(rs.getString(SCORING_ENGINE.getColumnName())))
                    .withAllowCalculator(defaultString(rs.getString(ALLOW_CALCULATOR.getColumnName())))
                    .withAslUploadedPriorToLastContentUpdate(mapToString(rs, ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE.getColumnName()))
                    .withBrailleUploadedPriorToLastContentUpdate(mapToString(rs, BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE.getColumnName()))
                    .withClosedCaptioningUploadedPriorToLastContentUpdate(mapToString(rs, CLOSED_CAPTIONING_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE.getColumnName()))
                    .withItemDifficultyQuintile(defaultString(rs.getString(ITEM_DIFFICULTY_QUINTILE.getColumnName())))
                    .withSpanishPassagesCount(mapToString(rs, SPANISH_PASSAGES_COUNT.getColumnName()))
                    .withEnglishPassagesCount(mapToString(rs, ENGLISH_PASSAGES_COUNT.getColumnName()))
                    .withAssociatedItemCount(mapToNumericString(rs, ASSOCIATED_ITEM_COUNT.getColumnName()))
                    .withContentChangedAfterOperational(mapToString(rs, CONTENT_CHANGED_AFTER_OPERATIONAL.getColumnName()))
                    .withUnresolvedUpdateNeed(mapToString(rs, HAS_UNRESOLVED_UPDATE_NEED.getColumnName()))
                    .withCurrentUpdateNeedResolutionDate(mapTimestampToInstant(rs, CURRENT_UPDATE_NEED_RESOLUTION_DATE.getColumnName()))
                    .withCurrentUpdateNeedResolution(defaultString(rs.getString(CURRENT_UPDATE_NEED_RESOLUTION.getColumnName())))
                    .withCurrentUpdateNeedInternalResolutionDate(mapTimestampToInstant(rs, CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION_DATE.getColumnName()))
                    .withCurrentUpdateNeedInternalResolution(defaultString(rs.getString(CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION.getColumnName())))
                    .withCurrentUpdateNeedCreatedDate(mapTimestampToInstant(rs, CURRENT_UPDATE_NEED_CREATED_DATE.getColumnName()))
                    .withEnglishGlossaryProvided(mapToString(rs, ENGLISH_GLOSSARY_PROVIDED.getColumnName()))
                    .withIllustratedGlossaryProvided(mapToString(rs, ILLUSTRATED_GLOSSARY_PROVIDED.getColumnName()))
                    .withIllustratedGlossaryRequired(defaultString(rs.getString(ILLUSTRATED_GLOSSARY_REQUIRED.getColumnName())))
                    .withTranslatedGlossaryProvided(mapToString(rs, TRANSLATED_GLOSSARY_PROVIDED.getColumnName()))
                    .withTranslatedGlossaryRequired(defaultString(rs.getString(TRANSLATED_GLOSSARY_REQUIRED.getColumnName())))
                    .withSevereValidationResultCount(String.valueOf(rs.getInt(VALIDATION_RESULT_SEVERITY_COUNT_SEVERE.getColumnName())))
                    .withDegradedValidationResultCount(String.valueOf(rs.getInt(VALIDATION_RESULT_SEVERITY_COUNT_DEGRADED.getColumnName())))
                    .withTolerableValidationResultCount(String.valueOf(rs.getInt(VALIDATION_RESULT_SEVERITY_COUNT_TOLERABLE.getColumnName())))
                    .withBenignValidationResultCount(String.valueOf(rs.getInt(VALIDATION_RESULT_SEVERITY_COUNT_BENIGN.getColumnName())));

            return builder.build();
        });
    }

    @Override
    public Map<String, Long> getGroupCounts(final SearchProperty property, final List<SearchFilter> searchFilters) {
        String baseGroupByQuery = "SELECT " + property.getColumnName() + " as property, count(item.key) as total from item ";
        SearchQuery searchQuery = searchFilterQueryBuilder.buildQuery(searchFilters, property, baseGroupByQuery);

        logger.debug(LOG, "Search SQL: \n {}", searchQuery.getSearchQuery());

        return jdbcTemplate.query(searchQuery.getSearchQuery(), searchQuery.getMapSqlParameterSource(), rs -> {
            Map<String, Long> counts = new HashMap<>();

            while (rs.next()) {
                counts.put(mapToString(rs, "property"), rs.getLong("total"));
            }

            return counts;
        });
    }

    private static Instant mapTimestampToInstant(ResultSet rs, String columnLabel) throws SQLException {
        Timestamp ts = rs.getTimestamp(columnLabel);
        return ts == null
                ? null
                : ts.toInstant();
    }

    private static String mapToString(ResultSet rs, String column) throws SQLException {
        Object obj = rs.getObject(column);

        return obj != null ? obj.toString() : "";
    }

    private static String mapToNumericString(ResultSet rs, String column) throws SQLException {
        Object obj = rs.getObject(column);

        return obj == null || obj.toString().equals(EMPTY) ? "0" : obj.toString();
    }
}
