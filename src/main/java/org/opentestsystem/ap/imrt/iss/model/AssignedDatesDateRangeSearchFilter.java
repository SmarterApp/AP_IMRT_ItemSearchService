package org.opentestsystem.ap.imrt.iss.model;

import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class AssignedDatesDateRangeSearchFilter extends DateRangeSearchFilter {
    public AssignedDatesDateRangeSearchFilter(final SearchProperty filterProperty, final Instant to, final Instant from) {
        super(filterProperty, to, from);
    }

    @Override
    public Optional<FilterQuery> getFilterQuery() {
        if ((getTo() == null && getFrom() == null) && !isIncludeBlanks()) {
            return Optional.empty();
        }

        Map<String, Object> parameters = new HashMap<>();
        String sql = "key = (select item_key from item_assignment where ";

        String fromParameter = getFilterProperty().getProperty() + "From";
        String toParameter = getFilterProperty().getProperty() + "To";

        if (getFrom() != null && getTo() == null) {
            sql = sql + "assigned_date >= :" + fromParameter;
            parameters.put(fromParameter, Timestamp.from(getFrom()));
        } else if (getTo() != null && getFrom() == null) {
            sql = sql + "assigned_date <= :" + toParameter;
            parameters.put(toParameter, Timestamp.from(getTo()));
        } else if (getTo() != null) {
            sql = sql + "assigned_date <= :" + toParameter + " AND assigned_date >= :" + fromParameter;
            parameters.put(toParameter, Timestamp.from(getTo()));
            parameters.put(fromParameter, Timestamp.from(getFrom()));
        }

        sql = sql + " group by item_key) ";

        return Optional.of(new FilterQuery(sql, parameters));
    }
}
