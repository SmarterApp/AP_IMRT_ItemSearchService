package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import static org.apache.commons.lang3.StringUtils.EMPTY;

/**
 * Handles match filters against the form data
 */
@SuppressFBWarnings(value = {"FS"}, justification = "For formatting purposes the use of \n is necessary")
public class FormMatchSearchFilter extends MatchSearchFilter {
    @VisibleForTesting
    static String FILTER = "exists (\n" +
            "            select \n" +
            "                form1_.key \n" +
            "            from\n" +
            "                item_form form1_ \n" +
            "            where\n" +
            "                form1_.item_key=item.key \n" +
            "                and (\n" +
            "                    form1_.%s in (\n" +
            "                        :%s \n" +
            "                    )\n" +
            "                )\n" +
            "        ) ";

    @VisibleForTesting
    static String INCLUDE_BLANKS = "not (exists (select \n" +
            "            form1_.key \n" +
            "        from \n" +
            "            item_form form1_ \n" +
            "        where \n" +
            "            form1_.item_key=item.key)) ";

    public FormMatchSearchFilter(final SearchProperty filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    public FormMatchSearchFilter(final SearchProperty filterProperty, final List<String> filterValues, boolean includeBlanks) {
        super(filterProperty, filterValues, includeBlanks);
    }

    /**
     * Collect the filter values into a {@link java.util.Set}, including an empty string if the filter specifies that
     * blank values should be included.
     *
     * @return A {@link java.util.Set} containing all the filter values, including an empty string when the "include
     * blanks" option is selected in the filter.
     */
    private Collection<String> getValuesForFilter() {
        Set<String> filterValues = new HashSet<>(getFilterValues());

        if (isIncludeBlanks()) {
            filterValues.add(EMPTY);
        }

        return filterValues;
    }

    @Override
    public Optional<FilterQuery> getFilterQuery() {
        if (getFilterValues().isEmpty() && !isIncludeBlanks()) {
            return Optional.empty();
        }

        Map<String, Object> parameters = new HashMap<>();
        String sql = "";

        if (!isIncludeBlanks()) {
            sql = sql + String.format(FILTER, getFilterProperty().getColumnName(), getFilterProperty().getProperty());
            parameters.put(getFilterProperty().getProperty(), getValuesForFilter());
        } else {
            sql = INCLUDE_BLANKS + " OR ";

            sql = sql + String.format(FILTER, getFilterProperty().getColumnName(), getFilterProperty().getProperty());
            parameters.put(getFilterProperty().getProperty(), getValuesForFilter());
        }


        return Optional.of(new FilterQuery(sql, parameters));
    }
}
