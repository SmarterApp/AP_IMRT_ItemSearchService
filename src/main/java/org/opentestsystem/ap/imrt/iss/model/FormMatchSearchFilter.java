package org.opentestsystem.ap.imrt.iss.model;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.Form;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;
import java.util.List;

/**
 * Handles match filters against the form data
 */
public class FormMatchSearchFilter extends MatchSearchFilter {

    public FormMatchSearchFilter(final String filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }


    public FormMatchSearchFilter(final String filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, filterValues, includeNotSet);
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        Specification<BaseItem> specification = null;

        if (!getFilterValues().isEmpty()) {
            specification = (root, query, cb) -> {
                // Build up the subquery against the item_form table
                final Subquery<Form> formSubquery = query.subquery(Form.class);
                final Root<Form> formRoot = formSubquery.from(Form.class);
                formSubquery.select(formRoot);

                final Predicate formsToItemCorrelationPredicate = cb.equal(formRoot.get("item"), root);
                formSubquery.where(formsToItemCorrelationPredicate);

                // Use the item_form subquery as an EXISTS clause for querying the item table
                return cb.exists(formSubquery);
            };
        }

        if (specification == null && isIncludeBlanks()) {
            return isNull();
        } else if (specification != null && isIncludeBlanks()) {
            return Specifications.where(specification).or(isNull());
        }

        return specification;
    }

    private Specification<BaseItem> isNull() {
        return (root, query, cb) -> {
            Join<BaseItem, Form> formJoin = root.join("forms", JoinType.LEFT);
            Path<Object> path = formJoin.get(getFilterProperty());
            return path.isNull();
        };
    }
}
