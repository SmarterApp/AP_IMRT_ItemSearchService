package org.opentestsystem.ap.imrt.iss.model;

import org.jsoup.Connection;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.Form;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.apache.commons.lang3.StringUtils.EMPTY;

/**
 * Handles match filters against the form data
 */
public class FormMatchSearchFilter extends MatchSearchFilter {

    public FormMatchSearchFilter(final String filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }


    public FormMatchSearchFilter(final String filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, filterValues, includeNotSet);
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        Specification<BaseItem> specification = null;

        if (!getFilterValues().isEmpty()) {
            Set<String> filterValues = getValuesForFilter();

            specification = getItemFormSubquery(filterValues);
        }

        if (specification == null && isIncludeBlanks()) {
            return Specifications.where(isNull()).or(getItemFormSubquery(getValuesForFilter()));
        } else if (specification != null && isIncludeBlanks()) {
            return Specifications.where(isNull()).or(specification);
        }

        return specification;
    }

    /**
     *
     * @return
     */
    private Set<String> getValuesForFilter() {
        Set<String> filterValues = new HashSet<>(getFilterValues());

        if (isIncludeBlanks()) {
            filterValues.add(EMPTY);
        }
        return filterValues;
    }

    /**
     * Create a sub-query against the {@code item_form} table.  The sub-query will be used in an {@code EXISTS} clause
     * to look for records in the {@code item_form} table with the specified form_type or assessment_type value(s).
     * <p>
     *     The sub-query is:
     *     SELECT item_form.key
     *     FROM item_form
     *     WHERE item_form.item_key = item.key
     *     AND item_form.form_type IN (:filterValues)
     * </p>
     *
     * @param filterValues The list of form types or assessment types to look for
     * @return A {@link org.springframework.data.jpa.domain.Specification} with an
     */
    private Specification<BaseItem> getItemFormSubquery(final Collection<String> filterValues) {
        return (root, query, cb) -> {
            // Build up the sub-query against the item_form table.
            final Subquery<Form> formSubquery = query.subquery(Form.class);
            final Root<Form> formRoot = formSubquery.from(Form.class);
            final Predicate formsToItemCorrelationPredicate = cb.equal(formRoot.get("item"), root);
            final Predicate formTypeInPredicate = formRoot.get(getFilterProperty()).in(filterValues);

            formSubquery.select(formRoot)
                    .where(cb.and(formsToItemCorrelationPredicate, formTypeInPredicate));

            // Use the item_form sub-query as an EXISTS clause for querying the item_form table
            return cb.exists(formSubquery);
        };
    }

    /**
     * Create a NOT EXISTS {@link org.springframework.data.jpa.domain.Specification} from item table to the item_form
     * table where the {@code item_form.item_key} = {@code item.key} field.  This specification will find any
     * {@link org.opentestsystem.ap.imrt.common.model.BaseItem}s that have no forms.
     *
     * @return A NOT EXISTS {@link org.springframework.data.jpa.domain.Specification} from the
     * {@link org.opentestsystem.ap.imrt.common.model.BaseItem} to the {@link org.opentestsystem.ap.imrt.common.model.Form}
     * where the form is NULL.
     */
    private Specification<BaseItem> isNull() {
        return (root, query, cb) -> {
            // Build up the sub-query against the item_form table.
            final Subquery<Form> formSubquery = query.subquery(Form.class);
            final Root<Form> formRoot = formSubquery.from(Form.class);
            final Predicate formsToItemCorrelationPredicate = cb.equal(formRoot.get("item"), root);

            formSubquery.select(formRoot)
                    .where(formsToItemCorrelationPredicate);

            return cb.not(cb.exists(formSubquery));
        };
    }
}
