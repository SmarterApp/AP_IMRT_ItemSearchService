package org.opentestsystem.ap.imrt.iss.model;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.Form;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Path;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.apache.commons.lang3.StringUtils.EMPTY;

/**
 * Handles match filters against the form data
 */
public class FormMatchSearchFilter extends MatchSearchFilter {

    public FormMatchSearchFilter(final String filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }


    public FormMatchSearchFilter(final String filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, filterValues, includeNotSet);
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        Specification<BaseItem> specification = null;

        if (!getFilterValues().isEmpty()) {
            Set<String> filterValues = new HashSet<>(getFilterValues());

            if (isIncludeBlanks()) {
                filterValues.add(EMPTY);
            }

            specification = getBlankSpecification(filterValues);
        }

        if (specification == null && isIncludeBlanks()) {
            return Specifications.where(isNull()).or(getBlankSpecification(Collections.singletonList(EMPTY)));
        } else if (specification != null && isIncludeBlanks()) {
            return Specifications.where(specification).or(isNull());
        }

        return specification;
    }

    private Specification<BaseItem> getBlankSpecification(final Collection<String> filterValues) {
        return (root, query, cb) -> {
            Join<BaseItem, Form> formJoin = root.join("forms", JoinType.LEFT);
            Path<Object> path = formJoin.get(getFilterProperty());
            return path.in(filterValues);
        };
    }

    private Specification<BaseItem> isNull() {
        return (root, query, cb) -> {
            Join<BaseItem, Form> formJoin = root.join("forms", JoinType.LEFT);
            Path<Object> path = formJoin.get(getFilterProperty());
            return path.isNull();
        };
    }
}
