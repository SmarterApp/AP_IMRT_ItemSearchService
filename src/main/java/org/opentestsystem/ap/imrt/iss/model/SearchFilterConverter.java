package org.opentestsystem.ap.imrt.iss.model;

import org.opentestsystem.ap.imrt.iss.dto.search.BooleanFlagFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.ContainsFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.DateRangeFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.IntegerRangeFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.service.filter.ImrtSearchIndexProperties;
import org.springframework.stereotype.Component;

import java.time.Instant;

import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ALLOW_CALCULATOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ASL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ASL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ASSESSMENT_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BRAILLE_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BRAILLE_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CALCULATED_EXPOSURES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CC_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CC_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CLOSED_CAPTIONING__UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CONTENT_TASK_MODEL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CREATED_BY;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.CREATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ENGLISH_CONTENT_LAST_UPDATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.FORM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PERFORMANCE_TASK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SCORING_ENGINE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SPANISH_CONTENT_LAST_UPDATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.STIMULUS_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TEST_CATEGORY;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TRANSLATION_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TRANSLATION_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TTS_SIGHT_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TTS_VISUAL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TTS_VISUAL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.UPDATED_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WORKFLOW_STATUS_UPDATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WRITING_PURPOSE;

/**
 * Handles converting {@link Filter} to the internal {@link SearchFilter} model
 */
@Component
public class SearchFilterConverter extends AbstractModelConverter<Filter, SearchFilter> implements ModelConverter<Filter, SearchFilter> {
    @Override
    public SearchFilter convert(final Filter filter) {
        switch (filter.getProperty()) {
            case GRADE:
            case DOK:
            case WORKFLOW_STATUS:
            case ITEM_TYPE:
            case SUBJECT:
            case ORG_TYPE_ID:
            case ASL_PROVIDED:
            case ASL_REQUIRED:
            case BRAILLE_PROVIDED:
            case BRAILLE_REQUIRED:
            case CC_PROVIDED:
            case CC_REQUIRED:
            case TRANSLATION_PROVIDED:
            case TRANSLATION_REQUIRED:
            case PRIMARY_CLAIM:
            case PRIMARY_TARGET:
            case SECONDARY_CLAIM:
            case SECONDARY_TARGET:
            case QUATERNARY_CLAIM:
            case QUATERNARY_TARGET:
            case TERTIARY_CLAIM:
            case TERTIARY_TARGET:
            case PERFORMANCE_TASK:
            case WRITING_PURPOSE:
            case TTS_VISUAL_REQUIRED:
            case TEST_CATEGORY:
            case SCORING_ENGINE:
            case ALLOW_CALCULATOR:
                return convertMatchFilter(filter);
            case ITEM_ID:
            case STIMULUS_ID:
                return convertIdMatchFilter(filter);
            case ORG_NAME:
            case ITEM_AUTHOR:
            case CREATED_BY:
            case CONTENT_TASK_MODEL:
            case PRIMARY_COMMON_CORE_STANDARD:
            case SECONDARY_COMMON_CORE_STANDARD:
            case TERTIARY_COMMON_CORE_STANDARD:
            case QUATERNARY_COMMON_CORE_STANDARD:
            case PRIMARY_CONTENT_DOMAIN:
            case SECONDARY_CONTENT_DOMAIN:
            case TERTIARY_CONTENT_DOMAIN:
            case QUATERNARY_CONTENT_DOMAIN:
                return convertContainsFilter(filter);
            case BEING_CREATED:
            case TTS_SIGHT_PROVIDED:
            case TTS_VISUAL_PROVIDED:
            case ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE:
            case BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE:
            case CLOSED_CAPTIONING__UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE:
                return convertBooleanFlagFilter(filter);
            case DAYS_IN_WORKFLOW_STATUS:
                return convertDaysBetweenFilter(filter);
            case CREATE_DATE:
            case WORKFLOW_STATUS_UPDATE_DATE:
            case ENGLISH_CONTENT_LAST_UPDATED_DATE:
            case SPANISH_CONTENT_LAST_UPDATED_DATE:
            case UPDATED_DATE:
                return convertDateRangeFilter(filter);
            case CALCULATED_EXPOSURES_COUNT:
            case CALCULATED_FORM_COUNT:
            case ITEM_DIFFICULTY_QUINTILE:
                return convertIntegerRangeFilter(filter);
            case FORM_TYPE:
            case ASSESSMENT_TYPE:
                return convertFormMatchFilter(filter);
            default:
                throw new IllegalArgumentException("Filter property is unrecognized " + filter.getProperty());
        }
    }

    private SearchFilter convertMatchFilter(Filter filter) {
        if (!(filter instanceof MatchFilter)) {
            throw new IllegalStateException("Filter property should be of match type filter.  Please check configuration");
        }

        return new MatchSearchFilter(filter.getProperty(), ((MatchFilter) filter).getValues(), filter.isIncludeBlanks());
    }

    private SearchFilter convertIdMatchFilter(Filter filter) {
        if (!(filter instanceof MatchFilter)) {
            throw new IllegalStateException("Filter property should be of match type filter.  Please check configuration");
        }

        return new IdMatchSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), ((MatchFilter) filter).getValues(), filter.isIncludeBlanks());
    }

    private SearchFilter convertContainsFilter(Filter filter) {
        if (!(filter instanceof ContainsFilter)) {
            throw new IllegalStateException("Filter property should be of contains type filter.  Please check configuration");
        }

        return new ContainsSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), ((ContainsFilter) filter).getValues(), filter.isIncludeBlanks());
    }

    private SearchFilter convertDateRangeFilter(Filter filter) {
        if (!(filter instanceof DateRangeFilter)) {
            throw new IllegalStateException("Filter property should be of dateRange type filter.  Please check configuration");
        }

        DateRangeFilter dateRangeFilter = (DateRangeFilter) filter;
        Instant to = dateRangeFilter.getTo().orElse(null);
        Instant from = dateRangeFilter.getFrom().orElse(null);
        return new DateRangeSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), to, from, filter.isIncludeBlanks());
    }

    private SearchFilter convertIntegerRangeFilter(Filter filter) {
        if (!(filter instanceof IntegerRangeFilter)) {
            throw new IllegalStateException("Filter property should be of integerRange type filter.  Please check configuration");
        }

        IntegerRangeFilter integerRangeFilter = (IntegerRangeFilter) filter;
        Integer min = integerRangeFilter.getMin().orElse(null);
        Integer max = integerRangeFilter.getMax().orElse(null);

        return new IntegerRangeSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), min, max, filter.isIncludeBlanks());
    }

    private SearchFilter convertBooleanFlagFilter(Filter filter) {
        if (!(filter instanceof BooleanFlagFilter)) {
            throw new IllegalStateException("Filter property should be of booleanFlag type filter.  Please check configuration");
        }

        return new BooleanFlagSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), ((BooleanFlagFilter) filter).isValue(), filter.isIncludeBlanks());
    }

    private SearchFilter convertDaysBetweenFilter(Filter filter) {
        if (!(filter instanceof IntegerRangeFilter)) {
            throw new IllegalStateException("Filter property should be of integerRange type filter.  Please check configuration");
        }

        IntegerRangeFilter integerRangeFilter = (IntegerRangeFilter) filter;
        Integer min = integerRangeFilter.getMin().orElse(null);
        Integer max = integerRangeFilter.getMax().orElse(null);

        return new DaysBetweenSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), min, max);
    }

    private SearchFilter convertFormMatchFilter(Filter filter) {
        if (!(filter instanceof MatchFilter)) {
            throw new IllegalStateException("Filter property should be of match type filter.  Please check configuration");
        }

        return new FormMatchSearchFilter(ImrtSearchIndexProperties.getImrtSearchProperty(filter.getProperty()).get(), ((MatchFilter) filter).getValues(), filter.isIncludeBlanks());
    }
}