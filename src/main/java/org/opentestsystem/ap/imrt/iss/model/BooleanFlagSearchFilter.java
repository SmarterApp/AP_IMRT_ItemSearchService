package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isNull;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isValue;

/**
 * Handles boolean value filtering
 */
public class BooleanFlagSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final Boolean flag;

    public BooleanFlagSearchFilter(final String filterProperty, final Boolean flag) {
        this(filterProperty, flag, false);
    }

    public BooleanFlagSearchFilter(final String filterProperty, final Boolean flag, final boolean includeBlanks) {
        super(filterProperty, includeBlanks);
        this.flag = flag;
    }

    @Override
    public boolean isEmpty() {
        return flag == null && !isIncludeBlanks();
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        Specification<BaseItem> specification = null;
        if (flag != null) {
            specification = isValue(getFilterProperty(), flag);
        }

        if (isIncludeBlanks() && specification != null) {
            return Specifications.where(specification).or(isNull(getFilterProperty()));
        } else if (isIncludeBlanks()) {
            return isNull(getFilterProperty());
        }

        return specification;
    }

    @VisibleForTesting
    Boolean getFlag() {
        return flag;
    }
}
