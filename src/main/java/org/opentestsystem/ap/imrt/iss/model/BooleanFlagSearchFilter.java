package org.opentestsystem.ap.imrt.iss.model;

import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Handles boolean value filtering
 */
public class BooleanFlagSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final Boolean flag;

    public BooleanFlagSearchFilter(final SearchProperty filterProperty, final Boolean flag) {
        this(filterProperty, flag, false);
    }

    public BooleanFlagSearchFilter(final SearchProperty filterProperty,
                                   final Boolean flag,
                                   final boolean includeBlanks) {
        super(filterProperty, includeBlanks);
        this.flag = flag;
    }

    public Boolean getFlag() {
        return flag;
    }

    @Override
    public Optional<FilterQuery> getFilterQuery(final SearchPermissions searchPermissions) {
        if (flag == null && !isIncludeBlanks()) {
            return Optional.empty();
        }

        String nullQuery = getFilterProperty().getColumnName() + " IS NULL ";
        String propertyQuery = getFilterProperty().getColumnName() + " = :" + getFilterProperty().getProperty();

        Map<String, Object> parameterMap = new HashMap<>();
        parameterMap.put(getFilterProperty().getProperty(), flag);

        FilterQuery filterQuery;
        if (isIncludeBlanks() && flag == null) {
            filterQuery = new FilterQuery(nullQuery, new HashMap<>());
        } else if (isIncludeBlanks() && flag != null) {
            String combinedQuery = "(" + nullQuery + " OR " + propertyQuery + ")";
            filterQuery = new FilterQuery(combinedQuery, parameterMap);
        } else {
            filterQuery = new FilterQuery(propertyQuery, parameterMap);
        }

        return Optional.of(filterQuery);
    }

    @Override
    public boolean isEmpty() {
        return flag == null && !isIncludeBlanks();
    }
}
