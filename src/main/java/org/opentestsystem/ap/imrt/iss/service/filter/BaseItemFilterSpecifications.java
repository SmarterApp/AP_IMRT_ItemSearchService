package org.opentestsystem.ap.imrt.iss.service.filter;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import java.time.Instant;
import java.util.Collection;

public interface BaseItemFilterSpecifications {
    /**
     * A {@link org.springframework.data.jpa.domain.Specification} for specifying a group of values as criteria.
     * <p>
     * This will emit an IN criteria to the SQL generated by JPA.
     * </p>
     *
     * @param field  The database field that is the subject of this criteria
     * @param values The collection of values to include in the IN clause
     * @return A {@link org.springframework.data.jpa.domain.Specification<org.opentestsystem.ap.imrt.common.model.BaseItem>}
     * * with the appropriate criteria based on the filter's input.
     */
    static Specification<BaseItem> isIn(final String field, final Collection<String> values) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get(field);
            return exp.in(values);
        };
    }

    /**
     * A {@link org.springframework.data.jpa.domain.Specification} for an inclusive between for a range of
     * integer/number values.
     * <p>
     * This will emit BETWEEN criteria to the SQL generated by JPA.  For example, if the request is "show me all
     * the records between 1 and 10", both 1 and 10 will be included in the result set.
     * </p>
     *
     * @param field    The database field that is the subject of this criteria
     * @param minValue The minimum value of the BETWEEN statement
     * @param maxValue The maximum value of the BETWEEN statement
     * @return A {@link org.springframework.data.jpa.domain.Specification<org.opentestsystem.ap.imrt.common.model.BaseItem>}
     * with the appropriate criteria based on the filter's input.
     */
    static Specification<BaseItem> isBetween(final String field, final int minValue, final int maxValue) {
        return (root, query, cb) -> cb.between(root.get(field), minValue, maxValue);
    }

    /**
     * A {@link org.springframework.data.jpa.domain.Specification} for "half open" implementation for fetching records
     * between two {@link java.time.Instant}s.
     * <p>
     * This will emit "date_field >= [my minimum date] AND date_field < [may maximum date]" to the SQL generated by JPA.
     * </p>
     *
     * @param field   field The database field that is the subject of this criteria
     * @param minDate The minimum value as the operand for the greater-than-or-equal-to half of the comparison
     * @param maxDate The maximum value as the operand for the less-than half of the comparison
     * @return A {@link org.springframework.data.jpa.domain.Specification<org.opentestsystem.ap.imrt.common.model.BaseItem>}
     * * with the appropriate criteria based on the filter's input.
     */
    static Specification<BaseItem> isBetweenHalfOpen(final String field,
                                                             final Instant minDate,
                                                             final Instant maxDate) {
        return (root, query, cb) -> {
            final Predicate greaterThanOrEqualToPredicate = cb.greaterThanOrEqualTo(root.get(field), minDate);
            final Predicate lessThanPredicate = cb.lessThan(root.get(field), maxDate);
            return cb.and(greaterThanOrEqualToPredicate, lessThanPredicate);
        };
    }

    /**
     * A "less than" {@link org.springframework.data.jpa.domain.Specification} for fetching all records less than a
     * {@link java.time.Instant}.
     *
     * @param field   field The database field that is the subject of this criteria
     * @param minDate The minimum value as the operand for the greater-than-or-equal-to comparison
     * @return A {@link org.springframework.data.jpa.domain.Specification<org.opentestsystem.ap.imrt.common.model.BaseItem>}
     * with the appropriate criteria based on the filter's input.
     */
    static Specification<BaseItem> isLessThan(final String field, final Instant minDate) {
        return (root, query, cb) -> cb.lessThan(root.get(field), minDate);
    }

    /**
     * Handles boolean flags
     *
     * @param field       the field which is a boolean
     * @param flagEnabled whether the flag is enabled
     * @return the {@link Specification} for the equality check
     */
    static Specification<BaseItem> isFlagEnabled(final String field, final boolean flagEnabled) {
        return (root, query, cb) -> cb.equal(root.get(field), flagEnabled);
    }
}
