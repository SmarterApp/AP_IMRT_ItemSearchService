package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.primitives.Ints;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isIn;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isNull;

/**
 * Handles ID searches.  There are fields in IMRT which are integers but clients send in String values.  This will
 * make sure the filterable values are integers along with sanitizing any non integer filter strings.
 */
public class IdMatchSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public IdMatchSearchFilter(final String filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    public IdMatchSearchFilter(final String filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, includeNotSet);
        this.filterValues = filterValues;
    }

    @Override
    public boolean isValid() {
        if (filterValues.contains(StringUtils.EMPTY)) {
            return true;
        }

        return !sanitizeIdValues(filterValues).isEmpty() || isIncludeBlanks();
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        List<String> values = new ArrayList<>(sanitizeIdValues(filterValues));
        Optional<Specification<BaseItem>> maybeSpecification = getNullSpecification(getFilterProperty().getProperty(), getFilterValues(), isIncludeBlanks());
        if (values.isEmpty() && maybeSpecification.isPresent()) {
            return maybeSpecification.get();
        } else if (maybeSpecification.isPresent()) {
            return Specifications.where(isIn(getFilterProperty().getProperty(), sanitizeIdValues(filterValues)))
                    .or(maybeSpecification.get());
        }

        return isIn(getFilterProperty().getProperty(), sanitizeIdValues(filterValues));
    }

    @Override
    public boolean isEmpty() {
        return filterValues.isEmpty() && !isIncludeBlanks();
    }

    private List<String> sanitizeIdValues(final List<String> ids) {
        return ids.stream()
                .filter(s -> Ints.tryParse(s) != null)
                .collect(Collectors.toList());
    }

    @VisibleForTesting
    List<String> getFilterValues() {
        return filterValues;
    }

    private Optional<Specification<BaseItem>> getNullSpecification(final String property, final List<String> filterValues, final boolean includeBlanks) {
        if (includeBlanks || filterValues.contains(StringUtils.EMPTY)) {
            return Optional.of(isNull(property));
        }

        return Optional.empty();
    }

    @Override
    public FilterQuery getFilterQuery() {
        final String columnName = getFilterProperty().getColumnName();
        final List<String> values = new ArrayList<>(sanitizeIdValues(filterValues));
        final Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put(getFilterProperty().getProperty(), values.stream().map(Integer::valueOf).collect(Collectors.toList()));
        final String idSearchFilter = columnName + " IN (:" + getFilterProperty().getProperty() + " ) ";
        final String emptyQuery = columnName + " IS NULL ";

        if (values.isEmpty() && (isIncludeBlanks() || filterValues.contains(StringUtils.EMPTY))) {
            return new FilterQuery(emptyQuery, new HashMap<>());
        } else if (isIncludeBlanks() || filterValues.contains(StringUtils.EMPTY)) {
            final String combinedQuery = emptyQuery + " OR " + idSearchFilter;
            return new FilterQuery(combinedQuery, queryParameters);
        }

        return new FilterQuery(idSearchFilter, queryParameters);
    }
}
