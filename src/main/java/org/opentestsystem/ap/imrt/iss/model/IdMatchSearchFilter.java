package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.primitives.Ints;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Handles ID searches.  There are fields in IMRT which are integers but clients send in String values.  This will
 * make sure the filterable values are integers along with sanitizing any non integer filter strings.
 */
public class IdMatchSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public IdMatchSearchFilter(final SearchProperty filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    public IdMatchSearchFilter(final SearchProperty filterProperty, final List<String> filterValues, boolean includeBlanks) {
        super(filterProperty, includeBlanks);
        this.filterValues = filterValues;
    }

    @Override
    public boolean isValid() {
        if (filterValues.contains(StringUtils.EMPTY)) {
            return true;
        }

        return !sanitizeIdValues(filterValues).isEmpty() || isIncludeBlanks();
    }

    @Override
    public boolean isEmpty() {
        return filterValues.isEmpty() && !isIncludeBlanks();
    }

    private List<String> sanitizeIdValues(final List<String> ids) {
        return ids.stream()
                .filter(s -> Ints.tryParse(s) != null)
                .collect(Collectors.toList());
    }

    @VisibleForTesting
    List<String> getFilterValues() {
        return filterValues;
    }

    @Override
    public FilterQuery getFilterQuery() {
        final String columnName = getFilterProperty().getColumnName();
        final List<String> values = new ArrayList<>(sanitizeIdValues(filterValues));
        final Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put(getFilterProperty().getProperty(), values.stream().map(Integer::valueOf).collect(Collectors.toList()));
        final String idSearchFilter = columnName + " IN (:" + getFilterProperty().getProperty() + " ) ";
        final String emptyQuery = columnName + " IS NULL ";

        if (values.isEmpty() && (isIncludeBlanks() || filterValues.contains(StringUtils.EMPTY))) {
            return new FilterQuery(emptyQuery, new HashMap<>());
        } else if (isIncludeBlanks() || filterValues.contains(StringUtils.EMPTY)) {
            final String combinedQuery = emptyQuery + " OR " + idSearchFilter;
            return new FilterQuery(combinedQuery, queryParameters);
        }

        return new FilterQuery(idSearchFilter, queryParameters);
    }
}
