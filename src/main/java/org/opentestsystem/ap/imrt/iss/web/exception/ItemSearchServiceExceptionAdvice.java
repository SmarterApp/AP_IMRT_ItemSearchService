package org.opentestsystem.ap.imrt.iss.web.exception;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@ControllerAdvice
public class ItemSearchServiceExceptionAdvice {
    private static final Logger logger = LoggerFactory.getLogger(ItemSearchServiceExceptionAdvice.class);
    private final OperationalEventService operationalEventService;

    public ItemSearchServiceExceptionAdvice(final OperationalEventService operationalEventService) {
        this.operationalEventService = operationalEventService;
    }

    @ExceptionHandler(NotFoundException.class)
    @ResponseStatus(value = HttpStatus.NOT_FOUND)
    @ResponseBody
    ResponseEntity<ExceptionMessageResource> handleNotFoundException(final NotFoundException ex) {
        operationalEventService.serviceWarning(logger, ex, "Could not find resource");

        return new ResponseEntity<>(
            new ExceptionMessageResource(HttpStatus.NOT_FOUND.toString(), ex.getLocalizedMessage()), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    @ResponseBody
    ResponseEntity<ExceptionMessageResource> handleException(final Exception ex) {
        operationalEventService.serviceError(logger, ex, "Unhandled Exception handling request");

        return new ResponseEntity<>(
            new ExceptionMessageResource(HttpStatus.INTERNAL_SERVER_ERROR.toString(), ex.getLocalizedMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
