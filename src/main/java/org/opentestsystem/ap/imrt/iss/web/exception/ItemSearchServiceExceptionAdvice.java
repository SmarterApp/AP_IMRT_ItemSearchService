package org.opentestsystem.ap.imrt.iss.web.exception;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@ControllerAdvice
public class ItemSearchServiceExceptionAdvice {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSearchServiceExceptionAdvice.class);
    private final OperationalEventService logger;

    public ItemSearchServiceExceptionAdvice(final OperationalEventService logger) {
        this.logger = logger;
    }

    /**
     * Handles when something cannot be found
     *
     * @param ex {@link NotFoundException} should be thrown when a specific entity cannot be found
     * @return {@link ResponseEntity} with a {@link ExceptionMessageResource} for the 404
     */
    @ExceptionHandler(NotFoundException.class)
    @ResponseStatus(value = HttpStatus.NOT_FOUND)
    @ResponseBody
    ResponseEntity<ExceptionMessageResource> handleNotFoundException(final NotFoundException ex) {
        logger.warn(LOG, ex, "Could not find resource");

        return new ResponseEntity<>(
                new ExceptionMessageResource(HttpStatus.NOT_FOUND.toString(), ex.getLocalizedMessage()), HttpStatus.NOT_FOUND);
    }

    /**
     * Handles when an unexpected error occurs
     *
     * @param ex {@link Exception} unhandled Exception
     * @return {@link ResponseEntity} with a {@link ExceptionMessageResource} for the 500
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    @ResponseBody
    ResponseEntity<ExceptionMessageResource> handleException(final Exception ex) {
        logger.error(LOG, ex, "Unhandled Exception handling request");

        return new ResponseEntity<>(
                new ExceptionMessageResource(HttpStatus.INTERNAL_SERVER_ERROR.toString(), ex.getLocalizedMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handles when a call with a body that cannot be parsed
     *
     * @param ex {@link HttpMessageNotReadableException} usually occurs when system cannot parse data sent to the server
     * @return {@link ResponseEntity} with a {@link ExceptionMessageResource} for the 400
     */
    @ExceptionHandler(HttpMessageNotReadableException.class)
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    @ResponseBody
    ResponseEntity<ExceptionMessageResource> handleMessageNotReadableException(final HttpMessageNotReadableException ex) {
        logger.warn(LOG, ex, "Invalid request.  Please check the data format for data sent");

        return new ResponseEntity<>(
                new ExceptionMessageResource(HttpStatus.BAD_REQUEST.toString(), "Invalid request.  Please check the data format for data sent"), HttpStatus.BAD_REQUEST);
    }

    /**
     * Handle when data can be parsed but is invalid.
     *
     * @param ex {@link IllegalArgumentException}
     * @return {@link ResponseEntity} with a {@link ExceptionMessageResource} for the 400
     */
    @ExceptionHandler(IllegalArgumentException.class)
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    @ResponseBody
    ResponseEntity<ExceptionMessageResource> handleMessageNotReadableException(final IllegalArgumentException ex) {
        logger.warn(LOG, ex, "Invalid data for request");

        return new ResponseEntity<>(
                new ExceptionMessageResource(HttpStatus.BAD_REQUEST.toString(), ex.getLocalizedMessage()), HttpStatus.BAD_REQUEST);
    }
}
