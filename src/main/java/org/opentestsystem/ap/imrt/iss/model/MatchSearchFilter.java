package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.EMPTY;

/**
 * Handles finding items that match a value(s) for an item
 */
public class MatchSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public MatchSearchFilter(final SearchProperty filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, includeNotSet);
        this.filterValues = filterValues;
    }

    public MatchSearchFilter(final SearchProperty filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    @Override
    public Optional<FilterQuery> getFilterQuery() {
        if (filterValues.isEmpty() && !isIncludeBlanks()) {
            return Optional.empty();
        }

        List<String> filterValues = new ArrayList<>(this.filterValues);

        //IMRT stores match values as Strings and are not null
        if (isIncludeBlanks()) {
            filterValues.add(EMPTY);
        }

        final String query = getFilterProperty().getColumnName() + " IN (:" + getFilterProperty().getProperty() + ") ";

        Map<String, Object> parameters = new HashMap<>();
        parameters.put(getFilterProperty().getProperty(), filterValues);

        return Optional.of(new FilterQuery(query, parameters));
    }

    public List<String> getFilterValues() {
        return ImmutableList.copyOf(filterValues);
    }
}
