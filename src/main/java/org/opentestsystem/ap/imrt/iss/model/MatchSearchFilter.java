package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.data.jpa.domain.Specification;

import java.util.ArrayList;
import java.util.List;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isIn;

/**
 * Handles finding items that match a value(s) for an item
 */
public class MatchSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public MatchSearchFilter(final String filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, includeNotSet);
        this.filterValues = filterValues;
    }

    public MatchSearchFilter(final String filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    @Override
    public boolean isEmpty() {
        return filterValues.isEmpty() && !isIncludeNotSet();
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        List<String> filterValues = new ArrayList<>(getFilterValues());

        //IMRT stores match values as Strings and are not null
        if (isIncludeNotSet()) {
            filterValues.add(EMPTY);
        }

        return isIn(getFilterProperty(), filterValues);
    }

    @VisibleForTesting
    List<String> getFilterValues() {
        return filterValues;
    }
}
