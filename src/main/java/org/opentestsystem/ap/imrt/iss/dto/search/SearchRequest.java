package org.opentestsystem.ap.imrt.iss.dto.search;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.opentestsystem.ap.imrt.iss.util.Preconditions;

import java.util.Collections;
import java.util.List;

/**
 * Search Request for general search capabilities
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SearchRequest {
    private final List<Filter> filters;
    private final Sort sort;
    private final PageRequest page;

    @JsonCreator
    public SearchRequest(@JsonProperty("filters") List<Filter> filters,
                         @JsonProperty("sort") Sort sort,
                         @JsonProperty("page") PageRequest page) {
        this.filters = Preconditions.checkNotNull(filters, "filters is required");
        this.sort = Preconditions.checkNotNull(sort, "sort is required");
        this.page = Preconditions.checkNotNull(page, "page is required");
    }

    /**
     * @return available filters which will be combined for searches
     */
    public List<Filter> getFilters() {
        return filters == null ? Collections.emptyList() : filters;
    }

    /**
     * @return the {@link Sort} configuration
     */
    public Sort getSort() {
        return sort;
    }

    /**
     * @return the {@link PageRequest}
     */
    public PageRequest getPage() {
        return page;
    }
}
