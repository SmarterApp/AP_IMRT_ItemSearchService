package org.opentestsystem.ap.imrt.iss.repository;

import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CONTENT_CHANGED_AFTER_OPERATIONAL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CURRENT_UPDATE_NEED_RESOLUTION;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ENGLISH_GLOSSARY_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.HAS_UNRESOLVED_UPDATE_NEED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ILLUSTRATED_GLOSSARY_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ILLUSTRATED_GLOSSARY_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_COMMON_CORE_STANDARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_CONTENT_DOMAIN;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TRANSLATED_GLOSSARY_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.TRANSLATED_GLOSSARY_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_TWO;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_TWO;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_TWO;

@Repository
public class GapReportRepositoryImpl implements GapReportRepository {
    private static final Logger LOG = LoggerFactory.getLogger(GapReportRepositoryImpl.class);
    private static Map<String, Integer> orderByRankMap;

    static {
        orderByRankMap = new HashMap<>();
        orderByRankMap.put(CONTENT_CHANGED_AFTER_OPERATIONAL.getColumnName(), 1);
        orderByRankMap.put(CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION.getColumnName(), 2);
        orderByRankMap.put(CURRENT_UPDATE_NEED_RESOLUTION.getColumnName(), 3);
        orderByRankMap.put(ENGLISH_GLOSSARY_PROVIDED.getColumnName(), 4);
        orderByRankMap.put(ILLUSTRATED_GLOSSARY_PROVIDED.getColumnName(), 5);
        orderByRankMap.put(TRANSLATED_GLOSSARY_PROVIDED.getColumnName(), 6);
        orderByRankMap.put(HAS_UNRESOLVED_UPDATE_NEED.getColumnName(), 7);
        orderByRankMap.put(ILLUSTRATED_GLOSSARY_REQUIRED.getColumnName(), 8);
        orderByRankMap.put(TRANSLATED_GLOSSARY_REQUIRED.getColumnName(), 9);
        orderByRankMap.put(SUBJECT.getColumnName(), 10);
        orderByRankMap.put(PRIMARY_CLAIM.getColumnName(), 11);
        orderByRankMap.put(QUATERNARY_CLAIM.getColumnName(), 12);
        orderByRankMap.put(SECONDARY_CLAIM.getColumnName(), 13);
        orderByRankMap.put(TERTIARY_CLAIM.getColumnName(), 14);
        orderByRankMap.put(INTENDED_GRADE.getColumnName(), 15);
        orderByRankMap.put(QUATERNARY_TARGET.getColumnName(), 16);
        orderByRankMap.put(SECONDARY_TARGET.getColumnName(), 17);
        orderByRankMap.put(QUATERNARY_CONTENT_DOMAIN.getColumnName(), 18);
        orderByRankMap.put(ITEM_TYPE.getColumnName(), 19);
        orderByRankMap.put(QUATERNARY_COMMON_CORE_STANDARD.getColumnName(), 20);
        orderByRankMap.put(TERTIARY_COMMON_CORE_STANDARD.getColumnName(), 21);
        orderByRankMap.put(TERTIARY_TARGET.getColumnName(), 22);
        orderByRankMap.put(TERTIARY_CONTENT_DOMAIN.getColumnName(), 23);
        orderByRankMap.put(SECONDARY_CONTENT_DOMAIN.getColumnName(), 24);
        orderByRankMap.put(SECONDARY_COMMON_CORE_STANDARD.getColumnName(), 25);
        orderByRankMap.put(PRIMARY_TARGET.getColumnName(), 26);
        orderByRankMap.put(PRIMARY_COMMON_CORE_STANDARD.getColumnName(), 27);
        orderByRankMap.put(PRIMARY_CONTENT_DOMAIN.getColumnName(), 28);
    }

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private final SearchFilterQueryBuilder searchFilterQueryBuilder;
    private final String QUINTILE_DIFFICULTY_COUNTS_SQL =
            "null AS " + DESIRED_DIFFICULTY_COUNT.getFieldName() + ", \n" +
                    "'' AS " + DESIRED_DIFFICULTY_ONE.getFieldName() + ", \n" +
                    "'' AS " + DESIRED_DIFFICULTY_TWO.getFieldName() + ", \n" +
                    "'' AS " + DESIRED_DIFFICULTY_THREE.getFieldName() + ", \n" +
                    "'' AS " + DESIRED_DIFFICULTY_FOUR.getFieldName() + ", \n" +
                    "'' AS " +  DESIRED_DIFFICULTY_FIVE.getFieldName() + ", \n" +
                    "count(key) AS " + ACTUAL_DIFFICULTY_COUNT.getFieldName() + ", \n" +
                    "sum(CASE WHEN " + ITEM_DIFFICULTY_QUINTILE.getColumnName() + " = '1' THEN 1 ELSE 0 END) AS " + ACTUAL_DIFFICULTY_ONE.getFieldName() + ", \n" +
                    "sum(CASE WHEN " + ITEM_DIFFICULTY_QUINTILE.getColumnName() + " = '2' THEN 1 ELSE 0 END) AS " + ACTUAL_DIFFICULTY_TWO.getFieldName() + ", \n" +
                    "sum(CASE WHEN " + ITEM_DIFFICULTY_QUINTILE.getColumnName() + " = '3' THEN 1 ELSE 0 END) AS " + ACTUAL_DIFFICULTY_THREE.getFieldName() + ", \n" +
                    "sum(CASE WHEN " + ITEM_DIFFICULTY_QUINTILE.getColumnName() + " = '4' THEN 1 ELSE 0 END) AS " + ACTUAL_DIFFICULTY_FOUR.getFieldName() + ", \n" +
                    "sum(CASE WHEN " + ITEM_DIFFICULTY_QUINTILE.getColumnName() + " = '5' THEN 1 ELSE 0 END) AS " + ACTUAL_DIFFICULTY_FIVE.getFieldName() + ", \n" +
                    "'' AS " + DELTA_DIFFICULTY_COUNT.getFieldName() + ", \n" +
                    "'' AS " + DELTA_DIFFICULTY_ONE.getFieldName() + ", \n" +
                    "'' AS " + DELTA_DIFFICULTY_TWO.getFieldName() + ", \n" +
                    "'' AS " + DELTA_DIFFICULTY_THREE.getFieldName() + ", \n" +
                    "'' AS " + DELTA_DIFFICULTY_FOUR.getFieldName() +  ", \n" +
                    "'' AS " + DELTA_DIFFICULTY_FIVE.getFieldName() + " \n";

    @Autowired
    public GapReportRepositoryImpl(final NamedParameterJdbcTemplate namedParameterJdbcTemplate,
                                   final SearchFilterQueryBuilder searchFilterQueryBuilder) {
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
    }

    @Override
    public List<Map<String, Object>> getGapReport(final Collection<SearchFilter> searchFilters,
                                                  final Collection<SearchProperty> groupFilters) {
        final String joinedGroupFilters = groupFilters.stream()
                .map(gf -> gf.getColumnName() + " AS " + gf.getProperty())
                .collect(Collectors.joining(",\n"));
        final String baseSql = "SELECT \n"
                + joinedGroupFilters + ", \n"
                + QUINTILE_DIFFICULTY_COUNTS_SQL
                + "FROM \n" +
                "item \n";
        final Collection<Sort> orderBy = groupFilters.stream()
                .sorted(Comparator.comparing(filterProp -> orderByRankMap.getOrDefault(filterProp.getColumnName(), 0)))
                .map(filterProp -> new Sort(filterProp.getProperty(), Sort.Direction.ASC))
                .collect(Collectors.toList());
        final SearchQuery query = searchFilterQueryBuilder.buildQuery(new ArrayList<>(searchFilters),
                groupFilters,
                orderBy,
                baseSql);

        return namedParameterJdbcTemplate.queryForList(query.getSearchQuery(), query.getMapSqlParameterSource());
    }
}
