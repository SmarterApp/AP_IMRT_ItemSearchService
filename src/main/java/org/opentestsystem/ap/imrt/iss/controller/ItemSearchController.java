package org.opentestsystem.ap.imrt.iss.controller;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.iss.dto.CountDto;
import org.opentestsystem.ap.imrt.iss.dto.CountResultDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoModelConverter;
import org.opentestsystem.ap.imrt.iss.dto.SearchResults;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.service.ItemSearchService;
import org.springframework.data.domain.Page;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Controller that handles item search
 */
@RestController
@RequestMapping("v1/items")
public class ItemSearchController {
    private final ItemSearchService itemSearchService;
    private final ItemDtoModelConverter itemDtoConverter;
    private final ModelConverter<Filter, SearchFilter> searchFilterMapper;

    public ItemSearchController(final ItemSearchService itemSearchService, final ItemDtoModelConverter itemDtoConverter, final ModelConverter<Filter, SearchFilter> searchFilterMapper) {
        this.itemSearchService = itemSearchService;
        this.itemDtoConverter = itemDtoConverter;
        this.searchFilterMapper = searchFilterMapper;
    }

    /**
     * General Search endpoint
     *
     * @param searchRequest {@link SearchRequest} containing the necessary filters
     * @return {@link SearchResults <ItemDto>} of {@link ItemDto}
     */
    @PostMapping(value = "/search", produces = MediaType.APPLICATION_JSON_VALUE)
    SearchResults<ItemDto> search(@RequestBody SearchRequest searchRequest) {
        List<SearchFilter> filters = searchFilterMapper.convert(searchRequest.getFilters());
        Optional<Page<BaseItem>> maybePage = itemSearchService.searchItems(filters, searchRequest.getSort(), searchRequest.getPage());

        return maybePage.map(page -> new SearchResults<>(
                itemDtoConverter.convert(page.getContent()),
                page.getTotalElements(),
                new PageDto(searchRequest.getPage().getPageSize(), searchRequest.getPage().getPageNumber())
        )).orElseGet(() -> new SearchResults<>(Collections.emptyList(), 0, new PageDto(0, 0)));
    }

    /**
     * Get counts by a specific property
     *
     * @param countRequest the {@link CountRequest}
     * @return the count of items grouped by {@link CountRequest}
     */
    @PostMapping(value = "/count", produces = MediaType.APPLICATION_JSON_VALUE)
    CountResultDto getCountByProperty(@RequestBody CountRequest countRequest) {
        List<SearchFilter> filters = searchFilterMapper.convert(countRequest.getFilters());
        final String groupBy = countRequest.getGroupBy();
        Optional<Map<String, Long>> maybeCounts = itemSearchService.getCounts(filters, countRequest.getGroupBy());

        return maybeCounts.map(stringLongMap -> convert(groupBy, stringLongMap))
                .orElseGet(() -> new CountResultDto(groupBy, 0, Collections.emptyList()));
    }

    private CountResultDto convert(final String groupBy, final Map<String, Long> counts) {
        long totalCounts = 0;
        List<CountDto> countDtoList = new ArrayList<>();
        for (Map.Entry<String, Long> count : counts.entrySet()) {
            totalCounts = totalCounts + count.getValue();
            countDtoList.add(new CountDto(count.getKey(), count.getValue()));
        }

        return new CountResultDto(groupBy, totalCounts, countDtoList);
    }
}
