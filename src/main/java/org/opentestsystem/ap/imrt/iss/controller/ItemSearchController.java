package org.opentestsystem.ap.imrt.iss.controller;

import org.opentestsystem.ap.common.security.SecurityUtil;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.imrt.iss.dto.CountDto;
import org.opentestsystem.ap.imrt.iss.dto.CountResultDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemSearchResult;
import org.opentestsystem.ap.imrt.iss.dto.SearchResults;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.service.ItemSearchService;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Controller that handles item search
 */
@RestController
@RequestMapping("api/v1/items")
public class ItemSearchController {
    private final ItemSearchService itemSearchService;
    private final ModelConverter<Filter, SearchFilter> searchFilterModelConverter;
    private final SecurityUtil securityUtil;

    public ItemSearchController(final ItemSearchService itemSearchService,
                                final ModelConverter<Filter, SearchFilter> searchFilterModelConverter,
                                final SecurityUtil securityUtil) {
        this.itemSearchService = itemSearchService;
        this.searchFilterModelConverter = searchFilterModelConverter;
        this.securityUtil = securityUtil;
    }

    /**
     * General Search endpoint
     *
     * @param searchRequest {@link SearchRequest} containing the necessary filters
     * @return {@link SearchResults <ItemDto>} of {@link ItemDto}
     */
    @PostMapping(value = "/search", produces = MediaType.APPLICATION_JSON_VALUE)
    SearchResults<ItemSearchResult> search(@RequestBody SearchRequest searchRequest) {
        List<SearchFilter> filters = searchFilterModelConverter.convert(searchRequest.getFilters());
        ItemBankUser user = securityUtil.getItemBankUser();
        return itemSearchService.searchItems(filters, searchRequest.getSort(), searchRequest.getPage());
    }

    /**
     * Get counts by a specific property
     *
     * @param countRequest the {@link CountRequest}
     * @return the count of items grouped by {@link CountRequest}
     */
    @PostMapping(value = "/count", produces = MediaType.APPLICATION_JSON_VALUE)
    CountResultDto getCountByProperty(@RequestBody CountRequest countRequest) {
        List<SearchFilter> filters = searchFilterModelConverter.convert(countRequest.getFilters());

        SearchProperty groupBy = SearchProperty.findSearchProperty(countRequest.getGroupBy()).orElseThrow(() -> new IllegalArgumentException("Invalid group by property in request " + countRequest.getGroupBy()));

        if (!groupBy.isSupportsCounts()) {
            throw new IllegalArgumentException("The groupBy property is not supported: " + countRequest.getGroupBy());
        }

        Optional<Map<String, Long>> maybeCounts = itemSearchService.getCounts(filters, groupBy);

        return maybeCounts.map(stringLongMap -> convert(groupBy.getProperty(), stringLongMap))
                .orElseGet(() -> new CountResultDto(groupBy.getProperty(), 0, Collections.emptyList()));
    }

    private CountResultDto convert(final String groupBy, final Map<String, Long> counts) {
        long totalCounts = 0;
        List<CountDto> countDtoList = new ArrayList<>();
        for (Map.Entry<String, Long> count : counts.entrySet()) {
            totalCounts = totalCounts + count.getValue();
            countDtoList.add(new CountDto(count.getKey(), count.getValue()));
        }

        return new CountResultDto(groupBy, totalCounts, countDtoList);
    }
}
