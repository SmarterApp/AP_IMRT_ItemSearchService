package org.opentestsystem.ap.imrt.iss.controller;

import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoMapper;
import org.opentestsystem.ap.imrt.iss.dto.StandardIdDtoMapper;
import org.opentestsystem.ap.imrt.iss.service.ImrtItemService;
import org.opentestsystem.ap.imrt.iss.web.exception.NotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("items")
public class ImrtItemController {
    private final ImrtItemService imrtItemService;
    private final ItemDtoMapper itemDtoMapper;

    public ImrtItemController(final ImrtItemService imrtItemService) {
        this.imrtItemService = imrtItemService;
        this.itemDtoMapper = new ItemDtoMapper(new StandardIdDtoMapper());
    }

    /**
     * Find a single item
     *
     * @param itemId the item's item id
     * @return {@link org.springframework.http.ResponseEntity} containing a {@link org.opentestsystem.ap.imrt.common.model.ImrtItem}
     * @throws org.opentestsystem.ap.imrt.iss.web.exception.NotFoundException if the item cannot be found
     */
    @GetMapping("/{itemId}")
    ItemDto getItemDtoById(@PathVariable final String itemId) throws NotFoundException {
        Optional<ImrtItem> maybeItem = imrtItemService.findImrtItemById(itemId);

        if (!maybeItem.isPresent()) {
            throw new NotFoundException("Could not find imrt item with id: %s", itemId);
        }

        return itemDtoMapper.map(maybeItem.get());
    }

    @GetMapping
    Collection<ItemDto> getItemDtosByIds(@RequestParam List<String> ids) {
        Collection<ImrtItem> items = imrtItemService.findImrtItemsByIds(ids);
        return itemDtoMapper.map(items);
    }
}
