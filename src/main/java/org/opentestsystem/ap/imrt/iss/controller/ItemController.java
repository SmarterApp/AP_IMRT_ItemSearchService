package org.opentestsystem.ap.imrt.iss.controller;

import com.google.common.primitives.Ints;
import org.opentestsystem.ap.common.imrt.exception.NotFoundException;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoModelConverter;
import org.opentestsystem.ap.imrt.iss.service.ItemService;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@RestController
@RequestMapping("api/v1/items")
public class ItemController {
    private final ItemService itemService;
    private final ItemDtoModelConverter itemDtoConverter;

    public ItemController(final ItemService itemService, final ItemDtoModelConverter itemDtoConverter) {
        this.itemService = itemService;
        this.itemDtoConverter = itemDtoConverter;
    }

    /**
     * Find a single item
     *
     * @param itemId the item's item id
     * @return {@link org.springframework.http.ResponseEntity} containing a {@link org.opentestsystem.ap.common.imrt.model.ImrtItem}
     * @throws NotFoundException if the item cannot be found
     */
    @GetMapping(value = "/{itemId}", produces = MediaType.APPLICATION_JSON_VALUE)
    ItemDto getItemDtoById(@PathVariable final String itemId, @RequestParam(required = false) boolean includeDetails) {
        if (Ints.tryParse(itemId) == null) {
            throw new IllegalArgumentException("Item id must be an integer.  Invalid value: " + itemId);
        }

        BaseItem item = itemService.findItemById(Ints.tryParse(itemId)).orElseThrow(() -> new NotFoundException("Could not find imrt item with id: %s", itemId));

        return includeDetails ? itemDtoConverter.mapWithDetail(item) : itemDtoConverter.convert(item);
    }

    @GetMapping
    Collection<ItemDto> getItemDtosByIds(@RequestParam List<String> ids, @RequestParam(required = false) boolean includeDetails) {
        List<Integer> validIds = ids.stream().map(Ints::tryParse).filter(Objects::nonNull).collect(Collectors.toList());

        if (validIds.size() != ids.size()) {
            throw new IllegalArgumentException("Ids must be integers.");
        }

        Collection<BaseItem> items = itemService.findItemsByIds(validIds);
        return includeDetails ? itemDtoConverter.mapWithDetail(items) : itemDtoConverter.convert(items);
    }
}
