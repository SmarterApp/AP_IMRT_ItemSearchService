package org.opentestsystem.ap.imrt.iss.core.mapper;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.common.model.admin.AuthenticatedUserModel;
import org.opentestsystem.ap.common.model.admin.PermissionCode;
import org.opentestsystem.ap.common.model.admin.PermissionModel;
import org.opentestsystem.ap.imrt.iss.model.SearchPermissions;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_GI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MC;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TUT;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_WER;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewEbsrItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewEbsrItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewEqItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewEqItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewGiItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewGiItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewHtqoItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewHtqoItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewHtqsItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewHtqsItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewMcItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewMcItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewMiItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewMiItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewMsItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewMsItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewSaItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewSaItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewStimItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewStimItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewTiItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewTiItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewTutItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewTutItemAssignedToYou;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewWerItem;
import static org.opentestsystem.ap.common.model.admin.PermissionCode.viewWerItemAssignedToYou;

@Component
public class PermissionsMapper {
    private final static Set<String> viewItemTypePermissionCodes = Sets.newHashSet(
        viewEbsrItem,
        viewEqItem,
        viewGiItem,
        viewHtqoItem,
        viewHtqsItem,
        viewMcItem,
        viewMiItem,
        viewMsItem,
        viewSaItem,
        viewStimItem,
        viewTiItem,
        viewTutItem,
        viewWerItem
    );

    private final static Set<String> assignedPermissionCodes = Sets.newHashSet(
        viewEbsrItemAssignedToYou,
        viewEqItemAssignedToYou,
        viewGiItemAssignedToYou,
        viewHtqoItemAssignedToYou,
        viewHtqsItemAssignedToYou,
        viewMcItemAssignedToYou,
        viewMiItemAssignedToYou,
        viewMsItemAssignedToYou,
        viewSaItemAssignedToYou,
        viewStimItemAssignedToYou,
        viewTiItemAssignedToYou,
        viewTutItemAssignedToYou,
        viewWerItemAssignedToYou
    );


    public SearchPermissions transform(AuthenticatedUserModel user) {
        final Set<PermissionModel> permissionsImpactingSearch = user.getPermissions().stream()
            .filter(permissionModel -> assignedPermissionCodes.contains(permissionModel.getCode()) || viewItemTypePermissionCodes
                .contains(permissionModel.getCode())).collect(Collectors.toSet());

        final Optional<PermissionModel> previewAll = user.getPermissions().stream().filter(
            permissionModel -> PermissionCode.previewAllItemVersions.equalsIgnoreCase(permissionModel.getCode())).findAny();

        final Optional<PermissionModel> previewVersion = user.getPermissions().stream().filter(
            permissionModel -> PermissionCode.previewCurrentItemVersion.equalsIgnoreCase(permissionModel.getCode())).findAny();

        SearchPermissions searchPermissions = new SearchPermissions();
        searchPermissions.setPreviewAll(previewAll.orElse(null));
        searchPermissions.setPreviewVersion(previewVersion.orElse(null));
        searchPermissions.setItemTypeToAssigneeWorkflows(convertToTypeToAssigneeMap(permissionsImpactingSearch));
        searchPermissions.setItemTypeToWorkflows(convertToTypeToAssigneeMap(permissionsImpactingSearch));

        return searchPermissions;
    }

    private Map<String, Collection<String>> convertViewPermissions(Set<PermissionModel> permissionsImpactingSearch) {
        Set<PermissionModel> itemTypePermissions = permissionsImpactingSearch.stream().filter(
            permissionModel -> viewItemTypePermissionCodes.contains(permissionModel.getCode())).collect(Collectors.toSet());

        final Map<String, Collection<String>> typeToWorkflows = new HashMap<>();
        itemTypePermissions.forEach(permissionModel -> {
            switch (permissionModel.getCode()) {
                case viewEbsrItem:
                    typeToWorkflows.put(TYPE_EBSR, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewEqItem:
                    typeToWorkflows.put(TYPE_EQ, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewGiItem:
                    typeToWorkflows.put(TYPE_GI, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewHtqoItem:
                    typeToWorkflows.put(TYPE_HTQO, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewHtqsItem:
                    typeToWorkflows.put(TYPE_HTQS, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewMcItem:
                    typeToWorkflows.put(TYPE_MC, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewMiItem:
                    typeToWorkflows.put(TYPE_MI, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewMsItem:
                    typeToWorkflows.put(TYPE_MS, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewSaItem:
                    typeToWorkflows.put(TYPE_SA, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewStimItem:
                    typeToWorkflows.put(TYPE_STIM, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewTutItem:
                    typeToWorkflows.put(TYPE_TUT, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewWerItem:
                    typeToWorkflows.put(TYPE_WER, permissionModel.getWorkflowStatusCodes());
                    break;
            }
        });

        return typeToWorkflows;
    }

    private Map<String, Collection<String>> convertToTypeToAssigneeMap(Set<PermissionModel> permissionsImpactingSearch) {
        Set<PermissionModel> assigneePermissions = permissionsImpactingSearch.stream().filter(
            permissionModel -> assignedPermissionCodes.contains(permissionModel.getCode())).collect(Collectors.toSet());

        final Map<String, Collection<String>> typeToAssigneeWorkflows = new HashMap<>();
        assigneePermissions.forEach(permissionModel -> {
            switch (permissionModel.getCode()) {
                case viewEbsrItem:
                    typeToAssigneeWorkflows.put(TYPE_EBSR, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewEqItem:
                    typeToAssigneeWorkflows.put(TYPE_EQ, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewGiItem:
                    typeToAssigneeWorkflows.put(TYPE_GI, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewHtqoItem:
                    typeToAssigneeWorkflows.put(TYPE_HTQO, permissionModel.getWorkflowStatusCodes());
                    break;
                case "view_htqs_item":
                    typeToAssigneeWorkflows.put(TYPE_HTQS, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewMcItem:
                    typeToAssigneeWorkflows.put(TYPE_MC, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewMiItem:
                    typeToAssigneeWorkflows.put(TYPE_MI, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewMsItem:
                    typeToAssigneeWorkflows.put(TYPE_MS, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewSaItem:
                    typeToAssigneeWorkflows.put(TYPE_SA, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewStimItem:
                    typeToAssigneeWorkflows.put(TYPE_STIM, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewTutItem:
                    typeToAssigneeWorkflows.put(TYPE_TUT, permissionModel.getWorkflowStatusCodes());
                    break;
                case viewWerItem:
                    typeToAssigneeWorkflows.put(TYPE_WER, permissionModel.getWorkflowStatusCodes());
                    break;
            }
        });

        return typeToAssigneeWorkflows;
    }
}
