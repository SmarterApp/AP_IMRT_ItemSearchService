package org.opentestsystem.ap.imrt.iss.model;

import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

public class PermissionsBasedSearchFilter implements SearchFilter {
    @Override
    public boolean containsValidFilterValues() {
        return true;
    }

    @Override
    public SearchProperty getFilterProperty() {
        return SearchProperty.PERMISSIONS;
    }

    @Override
    public Optional<FilterQuery> getFilterQuery(final SearchPermissions searchPermissions) {
        return buildQuery(searchPermissions);
    }

    @Override
    public boolean isEmpty() {
        return false;
    }

    private Optional<FilterQuery> buildQuery(final SearchPermissions searchPermissions) {
        Map<String, Object> parameters = new HashMap<>();
        StringBuilder query = new StringBuilder(" ( ");

        boolean previewQueryAdded = addPreviewPermissionQuery(query, searchPermissions, parameters);

        boolean first = true;
        for (String itemType : ModelConstants.ItemType.TIMS_ITEM_TYPES) {
            boolean isItemTypePermission = searchPermissions.getItemTypeToWorkflows().containsKey(itemType);
            boolean isAssigneePermission = searchPermissions.getItemTypeToAssigneeWorkflows().containsKey(itemType);

            if (!isItemTypePermission && !isAssigneePermission) {
                continue;
            }

            if (!first) {
                query.append(" OR ");
            } else if(previewQueryAdded) {
                query.append(" AND" );
            }

            if (isItemTypePermission && isAssigneePermission) {
                query.append(" ( ");
            }

            if (isItemTypePermission) {
                first = false;
                final String itemTypeParameterName = getFilterProperty().getProperty() + "_" + itemType;
                final String workflowParameterName = getFilterProperty().getProperty() + "_" + itemType + "Workflow";
                query.append(" ( ").append(SearchProperty.ITEM_TYPE.getColumnName())
                    .append(" = :").append(itemTypeParameterName).append(" AND ")
                    .append(SearchProperty.WORKFLOW_STATUS.getColumnName())
                    .append(" IN (:")
                    .append(workflowParameterName)
                    .append(")")
                    .append(" ) ");

                parameters.put(itemTypeParameterName, itemType);
                parameters.put(workflowParameterName,
                    searchPermissions.getItemTypeToWorkflows().get(itemType));
            }

            if (isAssigneePermission) {
                if (isItemTypePermission) {
                    query.append(" OR ");
                }

                final String itemTypeParameterName = getFilterProperty().getProperty() + "_" + itemType;
                final String assigneeParameterName = getFilterProperty().getProperty() + "_" + itemType + "Assignee";
                final String workflowParameterName = getFilterProperty()
                    .getProperty() + "_" + itemType + "AssigneeWorkflow";
                query.append(" ( ")
                    .append(SearchProperty.ITEM_TYPE.getColumnName())
                    .append(" = :").append(itemTypeParameterName).append(" AND ")
                    .append("LOWER(").append(SearchProperty.ASSIGNEES.getColumnName()).append(") LIKE :")
                    .append(assigneeParameterName)
                    .append(" AND ")
                    .append(SearchProperty.WORKFLOW_STATUS.getColumnName())
                    .append(" IN (:")
                    .append(workflowParameterName)
                    .append(")")
                    .append(" ) ");

                parameters.put(assigneeParameterName, "%" + searchPermissions.getUserId().toLowerCase() + "%");
                parameters.put(workflowParameterName, searchPermissions.getItemTypeToAssigneeWorkflows().get(itemType));
            }

            if (isItemTypePermission && isAssigneePermission) {
                query.append(" ) ");
            }
        }

        query.append(" ) ");
        return Optional.of(new FilterQuery(query.toString(), parameters));
    }

    private boolean addPreviewPermissionQuery(final StringBuilder query,
                                              final SearchPermissions searchPermissions,
                                              final Map<String, Object> parameters) {
        final Set<String> previewEnabledWorkflowPermissions = new HashSet<>();

        if (searchPermissions.getPreviewVersion().isPresent()) {
            previewEnabledWorkflowPermissions
                .addAll(searchPermissions.getPreviewVersion().get().getWorkflowStatusCodes());
        }

        if (searchPermissions.getPreviewAll().isPresent()) {
            previewEnabledWorkflowPermissions.addAll(searchPermissions.getPreviewAll().get().getWorkflowStatusCodes());
        }

        if (previewEnabledWorkflowPermissions.isEmpty()) {
            return false;
        }

        final String parameterName = "previewPermissionWorkflow";

        parameters.put(parameterName, previewEnabledWorkflowPermissions);
        query.append(" ( ")
            .append(SearchProperty.WORKFLOW_STATUS.getColumnName())
            .append(" IN (:")
            .append(parameterName)
            .append(")")
            .append(")");

        return true;
    }
}
