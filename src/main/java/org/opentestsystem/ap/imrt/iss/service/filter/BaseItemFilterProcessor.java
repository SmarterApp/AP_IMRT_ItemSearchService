package org.opentestsystem.ap.imrt.iss.service.filter;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Handle processing filter options for {@link BaseItem}
 */
@Component
public class BaseItemFilterProcessor implements FilterProcessor<BaseItem> {
    private static final Logger LOG = LoggerFactory.getLogger(BaseItemFilterProcessor.class);
    private final OperationalEventService logger;

    @Autowired
    public BaseItemFilterProcessor(final OperationalEventService logger) {
        this.logger = logger;
    }

    @Override
    public Optional<Specifications<BaseItem>> processFilters(final List<SearchFilter> filters) {
        List<Specification<BaseItem>> specifications = new ArrayList<>();

        for (SearchFilter filter : filters) {
            if (filter.isEmpty()) {
                continue;
            }

            Optional<Specification<BaseItem>> maybeSpec = processFilter(filter);

            if (maybeSpec.isPresent()) {
                specifications.add(maybeSpec.get());
            } else {
                logger.warn(LOG, null, "Specification was not returned for filter " + filter.getClass().getSimpleName());
            }
        }

        //If there are no filters or if the filters sent are not supported there will not be any specifications to run.
        if (specifications.isEmpty()) {
            return Optional.empty();
        }

        //For the first phase of IMRT we "AND" all filters.
        Specifications<BaseItem> spec = null;
        for (Specification<BaseItem> specification : specifications) {
            if (spec == null) {
                spec = Specifications.where(specification);
                continue;
            }

            spec = spec.and(specification);
        }

        return Optional.of(spec);
    }

    @Override
    public Optional<Specification<BaseItem>> processFilter(SearchFilter filter) {
        return Optional.of(filter.getSpecification());
    }
}