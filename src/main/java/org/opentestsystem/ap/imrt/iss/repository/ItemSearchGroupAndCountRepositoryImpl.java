package org.opentestsystem.ap.imrt.iss.repository;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import javax.persistence.Tuple;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Root;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static java.util.stream.Collectors.toMap;

@Repository
public class ItemSearchGroupAndCountRepositoryImpl implements ItemSearchGroupAndCountRepository {

    private final EntityManager em;

    @Autowired
    public ItemSearchGroupAndCountRepositoryImpl(final EntityManager em) {
        this.em = em;
    }

    @Override
    public Map<String, Long> getGroupCounts(final String property, final Specification<BaseItem> where) {
        return getCountsForBaseItem(property, Optional.of(where));
    }

    @Override
    public Map<String, Long> getGroupCounts(final String property) {
        return getCountsForBaseItem(property, Optional.empty());
    }

    private Map<String, Long> getCountsForBaseItem(final String property, final Optional<Specification<BaseItem>> where) {
        final CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();
        final CriteriaQuery<Tuple> query = criteriaBuilder.createQuery(Tuple.class);

        final Root<BaseItem> root = query.from(BaseItem.class);
        final Path<Long> expression = root.get(property);

        query.multiselect(expression, criteriaBuilder.count(root));
        query.select(criteriaBuilder.tuple(expression, criteriaBuilder.count(root)));

        where.ifPresent(baseItemSpecification -> query.where(baseItemSpecification.toPredicate(root, query, criteriaBuilder)));
        query.groupBy(expression);

        final List<Tuple> resultList = em.createQuery(query).getResultList();

        return resultList.stream()
                .collect(toMap(
                        t -> t.get(0, String.class),
                        t -> t.get(1, Long.class))
                );
    }
}
