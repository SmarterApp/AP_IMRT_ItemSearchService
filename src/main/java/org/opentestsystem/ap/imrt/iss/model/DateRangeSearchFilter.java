package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import java.time.Instant;

import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isBetween;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isGreaterThanOrEqualTo;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isLessThanOrEqualTo;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isNull;

/**
 * Handles date range filtering
 */
public class DateRangeSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final Instant to;
    private final Instant from;

    public DateRangeSearchFilter(final String filterProperty, final Instant to, final Instant from) {
        super(filterProperty);
        this.to = to;
        this.from = from;
    }

    @Override
    public boolean isEmpty() {
        return to == null && from == null || isIncludeBlanks();
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        Specification<BaseItem> dateRangeSpecification = null;

        // If we only have the 'from' date, return a "greater than or equal to" filter
        if (from != null && to == null) {
            dateRangeSpecification = isGreaterThanOrEqualTo(getFilterProperty(), from);
        } else if (to != null && from == null) {
            // If we only have the 'to' date, return a "less than or equal to" filter
            dateRangeSpecification = isLessThanOrEqualTo(getFilterProperty(), to);
        } else if(to !=null) {
            // We have both the 'from' and 'to' dates, so a "between" filter should be returned
            dateRangeSpecification = isBetween(getFilterProperty(), from, to);
        }

        if(isIncludeBlanks()) {
            return dateRangeSpecification != null
                    ? Specifications.where(dateRangeSpecification).or(isNull(getFilterProperty()))
                    : isNull(getFilterProperty());
        }

        return dateRangeSpecification;
    }

    @VisibleForTesting
    Instant getTo() {
        return to;
    }

    @VisibleForTesting
    Instant getFrom() {
        return from;
    }
}