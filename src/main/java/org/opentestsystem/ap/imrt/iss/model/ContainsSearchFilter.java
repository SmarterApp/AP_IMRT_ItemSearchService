package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.apache.commons.lang.StringUtils.isNotBlank;

/**
 * Handles substring filtering.  For example, find all items that have property containing "test".
 */
public class ContainsSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public ContainsSearchFilter(final SearchProperty filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    public ContainsSearchFilter(final SearchProperty filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, includeNotSet);
        this.filterValues = filterValues;
    }

    @Override
    public Optional<FilterQuery> getFilterQuery() {
        if (filterValues.isEmpty() && !isIncludeBlanks()) {
            return Optional.empty();
        }

        Map<String, Object> parameterMap = new HashMap<>();

        //This iteration is happening because we are prepending and appending the '%' character for like queries
        StringBuilder SQL = new StringBuilder();
        for (int i = 0; i < filterValues.size(); i++) {
            String value = filterValues.get(i);

            String parameterName = getFilterProperty().getProperty() + i;
            if (i != 0) {
                SQL.append(" OR ");
            }
            SQL.append("LOWER(").append(getFilterProperty().getColumnName()).append(") LIKE :").append(parameterName);

            parameterMap.put(parameterName, "%" + value.toLowerCase() + "%");
        }

        if (isNotBlank(SQL.toString()) && isIncludeBlanks()) {
            SQL.append(" OR ").append(getFilterProperty().getColumnName()).append(" = ''");
        } else if (isIncludeBlanks()) {
            SQL.append(getFilterProperty().getColumnName()).append(" = ''");
        }

        return Optional.of(new FilterQuery(SQL.toString(), parameterMap));
    }

    public List<String> getFilterValues() {
        return ImmutableList.copyOf(filterValues);
    }

    @Override
    public boolean isEmpty() {
        return getFilterValues().isEmpty();
    }
}
