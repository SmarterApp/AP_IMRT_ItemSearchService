package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;

import java.util.Collections;
import java.util.List;

import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.contains;
import static org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterSpecifications.isIn;

/**
 * Handles substring filtering.  For example, find all items that have property containing "test".
 */
public class ContainsSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final List<String> filterValues;

    public ContainsSearchFilter(final String filterProperty, final List<String> filterValues) {
        this(filterProperty, filterValues, false);
    }

    public ContainsSearchFilter(final String filterProperty, final List<String> filterValues, boolean includeNotSet) {
        super(filterProperty, includeNotSet);
        this.filterValues = filterValues;
    }

    @Override
    public boolean isEmpty() {
        return filterValues.isEmpty() && !isIncludeBlanks();
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @Override
    public Specification<BaseItem> getSpecification() {
        Specification<BaseItem> specification = null;

        if (!getFilterValues().isEmpty()) {
            specification = contains(getFilterProperty().getProperty(), getFilterValues());
        }

        if (!isIncludeBlanks()) {
            return specification;
        }

        if (specification == null) {
            return isIn(getFilterProperty().getProperty(), Collections.singletonList(EMPTY));
        }

        return Specifications.where(specification).or(isIn(getFilterProperty().getProperty(), Collections.singletonList(EMPTY)));
    }

    @VisibleForTesting
    List<String> getFilterValues() {
        return filterValues;
    }

    @Override
    public FilterQuery getFilterQuery() {
        return null;
    }
}
