package org.opentestsystem.ap.imrt.iss.service;

import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReport;
import org.opentestsystem.ap.imrt.iss.repository.GapReportRepository;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
public class GapReportServiceImpl implements GapReportService {
    private final GapReportRepository gapReportRepository;

    public GapReportServiceImpl(final GapReportRepository gapReportRepository) {
        this.gapReportRepository = gapReportRepository;
    }

    @Override
    public Optional<GapReport> getGapReport(final Collection<SearchFilter> searchFilters, final Collection<SearchProperty> groupFilters) {
        if (containsInvalidFilters(searchFilters)) {
            return Optional.empty();
        }

        final List<Map<String, Object>> results = gapReportRepository.getGapReport(searchFilters, groupFilters);

        return Optional.of(new GapReport(searchFilters, groupFilters, results, Instant.now()));
    }

    /**
     * Determine if any of the {@link org.opentestsystem.ap.imrt.iss.model.SearchFilter}s contain invalid values.
     *
     * @param filters The collection of {@link org.opentestsystem.ap.imrt.iss.model.SearchFilter}s to evaluate
     * @return True if any of the {@link org.opentestsystem.ap.imrt.iss.model.SearchFilter}s are invalid; otherwise
     * false
     */
    private boolean containsInvalidFilters(Collection<SearchFilter> filters) {
        return filters.stream().anyMatch(searchFilter -> !searchFilter.containsValidFilterValues());
    }
}
