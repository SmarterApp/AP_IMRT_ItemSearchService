package org.opentestsystem.ap.imrt.iss.model;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.HashMap;
import java.util.Map;

import static org.apache.commons.lang.StringUtils.isNotBlank;

/**
 * Find items whose property falls between two integers
 */
public class IntegerRangeSearchFilter extends AbstractSearchFilter implements SearchFilter {
    private final Integer min;
    private final Integer max;

    public IntegerRangeSearchFilter(final SearchProperty filterProperty, final Integer min, final Integer max) {
        this(filterProperty, min, max, false);
    }

    public IntegerRangeSearchFilter(final SearchProperty filterProperty, final Integer min, final Integer max, boolean includeNotSet) {
        super(filterProperty, includeNotSet);
        this.min = min;
        this.max = max;
    }

    @Override
    public boolean isEmpty() {
        return (min == null && max == null) && !isIncludeBlanks();
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @VisibleForTesting
    Integer getMin() {
        return min;
    }

    @VisibleForTesting
    Integer getMax() {
        return max;
    }

    @Override
    public FilterQuery getFilterQuery() {
        Map<String, Object> parameters = new HashMap<>();
        String sql = "";

        String minParameter = getFilterProperty().getProperty() + "Min";
        String maxParameter = getFilterProperty().getProperty() + "Max";

        if (min != null && max == null) {
            sql = getFilterProperty().getColumnName() + " >= :" + minParameter;
            parameters.put(minParameter, min);
        } else if (min == null && max != null) {
            sql = getFilterProperty().getColumnName() + " <= :" + maxParameter;
            parameters.put(maxParameter, max);
        } else if (min != null) {
            sql = getFilterProperty().getColumnName() + " BETWEEN :" + minParameter + " AND :" + maxParameter;
            parameters.put(minParameter, min);
            parameters.put(maxParameter, max);
        }

        if (isIncludeBlanks() && isNotBlank(sql)) {
            sql = sql + " OR " + getFilterProperty().getColumnName() + " IS NULL ";
        } else if (isIncludeBlanks()) {
            sql = getFilterProperty().getColumnName() + " IS NULL ";
        }

        return new FilterQuery(sql, parameters);
    }
}
