package org.opentestsystem.ap.imrt.iss.specification;

import com.google.common.collect.Sets;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.IntegerRangeFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.Expression;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import static org.apache.commons.collections.CollectionUtils.isEmpty;

public class BaseItemSpecificationMapper {
    private static final Set<String> FILTERABLE_FIELDS = Sets.newHashSet("itemId",
            "grade",
            "subject",
            "stimulusId",
            "depthOfKnowledge",
            "workflowStatus"
    );

    public static List<Specification<BaseItem>> map(SearchRequest searchCriteria) {
        List<Specification<BaseItem>> specifications = new ArrayList<>();

        for (Filter filter : searchCriteria.getFilters()) {
            if(!FILTERABLE_FIELDS.contains(filter.getProperty())) {
                continue;
            }


        }

        if (!isEmpty(searchCriteria.getItemIds())) {
            specifications.add(isIdIn(searchCriteria.getItemIds()));
        }

        if (!isEmpty(searchCriteria.getGrades())) {
            specifications.add(isGradeIn(searchCriteria.getGrades()));
        }

        if (!isEmpty(searchCriteria.getSubjects())) {
            specifications.add(isSubjectIn(searchCriteria.getSubjects()));
        }

        if (!isEmpty(searchCriteria.getDepthOfKnowledge())) {
            specifications.add(isDepthOfKnowledgeIn(searchCriteria.getDepthOfKnowledge()));
        }

        if (!isEmpty(searchCriteria.getWorkflowStatuses())) {
            specifications.add(isWorkflowStatusesIn(searchCriteria.getWorkflowStatuses()));
        }

        return specifications;
    }

    private void a(MatchFilter matchFilter) {

    }

    private void a(IntegerRangeFilter integerRangeFilter) {

    }


    private static Specification<BaseItem> isIdIn(Collection<String> itemIds) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get("id");
            return exp.in(itemIds);
        };
    }

    private static Specification<BaseItem> isGradeIn(Collection<String> grades) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get("grade");
            return exp.in(grades);
        };
    }

    private static Specification<BaseItem> isSubjectIn(Collection<String> subjects) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get("subject");
            return exp.in(subjects);
        };
    }

    private static Specification<BaseItem> isDepthOfKnowledgeIn(Collection<String> depthOfKnowledges) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get("depthOfKnowledge");
            return exp.in(depthOfKnowledges);
        };
    }

    private static Specification<BaseItem> isWorkflowStatusesIn(Collection<String> workflowStatuses) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get("workflowStatus");
            return exp.in(workflowStatuses);
        };
    }

    private static Specification<BaseItem> isItemTypeIn(Collection<String> itemTypes) {
        return (root, query, cb) -> {
            Expression<String> exp = root.get("workflowStatus");
            return exp.in(itemTypes);
        };
    }

    private class FilterProcessor
}
