package org.opentestsystem.ap.imrt.iss.dto;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Maps a {@link ImrtItem} to an {@link ItemDto}
 */
@Component
public class ItemDtoConverter extends DtoConverter<BaseItem, ItemDto> {

    @Override
    public ItemDto convert(final BaseItem domainObject) {
        return mapToBuilder(domainObject).build();
    }

    /**
     * Maps the {@link BaseItem} including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObject the {@link BaseItem} to map
     * @return the mapped {@link ItemDto}
     */
    public ItemDto mapWithDetail(final BaseItem domainObject) {
        return mapToBuilder(domainObject).withItemDetail(domainObject.getItemJson()).build();
    }

    /**
     * Maps a collection of {@link BaseItem}'s including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObjects the collection of {@link BaseItem} to map
     * @return list of mapped {@link ItemDto}
     */
    public List<ItemDto> mapWithDetail(final Collection<BaseItem> domainObjects) {
        checkNotNull(domainObjects);

        return domainObjects.stream()
                .map(this::mapWithDetail)
                .collect(Collectors.toList());
    }

    private ItemDto.Builder mapToBuilder(final BaseItem item) {
        return ItemDto.builder()
                .withDepthOfKnowledge(item.getDepthOfKnowledge())
                .withGrade(item.getGrade())
                .withId(item.getId())
                .withCreateDate(item.getItemCreatedAt())
                .withCreatedBy(item.getItemCreatedBy())
                .withItemType(item.getItemType())
                .withSubject(item.getSubject())
                .withStimulusId(item.getAssociatedStimulusId())
                .withBeingCreated(item.isBeingCreated())
                .withWorkflowStatus(item.getWorkflowStatus())
                .withOrganizationTypeId(item.getOrganizationTypeId())
                .withOrganizationName(item.getOrganizationName())
                .withPrimaryAssessmentTarget(item.getPrimaryTarget())
                .withPrimaryClaim(item.getPrimaryClaim())
                .withPrimaryCommonCoreStandard(item.getPrimaryCommonCoreStandard())
                .withPrimaryContentDomain(item.getPrimaryContentDomain())
                .withSecondaryAssessmentTarget(item.getSecondaryTarget())
                .withSecondaryClaim(item.getSecondaryClaim())
                .withSecondaryCommonCoreStandard(item.getSecondaryCommonCoreStandard())
                .withSecondaryContentDomain(item.getSecondaryContentDomain())
                .withTertiaryAssessmentTarget(item.getTertiaryTarget())
                .withTertiaryClaim(item.getTertiaryClaim())
                .withTertiaryCommonCoreStandard(item.getTertiaryCommonCoreStandard())
                .withTertiaryContentDomain(item.getTertiaryContentDomain())
                .withQuaternaryAssessmentTarget(item.getQuaternaryTarget())
                .withQuaternaryClaim(item.getQuaternaryClaim())
                .withQuaternaryCommonCoreStandard(item.getQuaternaryCommonCoreStandard())
                .withQuaternaryContentDomain(item.getQuaternaryContentDomain())
                .withContentTaskModel(item.getContentTaskModel())
                .withItemAuthor(item.getItemAuthor())
                .withWorkflowStatusUpdatedDate(item.getWorkflowStatusSetAt());
    }
}
