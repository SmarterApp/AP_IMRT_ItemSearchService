package org.opentestsystem.ap.imrt.iss.dto;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Maps a {@link ImrtItem} to an {@link ItemDto}
 */
public class ItemDtoConverter extends DtoConverter<BaseItem, ItemDto> {
    private final StandardIdDtoConverter standardIdDtoMapper;

    public ItemDtoConverter(final StandardIdDtoConverter standardIdDtoMapper) {
        this.standardIdDtoMapper = standardIdDtoMapper;
    }

    @Override
    public ItemDto convert(final BaseItem domainObject) {
        return mapToBuilder(domainObject).build();
    }

    /**
     * Maps the {@link BaseItem} including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObject the {@link BaseItem} to map
     * @return the mapped {@link ItemDto}
     */
    public ItemDto mapWithDetail(final BaseItem domainObject) {
        return mapToBuilder(domainObject).withItem(domainObject.getItemJson()).build();
    }

    /**
     * Maps a collection of {@link BaseItem}'s including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObjects the collection of {@link BaseItem} to map
     * @return list of mapped {@link ItemDto}
     */
    public List<ItemDto> mapWithDetail(final Collection<BaseItem> domainObjects) {
        checkNotNull(domainObjects);

        return domainObjects.stream()
                .map(this::mapWithDetail)
                .collect(Collectors.toList());
    }

    private ItemDto.Builder mapToBuilder(final BaseItem domainObject) {
        ItemDto.Builder builder = ItemDto.builder()
                .withDepthOfKnowledge(domainObject.getDepthOfKnowledge())
                .withGrade(domainObject.getGrade())
                .withId(domainObject.getId())
                .withCreatedAt(domainObject.getItemCreatedAt())
                .withCreatedBy(domainObject.getItemCreatedBy())
                .withItemType(domainObject.getItemType())
                .withSubject(domainObject.getSubject())
                .withStimulusId(domainObject.getAssociatedStimulusId())
                .withBeingCreated(domainObject.isBeingCreated())
                .withWorkflowStatus(domainObject.getWorkflowStatus());

        List<StandardIdDto> standardIdDtos = domainObject.getStandardIds().stream()
                .map(standardIdDtoMapper::convert)
                .collect(Collectors.toList());

        return builder.withStandardIds(standardIdDtos);
    }
}
