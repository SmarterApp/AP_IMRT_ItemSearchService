package org.opentestsystem.ap.imrt.iss.dto;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Maps a {@link ImrtItem} to an {@link ItemDto}
 */
@Component
public class ItemDtoConverter extends DtoConverter<BaseItem, ItemDto> {

    @Override
    public ItemDto convert(final BaseItem domainObject) {
        return mapToBuilder(domainObject).build();
    }

    /**
     * Maps the {@link BaseItem} including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObject the {@link BaseItem} to map
     * @return the mapped {@link ItemDto}
     */
    public ItemDto mapWithDetail(final BaseItem domainObject) {
        return mapToBuilder(domainObject).withItemDetail(domainObject.getItemJson()).build();
    }

    /**
     * Maps a collection of {@link BaseItem}'s including the {@link org.opentestsystem.ap.common.model.Item}
     *
     * @param domainObjects the collection of {@link BaseItem} to map
     * @return list of mapped {@link ItemDto}
     */
    public List<ItemDto> mapWithDetail(final Collection<BaseItem> domainObjects) {
        checkNotNull(domainObjects);

        return domainObjects.stream()
                .map(this::mapWithDetail)
                .collect(Collectors.toList());
    }

    private ItemDto.Builder mapToBuilder(final BaseItem domainObject) {
        return ItemDto.builder()
                .withDepthOfKnowledge(domainObject.getDepthOfKnowledge())
                .withGrade(domainObject.getGrade())
                .withId(domainObject.getId())
                .withCreateDate(domainObject.getItemCreatedAt())
                .withCreatedBy(domainObject.getItemCreatedBy())
                .withItemType(domainObject.getItemType())
                .withSubject(domainObject.getSubject())
                .withStimulusId(domainObject.getAssociatedStimulusId())
                .withBeingCreated(domainObject.isBeingCreated())
                .withWorkflowStatus(domainObject.getWorkflowStatus())
                .withOrganizationTypeId(domainObject.getOrganizationTypeId())
                .withOrganizationName(domainObject.getOrganizationName())
                .withPrimaryAssessmentTarget(domainObject.getPrimaryTarget())
                .withPrimaryClaim(domainObject.getPrimaryClaim())
                .withPrimaryCommonCoreStandard(domainObject.getPrimaryCommonCoreStandard())
                .withPrimaryContentDomain(domainObject.getPrimaryContentDomain())
                .withSecondaryAssessmentTarget(domainObject.getSecondaryTarget())
                .withSecondaryClaim(domainObject.getSecondaryClaim())
                .withSecondaryCommonCoreStandard(domainObject.getSecondaryCommonCoreStandard())
                .withSecondaryContentDomain(domainObject.getSecondaryContentDomain())
                .withTertiaryAssessmentTarget(domainObject.getTertiaryTarget())
                .withTertiaryClaim(domainObject.getTertiaryClaim())
                .withTertiaryCommonCoreStandard(domainObject.getTertiaryCommonCoreStandard())
                .withTertiaryContentDomain(domainObject.getTertiaryContentDomain())
                .withQuaternaryAssessmentTarget(domainObject.getQuaternaryTarget())
                .withQuaternaryClaim(domainObject.getQuaternaryClaim())
                .withQuaternaryCommonCoreStandard(domainObject.getQuaternaryCommonCoreStandard())
                .withQuaternaryContentDomain(domainObject.getQuaternaryContentDomain())
                .withContentTaskModel(domainObject.getContentTaskModel())
                .withWorkflowStatusUpdatedDate(domainObject.getWorkflowStatusSetAt());
    }
}
