package org.opentestsystem.ap.imrt.iss.controller;

import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.GapReportRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReport;
import org.opentestsystem.ap.imrt.iss.service.GapReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("v1/items/reports")
public class ReportController {
    private final GapReportService gapReportService;
    private final ModelConverter<Filter, SearchFilter> searchFilterModelConverter;

    @Autowired
    public ReportController(final GapReportService gapReportService,
                            final ModelConverter<Filter, SearchFilter> searchFilterModelConverter) {
        this.gapReportService = gapReportService;
        this.searchFilterModelConverter = searchFilterModelConverter;
    }

    @PostMapping(value = "gap", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<GapReport> getGapReport(@RequestBody final GapReportRequest gapReportRequest) {
        final List<SearchFilter> filters = searchFilterModelConverter.convert(gapReportRequest.getFilters());
        final List<SearchProperty> groups = gapReportRequest.getGroups().stream()
                .map(groupByString -> SearchProperty.findSearchProperty(groupByString)
                        .orElseThrow(() -> new IllegalArgumentException("Invalid group property in request " + groupByString)))
                .collect(Collectors.toList());

        final Optional<GapReport> gapReport = gapReportService.getGapReport(filters, groups);

        return ResponseEntity.ok(gapReport.get());
    }
}
