package org.opentestsystem.ap.imrt.iss.controller;


import org.opentestsystem.ap.common.imrt.exception.NotFoundException;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.GapReportRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.service.GapReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("api/v1/items/reports")
public class ReportController {
    private final GapReportService gapReportService;
    private final ModelConverter<Filter, SearchFilter> searchFilterModelConverter;

    @Autowired
    public ReportController(final GapReportService gapReportService,
                            final ModelConverter<Filter, SearchFilter> searchFilterModelConverter) {
        this.gapReportService = gapReportService;
        this.searchFilterModelConverter = searchFilterModelConverter;
    }

    @PostMapping(value = "gap")
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public FileSystemResource getGapReport(@RequestBody final GapReportRequest gapReportRequest,
                                           final HttpServletResponse response) {
        final List<SearchFilter> filters = searchFilterModelConverter.convert(gapReportRequest.getFilters());
        final List<SearchProperty> groups = gapReportRequest.getGroups().stream()
                .map(group -> SearchProperty.findSearchProperty(group)
                        .orElseThrow(() -> new IllegalArgumentException("Invalid group property in request " + group)))
                .collect(Collectors.toList());

        final File workbook = gapReportService.getGapReport(filters, groups)
                .orElseThrow(() -> new NotFoundException("could not get Gap Report file"));

        response.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        response.setHeader("Content-Disposition", "attachment; filename=" + workbook.getName());
        response.setHeader("Content-Length", String.valueOf(workbook.length()));

        return new FileSystemResource(workbook);
    }
}
