package org.opentestsystem.ap.imrt.iss.controller;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.GapReportRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.service.GapReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("v1/items/reports")
public class ReportController {
    private final GapReportService gapReportService;
    private final ModelConverter<Filter, SearchFilter> searchFilterModelConverter;

    @Autowired
    public ReportController(final GapReportService gapReportService,
                            final ModelConverter<Filter, SearchFilter> searchFilterModelConverter) {
        this.gapReportService = gapReportService;
        this.searchFilterModelConverter = searchFilterModelConverter;
    }

    @PostMapping(value = "gap")
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public void getGapReport(@RequestBody final GapReportRequest gapReportRequest,
                             final HttpServletResponse response) {
        final List<SearchFilter> filters = searchFilterModelConverter.convert(gapReportRequest.getFilters());
        final List<SearchProperty> groups = gapReportRequest.getGroups().stream()
                .map(groupByString -> SearchProperty.findSearchProperty(groupByString)
                        .orElseThrow(() -> new IllegalArgumentException("Invalid group property in request " + groupByString)))
                .collect(Collectors.toList());

        final XSSFWorkbook workbook = gapReportService.getGapReport(filters, groups)
                .orElseThrow(() -> new ResourceNotFoundException("could not get Excel file"));

        try {
            final DateFormat df = new SimpleDateFormat("yyyyMMddhhmmss");
            response.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setHeader("Content-disposition", "attachment; filename=gap-report-" + df.format(new Date()) + ".xlsx");

            workbook.write(response.getOutputStream());
        } catch (final IOException e) {
            throw new RuntimeException("Error occurred while returning Gap Report Excel file: " + e.getMessage());
        }
    }
}
