package org.opentestsystem.ap.imrt.iss.service;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.iss.config.ItemSearchServiceProperties;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.repository.BaseItemSearchRepository;
import org.opentestsystem.ap.imrt.iss.service.filter.FilterProcessor;
import org.opentestsystem.ap.imrt.iss.service.filter.FilterProperty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;

import java.util.Optional;

import static org.opentestsystem.ap.imrt.iss.dto.search.Sort.Direction.ASC;

@Service
public class ItemSearchServiceImpl implements ItemSearchService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSearchServiceImpl.class);

    private final BaseItemSearchRepository baseItemSearchRepository;
    private final FilterProcessor<BaseItem> filterProcessor;
    private final ItemSearchServiceProperties itemSearchServiceProperties;

    public ItemSearchServiceImpl(final BaseItemSearchRepository baseItemSearchRepository,
                                 final FilterProcessor<BaseItem> filterProcessor,
                                 final ItemSearchServiceProperties itemSearchServiceProperties) {
        this.baseItemSearchRepository = baseItemSearchRepository;
        this.filterProcessor = filterProcessor;
        this.itemSearchServiceProperties = itemSearchServiceProperties;
    }

    @Override
    public Page<BaseItem> searchItems(final SearchRequest searchRequest) {
        Optional<Specifications<BaseItem>> maybeSpecifications = filterProcessor.processFilters(searchRequest);

        //If there are no filters or if the filters sent are not supported there will not be any specifications to run.
        if (maybeSpecifications.isPresent()) {
            return baseItemSearchRepository.findAll(maybeSpecifications.get(), mapPageAndSort(searchRequest));
        }

        //Finds all items sorted in the order as requested by caller
        return baseItemSearchRepository.findAll(mapPageAndSort(searchRequest));
    }

    /**
     * Maps page and sort handling null values
     *
     * @param searchRequest {@link SearchRequest} sent by client
     * @return the {@link PageRequest} object used by JPA for paging
     */
    private PageRequest mapPageAndSort(SearchRequest searchRequest) {
        final Optional<Sort> maybeSort = mapSort(searchRequest.getSort());

        if(searchRequest.getPage().isPresent() && searchRequest.getPage().get().getNumber() <= 0) {
            throw new IllegalArgumentException("Page number must be greater than zero");
        }

        return searchRequest.getPage()
                .map(pageRequest -> new PageRequest((pageRequest.getNumber() > 0 ? pageRequest.getNumber() - 1 : 0),
                        pageRequest.getSize(),
                        maybeSort.orElse(null)))
                .orElse(new PageRequest(0, itemSearchServiceProperties.getMaxSearchResults(), maybeSort.orElse(null)));
    }

    private Optional<Sort> mapSort(Optional<org.opentestsystem.ap.imrt.iss.dto.search.Sort> maybeSort) {
        if (!maybeSort.isPresent()) {
            return Optional.empty();
        }

        Optional<String> maybeImrtItemProperty = FilterProperty.getImrtSearchProperty(maybeSort.get().getProperty());
        if (!maybeImrtItemProperty.isPresent()) {
            return Optional.empty();
        }

        if(maybeSort.get().getDirection() == null) {
            throw new IllegalArgumentException("Sort requires a 'direction' value of ASC or DESC");
        }

        Sort.Direction direction = ASC == maybeSort.get().getDirection() ? Sort.Direction.ASC : Sort.Direction.DESC;
        return Optional.of(new Sort(direction, maybeImrtItemProperty.get()));
    }
}
