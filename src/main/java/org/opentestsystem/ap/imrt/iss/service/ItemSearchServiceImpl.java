package org.opentestsystem.ap.imrt.iss.service;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.repository.BaseItemSearchRepository;
import org.opentestsystem.ap.imrt.iss.repository.ItemSearchGroupAndCountRepository;
import org.opentestsystem.ap.imrt.iss.service.filter.FilterProcessor;
import org.opentestsystem.ap.imrt.iss.service.filter.FilterProperty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Sort.Direction.ASC;
import static org.opentestsystem.ap.imrt.iss.service.filter.FilterProperty.getImrtSearchProperty;

@Service
public class ItemSearchServiceImpl implements ItemSearchService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSearchServiceImpl.class);
    private final OperationalEventService logger;
    private static final Map<String, String> COUNTS_TO_FIELDS;

    static {
        Map<String, String> countsToFields = new HashMap<>();
        countsToFields.put(ITEM_ID, "id");
        countsToFields.put(GRADE, "grade");
        countsToFields.put(WORKFLOW_STATUS, "workflowStatus");
        countsToFields.put(ITEM_TYPE, "itemType");
        countsToFields.put(SUBJECT, "subject");
        countsToFields.put(ORG_TYPE_ID, "organizationTypeId");
        countsToFields.put(ORG_NAME, "organizationName");
        countsToFields.put(PRIMARY_CLAIM, "primaryClaim");
        countsToFields.put(PRIMARY_TARGET, "primaryTarget");
        countsToFields.put(ITEM_AUTHOR, "itemAuthor");

        COUNTS_TO_FIELDS = Collections.unmodifiableMap(countsToFields);
    }


    private final BaseItemSearchRepository baseItemSearchRepository;
    private final FilterProcessor<BaseItem> filterProcessor;
    private final ItemSearchGroupAndCountRepository itemSearchGroupAndCountRepository;

    public ItemSearchServiceImpl(final BaseItemSearchRepository baseItemSearchRepository,
                                 final FilterProcessor<BaseItem> filterProcessor,
                                 final ItemSearchGroupAndCountRepository itemSearchGroupAndCountRepository,
                                 final OperationalEventService logger) {
        this.baseItemSearchRepository = baseItemSearchRepository;
        this.filterProcessor = filterProcessor;
        this.itemSearchGroupAndCountRepository = itemSearchGroupAndCountRepository;
        this.logger = logger;
    }

    @Override
    public Optional<Page<BaseItem>> searchItems(final SearchRequest searchRequest) {
        validateFilters(searchRequest.getFilters());

        Optional<Specifications<BaseItem>> maybeSpecifications = filterProcessor.processFilters(searchRequest.getFilters());

        //If there are no filters or if the filters sent are not supported there will not be any specifications to run.
        return maybeSpecifications.map(baseItemSpecifications -> Optional.of(baseItemSearchRepository.findAll(baseItemSpecifications, mapPageAndSort(searchRequest))))
                .orElseGet(() -> Optional.of(baseItemSearchRepository.findAll(mapPageAndSort(searchRequest))));
    }

    @Override
    public Optional<Map<String, Long>> getCounts(final CountRequest countRequest) {
        validateFilters(countRequest.getFilters());

        if (!COUNTS_TO_FIELDS.containsKey(countRequest.getGroupBy())) {
            logger.serviceWarning(LOG, null, "Unsupported group by property {}.  Please check API documentation", countRequest.getGroupBy());
            throw new IllegalArgumentException(String.format("Unsupported group by property %s", countRequest.getGroupBy()));
        }

        Optional<Specifications<BaseItem>> maybeSpecifications = filterProcessor.processFilters(countRequest.getFilters());

        final String groupBy = COUNTS_TO_FIELDS.get(countRequest.getGroupBy());

        return maybeSpecifications.map(baseItemSpecifications -> Optional.of(itemSearchGroupAndCountRepository.getGroupCounts(groupBy, baseItemSpecifications)))
                .orElseGet(() -> Optional.of(itemSearchGroupAndCountRepository.getGroupCounts(groupBy)));
    }

    /**
     * Maps page and sort handling null values
     *
     * @param searchRequest {@link SearchRequest} sent by client
     * @return the {@link PageRequest} object used by JPA for paging
     */
    private PageRequest mapPageAndSort(SearchRequest searchRequest) {
        final Optional<Sort> maybeSort = mapSort(searchRequest.getSort());

        if (searchRequest.getPage().getPageNumber() < 0) {
            throw new IllegalArgumentException("Page number must be greater than or equal zero");
        }

        if (searchRequest.getPage().getPageSize() > 1000) {
            throw new IllegalArgumentException("Number of results for a single page cannot be greater than 1000");
        }

        return new PageRequest(searchRequest.getPage().getPageNumber(),
                searchRequest.getPage().getPageSize(),
                maybeSort.orElse(null));
    }

    private Optional<Sort> mapSort(org.opentestsystem.ap.imrt.iss.dto.search.Sort sort) {
        Optional<String> maybeImrtItemProperty = getImrtSearchProperty(sort.getProperty());
        if (!maybeImrtItemProperty.isPresent()) {
            return Optional.empty();
        }

        Sort.Direction direction = ASC == sort.getDirection() ? Sort.Direction.ASC : Sort.Direction.DESC;
        return Optional.of(new Sort(direction, maybeImrtItemProperty.get()));
    }

    private void validateFilters(List<Filter> filters) {
        for (Filter filter : filters) {
            if (!FilterProperty.isSupportedFilterForProperty(filter)) {
                throw new IllegalArgumentException(String.format("Invalid filter in search request: type = %s, property = %s", filter.getType(), filter.getProperty()));
            }
        }
    }
}
