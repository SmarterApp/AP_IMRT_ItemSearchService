package org.opentestsystem.ap.imrt.iss.service;

import com.google.common.collect.Lists;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.repository.BaseItemSearchRepository;
import org.opentestsystem.ap.imrt.iss.service.filter.BaseItemFilterProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class ItemSearchServiceImpl implements ItemSearchService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSearchServiceImpl.class);

    private final BaseItemSearchRepository baseItemSearchRepository;
    private final BaseItemFilterProcessor baseItemFilterProcessor;
    private final OperationalEventService logger;

    public ItemSearchServiceImpl(final BaseItemSearchRepository baseItemSearchRepository, final OperationalEventService logger) {
        this.baseItemSearchRepository = baseItemSearchRepository;
        this.baseItemFilterProcessor = new BaseItemFilterProcessor();
        this.logger = logger;
    }

    @Override
    public List<BaseItem> searchItems(final SearchRequest searchCriteria) {
        Optional<Specifications<BaseItem>> maybeSpecifications = createSpecification(searchCriteria);

        if(maybeSpecifications.isPresent()) {
            return baseItemSearchRepository.findAll(maybeSpecifications.get());
        }

        return Lists.newArrayList(baseItemSearchRepository.findAll());
    }

    private Optional<Specifications<BaseItem>> createSpecification(final SearchRequest searchCriteria) {
        List<Specification<BaseItem>> specifications = new ArrayList<>();

        for(Filter filter : searchCriteria.getFilters()) {
            Optional<Specification<BaseItem>> maybeSpec = baseItemFilterProcessor.processFilter(filter);

            if(maybeSpec.isPresent()) {
                specifications.add(maybeSpec.get());
            } else {
                logger.serviceWarning(LOG, null, "Could not map specification for filter type {} and property {}", filter.getType(), filter.getProperty());
            }
        }

        if(specifications.isEmpty()) {
            return Optional.empty();
        }

        Specifications<BaseItem> spec = null;
        for (Specification<BaseItem> specification : specifications) {
            if(spec == null) {
                spec = Specifications.where(specification);
                continue;
            }

            spec = spec.and(specification);
        }

        return Optional.of(spec);
    }
}
