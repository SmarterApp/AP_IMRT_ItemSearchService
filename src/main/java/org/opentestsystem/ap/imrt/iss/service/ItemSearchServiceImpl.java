package org.opentestsystem.ap.imrt.iss.service;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.repository.BaseItemSearchRepository;
import org.opentestsystem.ap.imrt.iss.repository.ItemSearchGroupAndCountRepository;
import org.opentestsystem.ap.imrt.iss.service.filter.FilterProcessor;
import org.opentestsystem.ap.imrt.iss.service.filter.ImrtSearchIndexProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.FORM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Sort.Direction.ASC;
import static org.opentestsystem.ap.imrt.iss.service.filter.ImrtSearchIndexProperties.getImrtSearchProperty;

@Service
public class ItemSearchServiceImpl implements ItemSearchService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSearchServiceImpl.class);
    private final OperationalEventService logger;
    private static final Map<String, String> COUNTS_TO_FIELDS;

    static {
        Map<String, String> countsToFields = new HashMap<>();
        countsToFields.put(ITEM_ID, getImrtSearchProperty(ITEM_ID).get());
        countsToFields.put(GRADE, getImrtSearchProperty(GRADE).get());
        countsToFields.put(WORKFLOW_STATUS, getImrtSearchProperty(WORKFLOW_STATUS).get());
        countsToFields.put(ITEM_TYPE, getImrtSearchProperty(ITEM_TYPE).get());
        countsToFields.put(SUBJECT, getImrtSearchProperty(SUBJECT).get());
        countsToFields.put(ORG_TYPE_ID, getImrtSearchProperty(ORG_TYPE_ID).get());
        countsToFields.put(ORG_NAME, getImrtSearchProperty(ORG_NAME).get());
        countsToFields.put(ITEM_AUTHOR, getImrtSearchProperty(ITEM_AUTHOR).get());
        countsToFields.put(DOK, getImrtSearchProperty(DOK).get());
        countsToFields.put(ITEM_DIFFICULTY_QUINTILE, getImrtSearchProperty(ITEM_DIFFICULTY_QUINTILE).get());

        //Alignment Fields
        countsToFields.put(PRIMARY_CLAIM, getImrtSearchProperty(PRIMARY_CLAIM).get());
        countsToFields.put(PRIMARY_TARGET, getImrtSearchProperty(PRIMARY_TARGET).get());
        countsToFields.put(SECONDARY_CLAIM, getImrtSearchProperty(SECONDARY_CLAIM).get());
        countsToFields.put(SECONDARY_TARGET, getImrtSearchProperty(SECONDARY_TARGET).get());
        countsToFields.put(QUATERNARY_CLAIM, getImrtSearchProperty(QUATERNARY_CLAIM).get());
        countsToFields.put(QUATERNARY_TARGET, getImrtSearchProperty(QUATERNARY_TARGET).get());
        countsToFields.put(TERTIARY_CLAIM, getImrtSearchProperty(TERTIARY_CLAIM).get());
        countsToFields.put(TERTIARY_TARGET, getImrtSearchProperty(TERTIARY_TARGET).get());

        COUNTS_TO_FIELDS = Collections.unmodifiableMap(countsToFields);
    }


    private final BaseItemSearchRepository baseItemSearchRepository;
    private final FilterProcessor<BaseItem> filterProcessor;
    private final ItemSearchGroupAndCountRepository itemSearchGroupAndCountRepository;

    public ItemSearchServiceImpl(final BaseItemSearchRepository baseItemSearchRepository,
                                 final FilterProcessor<BaseItem> filterProcessor,
                                 final ItemSearchGroupAndCountRepository itemSearchGroupAndCountRepository,
                                 final OperationalEventService logger) {
        this.baseItemSearchRepository = baseItemSearchRepository;
        this.filterProcessor = filterProcessor;
        this.itemSearchGroupAndCountRepository = itemSearchGroupAndCountRepository;
        this.logger = logger;
    }

    @Override
    public Optional<Page<BaseItem>> searchItems(final List<SearchFilter> filters, final org.opentestsystem.ap.imrt.iss.dto.search.Sort sort, final PageDto pageDto) {
        if (isFiltersInvalid(filters)) {
            return Optional.empty();
        }

        Optional<Specifications<BaseItem>> maybeSpecifications;
        maybeSpecifications = filterProcessor.processFilters(filters);
        PageRequest pageRequest = mapPageAndSort(pageDto, sort);

        //If there are no filters or if the filters sent are not supported there will not be any specifications to run.
        return maybeSpecifications.map(baseItemSpecifications -> Optional.of(baseItemSearchRepository.findAll(baseItemSpecifications, pageRequest)))
                .orElseGet(() -> Optional.of(baseItemSearchRepository.findAll(pageRequest)));
    }

    @Override
    public Optional<Map<String, Long>> getCounts(final List<SearchFilter> filters, final String groupBy) {
        if (isFiltersInvalid(filters)) {
            return Optional.empty();
        }

        if (!COUNTS_TO_FIELDS.containsKey(groupBy)) {
            logger.warn(LOG, null, "Unsupported group by property {}.  Please check API documentation", groupBy);
            throw new IllegalArgumentException(String.format("Unsupported group by property %s", groupBy));
        }

        Optional<Specifications<BaseItem>> maybeSpecifications = filterProcessor.processFilters(filters);

        final String groupByField = COUNTS_TO_FIELDS.get(groupBy);

        return maybeSpecifications.map(baseItemSpecifications -> Optional.of(itemSearchGroupAndCountRepository.getGroupCounts(groupByField, baseItemSpecifications)))
                .orElseGet(() -> Optional.of(itemSearchGroupAndCountRepository.getGroupCounts(groupByField)));
    }

    private PageRequest mapPageAndSort(PageDto pageDto, org.opentestsystem.ap.imrt.iss.dto.search.Sort sortDto) {
        Sort sort = mapSort(sortDto);

        if (pageDto.getPageNumber() < 0) {
            throw new IllegalArgumentException("Page number must be greater than or equal zero");
        }

        if (pageDto.getPageSize() > 1000) {
            throw new IllegalArgumentException("Number of results for a single page cannot be greater than 1000");
        }

        return new PageRequest(pageDto.getPageNumber(), pageDto.getPageSize(), sort);
    }

    private Sort mapSort(org.opentestsystem.ap.imrt.iss.dto.search.Sort sort) {
        Optional<String> maybeImrtItemProperty = getImrtSearchProperty(sort.getProperty());
        if (!maybeImrtItemProperty.isPresent()) {
            throw new IllegalArgumentException("Unsupported sort property selected: " + sort.getProperty());
        }

        Sort.Direction direction;

        /*
        Days in workflow status is a derived field at query time.  THe sorting needs to be flipped from the request
        so that asc sorts by the newest date to oldest and vice versa.
         */
        if (DAYS_IN_WORKFLOW_STATUS.equals(sort.getProperty())) {
            direction = ASC == sort.getDirection() ? Sort.Direction.DESC : Sort.Direction.ASC;
        } else {
            direction = ASC == sort.getDirection() ? Sort.Direction.ASC : Sort.Direction.DESC;
        }

        //TODO - this is temporary and will be removed
        String sortProperty = maybeImrtItemProperty.get();
        if (maybeImrtItemProperty.get().equals(FORM_TYPE)) {
            sortProperty = "forms." + FORM_TYPE;
        }

        return new Sort(direction, sortProperty);
    }

    private boolean isFiltersInvalid(List<SearchFilter> filters) throws IllegalArgumentException {
        for (SearchFilter filter : filters) {
            if (!ImrtSearchIndexProperties.isValidImrtField(filter.getFilterProperty())) {
                throw new IllegalArgumentException(String.format("Invalid filter in search request: property = %s", filter.getFilterProperty()));
            }

            if (!filter.isValid()) {
                return true;
            }
        }

        return false;
    }
}
