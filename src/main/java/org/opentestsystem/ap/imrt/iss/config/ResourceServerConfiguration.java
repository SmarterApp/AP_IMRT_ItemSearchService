package org.opentestsystem.ap.imrt.iss.config;

import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.service.OpenAmTokenServices;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;
import org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

/**
 * Set up configuration as an OAuth2 resource server
 */
@Configuration
@EnableResourceServer
@Import(ResourceServerProperties.class)
public class ResourceServerConfiguration {

    @Bean
    public ResourceServerConfigurer getResourceServerConfigurer(OpenAmTokenServices openAmTokenServices) {
        return new ResourceServerConfigurer() {
            @Override
            public void configure(final ResourceServerSecurityConfigurer config) {
                config.tokenServices(openAmTokenServices);
            }

            @Override
            public void configure(final HttpSecurity http) throws Exception {
                http
                        .anonymous().disable()
                        .authorizeRequests().antMatchers("/**").authenticated()
                        .and().exceptionHandling().accessDeniedHandler(new OAuth2AccessDeniedHandler());
            }
        };
    }

    @Bean
    @Primary
    public OpenAmTokenServices tokenServices(ResourceServerProperties properties, OperationalEventService operationalEventService) {
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setErrorHandler(new DefaultResponseErrorHandler() {
            @Override
            // Ignore 400, that is what is returned if the token is invalid
            // Better to pass back the json body to make the error message available
            public void handleError(ClientHttpResponse response) throws IOException {
                if (response.getRawStatusCode() != 400) {
                    super.handleError(response);
                }
            }
        });

        DefaultAccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();
        tokenConverter.setIncludeGrantType(true);

        return new OpenAmTokenServices(properties, tokenConverter, restTemplate, operationalEventService);
    }
}