package org.opentestsystem.ap.imrt.iss.config;

import org.opentestsystem.ap.imrt.iss.service.OpenAmTokenServices;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;

/**
 * Set up configuration as an OAuth2 resource server
 */
@Configuration
@EnableResourceServer
@Import(ResourceServerProperties.class)
public class ResourceServerConfiguration {

    @Bean
    public ResourceServerConfigurer getResourceServerConfigurer(OpenAmTokenServices openAmTokenServices) {
        return new ResourceServerConfigurer() {
            @Override
            public void configure(final ResourceServerSecurityConfigurer config) throws Exception {
                config.tokenServices(openAmTokenServices);
            }

            @Override
            public void configure(final HttpSecurity http) throws Exception {
                http
                        .anonymous().disable()
                        .authorizeRequests().antMatchers("/**").authenticated()
                        .and().exceptionHandling().accessDeniedHandler(new OAuth2AccessDeniedHandler());
            }
        };
    }

    @Bean
    @Primary
    public OpenAmTokenServices tokenServices(ResourceServerProperties properties) {
        return new OpenAmTokenServices(properties);
    }
}