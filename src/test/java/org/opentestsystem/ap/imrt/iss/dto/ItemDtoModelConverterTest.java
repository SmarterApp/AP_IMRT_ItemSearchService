package org.opentestsystem.ap.imrt.iss.dto;

import com.google.common.collect.Sets;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.imrt.common.model.Attachment;
import org.opentestsystem.ap.imrt.common.model.AttachmentFileTypes;
import org.opentestsystem.ap.imrt.common.model.AttachmentKey;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.Stimulus;
import org.opentestsystem.ap.imrt.common.model.ValidationResult;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.builder.StimulusBuilder;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class ItemDtoModelConverterTest {
    private ItemDtoModelConverter mapper;

    @Before
    public void setUp() {
        mapper = new ItemDtoModelConverter();
    }

    @Test
    public void shouldMapToItemDto() {
        Instant workflowStatusSetAt = Instant.now().minus(5, ChronoUnit.DAYS);
        ImrtItem item = new ImrtItemBuilder()
                .withWorkflowStatusSetAt(workflowStatusSetAt)
                .build();

        ItemDto dto = mapper.convert(item);

        validateItem(dto, item);
        assertThat(dto.getItemDetail()).isNull();
        assertThat(dto.getWorkflowStatusUpdatedDate()).isEqualTo(workflowStatusSetAt);
        assertThat(dto.getDaysInWorkflowStatus()).isPresent();
        assertThat(dto.getDaysInWorkflowStatus().get()).isEqualTo("5");
    }

    @Test
    public void shouldMapStimulusToItemDto() {
        Instant workflowStatusSetAt = Instant.now().minus(5, ChronoUnit.DAYS);
        Stimulus item = new StimulusBuilder()
                .withWorkflowStatusSetAt(workflowStatusSetAt)
                .withAssociatedItems(Collections.singletonList(new ImrtItemBuilder().build()))
                .build();

        ItemDto dto = mapper.convert(item);

        validateItem(dto, item);
    }

    @Test
    public void shouldMapToItemDtoWithItem() {
        Item itemJson = mock(Item.class);
        ImrtItem item = new ImrtItemBuilder().withItemJson(itemJson).build();
        item.setValidationResults(Collections.singleton(new ValidationResult()));

        ItemDto dto = mapper.mapWithDetail(item);

        validateItem(dto, item);
        assertThat(dto.getItemDetail()).isNotNull();
        assertThat(dto.getItemDetail()).isEqualTo(itemJson);
    }

    @Test
    public void shouldMapToItemDtoWithContentAttachments() {
        ImrtItem item = new ImrtItemBuilder()
                .build();

        Set<Attachment> attachments = Sets.newHashSet(
                new Attachment(new AttachmentKey(item, "asl-file", AttachmentFileTypes.ASL), Instant.now(), "me"),
                new Attachment(new AttachmentKey(item, "braille-file", AttachmentFileTypes.BRAILLE), Instant.now(), "me"),
                new Attachment(new AttachmentKey(item, "cc-file", AttachmentFileTypes.CC), Instant.now(), "me")
        );

        item.setAttachments(attachments);

        ItemDto dto = mapper.convert(item);

        validateItem(dto, item);
    }

    private void validateItem(ItemDto dto, BaseItem item) {
        assertThat(dto.getId()).isEqualTo(String.valueOf(item.getId()));
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreateDate()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getIntendedGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getStimulusId()).isEqualTo(String.valueOf(item.getAssociatedStimulusId()));
        assertThat(dto.getOrganizationTypeId()).isEqualTo(item.getOrganizationTypeId());
        assertThat(dto.getOrganizationName()).isEqualTo(item.getOrganizationName());
        assertThat(dto.isBeingCreated()).isEqualTo(Boolean.TRUE.toString());
        assertThat(dto.getContentTaskModel()).isEqualTo(item.getContentTaskModel());

        assertThat(dto.getPrimaryClaim()).isEqualTo(item.getPrimaryClaim());
        assertThat(dto.getPrimaryTarget()).isEqualTo(item.getPrimaryTarget());
        assertThat(dto.getPrimaryCommonCoreStandard()).isEqualTo(item.getPrimaryCommonCoreStandard());
        assertThat(dto.getPrimaryContentDomain()).isEqualTo(item.getPrimaryContentDomain());

        assertThat(dto.getSecondaryClaim()).isEqualTo(item.getSecondaryClaim());
        assertThat(dto.getSecondaryTarget()).isEqualTo(item.getSecondaryTarget());
        assertThat(dto.getSecondaryCommonCoreStandard()).isEqualTo(item.getSecondaryCommonCoreStandard());
        assertThat(dto.getSecondaryContentDomain()).isEqualTo(item.getSecondaryContentDomain());

        assertThat(dto.getTertiaryClaim()).isEqualTo(item.getTertiaryClaim());
        assertThat(dto.getTertiaryTarget()).isEqualTo(item.getTertiaryTarget());
        assertThat(dto.getTertiaryCommonCoreStandard()).isEqualTo(item.getTertiaryCommonCoreStandard());
        assertThat(dto.getTertiaryContentDomain()).isEqualTo(item.getTertiaryContentDomain());

        assertThat(dto.getQuaternaryClaim()).isEqualTo(item.getQuaternaryClaim());
        assertThat(dto.getQuaternaryTarget()).isEqualTo(item.getQuaternaryTarget());
        assertThat(dto.getQuaternaryCommonCoreStandard()).isEqualTo(item.getQuaternaryCommonCoreStandard());
        assertThat(dto.getQuaternaryContentDomain()).isEqualTo(item.getQuaternaryContentDomain());
        assertThat(dto.getItemAuthor()).isEqualTo(item.getItemAuthor());

        assertThat(dto.getItemDifficultyQuintile()).isEqualTo(item.getItemDifficultyQuintile().toString());
        assertThat(dto.getCalculatedFormCount()).isEqualTo(item.getFormCount().toString());
        assertThat(dto.getCalculatedExposuresCount()).isEqualTo(item.getExposuresCount().toString());

        assertThat(dto.isAslProvided()).isEqualTo(item.getAslProvided());
        assertThat(dto.getAslRequired()).isEqualTo(item.getAslRequired());
        assertThat(dto.isBrailleProvided()).isEqualTo(item.getBrailleProvided());
        assertThat(dto.getBrailleRequired()).isEqualTo(item.getBrailleRequired());
        assertThat(dto.getClosedCaptioningProvided()).isEqualTo(item.getCcProvided());
        assertThat(dto.getClosedCaptioningRequired()).isEqualTo(item.getCcRequired());
        assertThat(dto.getTranslationRequired()).isEqualTo(item.getTranslationRequired());
        assertThat(dto.getTranslationProvided()).isEqualTo(item.getTranslationProvided());

        assertThat(dto.getAslAttachments()).hasSize(getAttachmentCountByFileType(item.getAttachments(), AttachmentFileTypes.ASL));
        assertThat(dto.getBrailleAttachments()).hasSize(getAttachmentCountByFileType(item.getAttachments(), AttachmentFileTypes.BRAILLE));
        assertThat(dto.getClosedCaptioningAttachments()).hasSize(getAttachmentCountByFileType(item.getAttachments(), AttachmentFileTypes.CC));

        assertThat(dto.getWritingPurpose()).isEqualTo(item.getWritingPurpose());
        assertThat(dto.getPerformanceTask()).isEqualTo(item.getPerformanceTask());
        assertThat(dto.getTestCategory()).isEqualTo(item.getTestCategory());
        assertThat(dto.getEnglishContentLastUpdatedDate()).isEqualTo(item.getEnglishContentLastUpdatedAt());
        assertThat(dto.getSpanishContentLastUpdatedDate()).isEqualTo(item.getSpanishContentLastUpdatedAt());
        assertThat(dto.getScoringEngine()).isEqualTo(item.getScoringEngine());
        assertThat(dto.getAllowCalculator()).isEqualTo(item.getAllowCalculator());
        assertThat(dto.getUpdateDate()).isEqualTo(item.getUpdatedAt());

        assertThat(dto.isAslUploadedPriorToLastContentUpdate()).isEqualTo(String.valueOf(item.getAslUploadedPriorToLastContentUpdate()));
        assertThat(dto.isBrailleUploadedPriorToLastContentUpdate()).isEqualTo(String.valueOf(item.getBrailleUploadedPriorToLastContentUpdate()));
        assertThat(dto.isClosedCaptioningUploadedPriorToLastContentUpdate()).isEqualTo(String.valueOf(item.getClosedCaptioningUploadedPriorToLastContentUpdate()));
        assertThat(dto.getValidationResults()).hasSize(item.getValidationResults().size());
        assertThat(dto.getEnglishPassagesCount()).isEqualTo(String.valueOf(item.getEnglishPassagesCount()));
        assertThat(dto.getSpanishPassagesCount()).isEqualTo(String.valueOf(item.getSpanishPassagesCount()));
        assertThat(dto.getContentChangedAfterOperational()).isEqualTo(String.valueOf(item.isContentChangedAfterOperational()));

        assertThat(dto.isUnresolvedUpdateNeed()).isEqualTo(String.valueOf(item.isUnresolvedUpdateNeed()));
        assertThat(dto.getCurrentUpdateNeedCreatedDate()).isEqualTo(item.getCurrentUpdateNeedCreateDate());
        assertThat(dto.getCurrentUpdateNeedInternalResolution()).isEqualTo(item.getCurrentUpdateNeedInternalResolution());
        assertThat(dto.getCurrentUpdateNeedInternalResolutionDate()).isEqualTo(item.getCurrentUpdateNeedInternalResolutionDate());
        assertThat(dto.getCurrentUpdateNeedResolution()).isEqualTo(item.getCurrentUpdateNeedResolution());
        assertThat(dto.getCurrentUpdateNeedResolutionDate()).isEqualTo(item.getCurrentUpdateNeedResolutionDate());
        assertThat(dto.isEnglishGlossaryProvided()).isEqualTo(item.isEnglishGlossaryProvided());
        assertThat(dto.isIllustratedGlossaryProvided()).isEqualTo(item.isIllustratedGlossaryProvided());
        assertThat(dto.getIllustratedGlossaryRequired()).isEqualTo(item.getIllustratedGlossaryRequired());
        assertThat(dto.isTranslatedGlossaryProvided()).isEqualTo(item.isTranslatedGlossaryProvided());
        assertThat(dto.getTranslatedGlossaryRequired()).isEqualTo(item.getTranslatedGlossaryRequired());
        if (item instanceof Stimulus) {
            assertThat(dto.getAssociatedItemCount()).isEqualTo(String.valueOf(((Stimulus) item).getAssociatedItems().size()));
        } else {
            assertThat(dto.getAssociatedItemCount()).isEqualTo("0");
        }
    }

    private int getAttachmentCountByFileType(final Collection<Attachment> attachments, final String attachmentFileType) {
        return attachments.stream()
                .filter(attachment -> attachmentFileType.equals(attachment.getAttachmentKey().getFileType()))
                .collect(Collectors.toSet())
                .size();
    }
}