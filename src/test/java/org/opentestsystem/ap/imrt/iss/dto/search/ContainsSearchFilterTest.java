package org.opentestsystem.ap.imrt.iss.dto.search;

import org.junit.Test;
import org.opentestsystem.ap.imrt.iss.model.ContainsSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.FilterQuery;

import java.util.Arrays;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.PRIMARY_CONTENT_DOMAIN;


public class ContainsSearchFilterTest {
    @Test
    public void shouldCreateQueryFilter() {
        final ContainsSearchFilter result = new ContainsSearchFilter(PRIMARY_CONTENT_DOMAIN, Collections.singletonList("some Value"), false);

        FilterQuery query = result.getFilterQuery();

        assertThat(query.getQuery()).isEqualTo("LOWER(primary_content_domain) LIKE :primaryContentDomain0");
        assertThat(query.getMapSqlProperties()).containsKeys(PRIMARY_CONTENT_DOMAIN.getProperty() + "0");
        assertThat(query.getMapSqlProperties().get(PRIMARY_CONTENT_DOMAIN.getProperty() + "0")).isEqualTo("%some value%");
    }

    @Test
    public void shouldCreateQueryFilterWithBlankAndValues() {
        final ContainsSearchFilter result = new ContainsSearchFilter(PRIMARY_CONTENT_DOMAIN, Arrays.asList("some Value", "other"), false);

        FilterQuery query = result.getFilterQuery();

        assertThat(query.getQuery()).isEqualTo("LOWER(primary_content_domain) LIKE :primaryContentDomain0 OR LOWER(primary_content_domain) LIKE :primaryContentDomain1");
        assertThat(query.getMapSqlProperties()).containsKeys(PRIMARY_CONTENT_DOMAIN.getProperty() + "0", PRIMARY_CONTENT_DOMAIN.getProperty() + "1");
        assertThat(query.getMapSqlProperties().get(PRIMARY_CONTENT_DOMAIN.getProperty() + "0")).isEqualTo("%some value%");
        assertThat(query.getMapSqlProperties().get(PRIMARY_CONTENT_DOMAIN.getProperty() + "1")).isEqualTo("%other%");
    }

    @Test
    public void shouldCreateQueryFilterWithMultipleValues() {
        final ContainsSearchFilter result = new ContainsSearchFilter(PRIMARY_CONTENT_DOMAIN, Collections.singletonList("some Value"), true);

        FilterQuery query = result.getFilterQuery();

        assertThat(query.getQuery()).isEqualTo("LOWER(primary_content_domain) LIKE :primaryContentDomain0 OR primary_content_domain = ''");
        assertThat(query.getMapSqlProperties()).containsKeys(PRIMARY_CONTENT_DOMAIN.getProperty() + "0");
        assertThat(query.getMapSqlProperties().get(PRIMARY_CONTENT_DOMAIN.getProperty() + "0")).isEqualTo("%some value%");
    }

    @Test
    public void shouldCreateQueryFilterWithOnlyBlank() {
        final ContainsSearchFilter result = new ContainsSearchFilter(PRIMARY_CONTENT_DOMAIN, Collections.emptyList(), true);

        FilterQuery query = result.getFilterQuery();

        assertThat(query.getQuery()).isEqualTo("primary_content_domain = ''");
        assertThat(query.getMapSqlProperties()).isEmpty();
    }
}
