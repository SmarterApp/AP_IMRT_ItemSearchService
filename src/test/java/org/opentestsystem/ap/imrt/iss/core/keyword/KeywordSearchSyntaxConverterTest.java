package org.opentestsystem.ap.imrt.iss.core.keyword;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.ap.imrt.iss.model.KeywordSearchFilter;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.junit.Assert.fail;
import static org.opentestsystem.ap.imrt.iss.core.keyword.KeywordSearchToRegexEvaluator.AND_SYMBOL;
import static org.opentestsystem.ap.imrt.iss.core.keyword.KeywordSearchToRegexEvaluator.MULTI_WILDCARD;
import static org.opentestsystem.ap.imrt.iss.core.keyword.KeywordSearchToRegexEvaluator.NEGATE_SYMBOL;
import static org.opentestsystem.ap.imrt.iss.core.keyword.KeywordSearchToRegexEvaluator.OR_SYMBOL;
import static org.opentestsystem.ap.imrt.iss.core.keyword.KeywordSearchToRegexEvaluator.SINGLE_WILDCARD;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.KEYWORD_CONTENT;

/**
 * Created by Greg Charles on 10/12/18.
 */
public class KeywordSearchSyntaxConverterTest {

    private KeywordSearchSyntaxConverter converter;
    private String escapedOr;
    private String escapedAnd;

    @Before
    public void setUp() {
        converter = new KeywordSearchSyntaxConverter();
        StringBuilder sb = new StringBuilder();
        for (char c : OR_SYMBOL.toCharArray()) {
            if ("[.+?*^${}()|[]\\".indexOf(c) >= 0) {
                sb.append("\\");
            }
            sb.append(c);
        }
        escapedOr = sb.toString();

        sb.setLength(0);
        for (char c : AND_SYMBOL.toCharArray()) {
            if ("[.+?*^${}()|[]\\".indexOf(c) >= 0) {
                sb.append("\\");
            }
            sb.append(c);
        }
        escapedAnd = sb.toString();
    }

    @Test
    public void shouldConvertCaseInsensitive() {
        final String searchString = "word";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString(" ~* "));
        assertThat(query, not(containsString(" ~ ")));
    }

    @Test
    public void shouldConvertCaseSensitive() {
        final String searchString = "word";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, true);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString(" ~ "));
        assertThat(query, not(containsString(" ~* ")));
    }

    @Test
    public void shouldExpandSingleWildcard() {
        final String searchString = "w" + SINGLE_WILDCARD + "rd";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("w\\Srd"));
        assertThat(query, not(containsString("w_rd")));

    }

    @Test
    public void shouldExpandMultiWildcard() {
        final String searchString = "w" + MULTI_WILDCARD + "d";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("w\\S*d"));
        assertThat(query, not(containsString("w*d")));
    }

    @Test
    public void shouldAllowQuotedString() {
        final String searchString = "\"Now is the time for all good men\"";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'Now is the time for all good men'"));
    }

    @Test
    public void shouldEscapeRegexCharactersInQuotedString() {
        final String searchString = "\"[.+?*^${}()|[]\\\"";

        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'\\[\\.\\+\\?\\*\\^\\$\\{\\}\\(\\)\\|\\[\\]\\\\'"));
    }

    @Test
    public void shouldNotExpandWildcardsInQuotedString() {
        final String searchString = "\"cross" + MULTI_WILDCARD + "w" + SINGLE_WILDCARD + "rd\"";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'cross\\" + MULTI_WILDCARD + "w" + SINGLE_WILDCARD + "rd'"));
    }

    @Test
    public void shouldFormatDoubleQuote() {
        final String searchString = "\"\"Hello, world!\"\"";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'\"Hello, world!\"'"));
    }

    @Test
    public void shouldFormatDoubleQuoteInQuotedString() {
        final String searchString = "\"\"\"Hello, world!\"\", said Brian\"";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'\"Hello, world!\", said Brian'"));
    }

    @Test
    public void shouldFormatSingleQuote() {
        final String searchString = "Greg's test";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'Greg''s test'"));
    }

    @Test
    public void shouldHandleMultipleTokensWithoutOperators() {
        final String searchString = "\"abc\"\n\"def" + MULTI_WILDCARD + "\" ghi" + MULTI_WILDCARD + "";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        System.out.println(query);
        assertThat(query, containsString("abc def\\" + MULTI_WILDCARD + " ghi\\" + MULTI_WILDCARD + ""));
    }

    @Test
    public void shouldCompressWhitespace() {
        final String searchString = "\"   one\tword      follows\nafter\r\nanother   \"";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'one word follows after another'"));
    }

    @Test
    public void shouldAllowLogicalAnd() {
        final String searchString = "Jack " + AND_SYMBOL + " Jill";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'Jack'"));
        assertThat(query, containsString(" AND "));
        assertThat(query, containsString("'Jill'"));
    }

    @Test
    public void shouldAllowLogicalOr() {
        final String searchString = "Jack " + OR_SYMBOL + " Jill";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'Jack'"));
        assertThat(query, containsString(" OR "));
        assertThat(query, containsString("'Jill'"));
    }

    @Test
    public void shouldAllowLogicalNot() {
        final String searchString = NEGATE_SYMBOL + "Jack";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("NOT "));
        assertThat(query, containsString("'Jack'"));
    }

    @Test
    public void shouldAllowNestedLogicalStatements() {
        final String searchString = "{Jack " + OR_SYMBOL + " John} " + AND_SYMBOL + " Jill " + AND_SYMBOL + " " +
            NEGATE_SYMBOL + "{pail " + OR_SYMBOL + " water}";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        System.out.println(query);

        assertThat(query,
            is("(((item_keyword.content ~* 'Jack' OR item_keyword.content ~* 'John') AND item_keyword.content ~* 'Jill') AND NOT (item_keyword.content ~* 'pail' OR item_keyword.content ~* 'water'))"));
    }

    @Test
    public void shouldTreatedOperatorsInQuotesAsLiterals() {
        final String searchString = "\"Jack " + AND_SYMBOL + " Jill " + OR_SYMBOL + " {someone else}!\"";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        String query = converter.convert(keywordSearchFilter);
        assertThat(query, containsString("'Jack " + escapedAnd + " Jill " + escapedOr + " \\{someone else\\}!'"));
    }

    @Test
    public void shouldErrorOnNullSearchString() {
        final String searchString = null;
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        try {
            converter.convert(keywordSearchFilter);
            fail("Expected exception for null string");
        } catch (Exception e) {
            assertThat(e.getClass(), is(not(NullPointerException.class)));
            assertThat(e.getMessage(), containsString("Keyword"));
        }
    }

    @Test
    public void shouldErrorOnBlankSearchString() {
        final String searchString = "       \n";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        try {
            converter.convert(keywordSearchFilter);
            fail("Expected exception for blank string");
        } catch (Exception e) {
            assertThat(e.getMessage(), containsString("Keyword"));
        }
    }

    @Test
    public void shouldErrorOnUnbalancedBraces() {
        final String searchString = "Jacob " + AND_SYMBOL + " {Leah " + OR_SYMBOL + " Ruth";
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        try {
            converter.convert(keywordSearchFilter);
            fail("Expected exception for unbalanced braces");
        } catch (Exception e) {
            assertThat(e.getMessage(), containsString("Keyword"));
        }
    }

    @Test
    @Ignore
    // Remove the ignore if PR is approved at
    // https://github.com/AKA-Syenite/Artifice/tree/master/src/main/java/fathzer/javaluator
    // and new version released
    public void shouldErrorOnPostFixedNotOperation() {
        final String searchString = "Hello, world" + NEGATE_SYMBOL;
        final KeywordSearchFilter keywordSearchFilter =
            new KeywordSearchFilter(KEYWORD_CONTENT, searchString, false);

        try {
            converter.convert(keywordSearchFilter);
            fail("Expected exception for unquoted, post-fixed NOT operator");
        } catch (Exception e) {
            assertThat(e.getMessage(), containsString("Keyword"));
        }
    }
}