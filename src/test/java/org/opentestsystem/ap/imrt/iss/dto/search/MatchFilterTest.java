package org.opentestsystem.ap.imrt.iss.dto.search;

import org.junit.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.STIMULUS_ID;

public class MatchFilterTest {

    @Test
    public void shouldNotContainValidValuesIfNoNumbersAreInteger() {
        MatchFilter filter = new MatchFilter(ITEM_ID, Collections.singletonList("123AAA"));

        assertThat(filter.containsValidValues()).isFalse();
    }

    @Test
    public void shouldContainValidValuesMixIntegersAndNonIntegers() {
        MatchFilter filter = new MatchFilter(STIMULUS_ID, Arrays.asList("123AAA", "12345"));

        assertThat(filter.containsValidValues()).isTrue();
    }

    @Test
    public void shouldNotContainValidValuesIfNumberIsNotInteger() {
        MatchFilter filter = new MatchFilter(STIMULUS_ID, Collections.singletonList("12345.123"));

        assertThat(filter.containsValidValues()).isFalse();

        filter = new MatchFilter(STIMULUS_ID, Collections.singletonList("999999999999999999999999999999999999999999999999999999999"));

        assertThat(filter.containsValidValues()).isFalse();
    }

    @Test
    public void shouldFilterValuesForStimulusIdAndItemId() {
        List<String> values = Arrays.asList("123AAA", "12345", "999999999999999999999999999999999999999999999999999999999");
        MatchFilter filter = new MatchFilter(STIMULUS_ID, values);

        assertThat(filter.getValues()).containsExactly("12345");

        filter = new MatchFilter(ITEM_ID, values);

        assertThat(filter.getValues()).containsExactly("12345");

        filter = new MatchFilter("somethingElse", values);

        assertThat(filter.getValues()).containsExactly(values.toArray(new String[0]));
    }
}