package org.opentestsystem.ap.imrt.iss.model;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CALCULATED_FORM_COUNT;

public class IntegerRangeSearchFilterTest {
    @Test
    public void shouldCreateMinQuery() {
        IntegerRangeSearchFilter filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, 1, null);

        FilterQuery query = filter.getFilterQuery().get();

        final String expectedMinParamName = CALCULATED_FORM_COUNT.getProperty() + "Min";
        assertThat(query.getQuery()).isEqualTo(CALCULATED_FORM_COUNT.getColumnName() + " >= :" + expectedMinParamName);
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMinParamName);
        assertThat(query.getMapSqlProperties().get(expectedMinParamName)).isEqualTo(1);
    }

    @Test
    public void shouldCreateMaxQuery() {
        IntegerRangeSearchFilter filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, null, 1);

        FilterQuery query = filter.getFilterQuery().get();

        final String expectedMaxParamName = CALCULATED_FORM_COUNT.getProperty() + "Max";
        assertThat(query.getQuery()).isEqualTo(CALCULATED_FORM_COUNT.getColumnName() + " <= :" + expectedMaxParamName);
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMaxParamName);
        assertThat(query.getMapSqlProperties().get(expectedMaxParamName)).isEqualTo(1);
    }

    @Test
    public void shouldCreateMinMaxQuery() {
        IntegerRangeSearchFilter filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, 1, 2);

        FilterQuery query = filter.getFilterQuery().get();

        final String expectedMaxParamName = CALCULATED_FORM_COUNT.getProperty() + "Max";
        final String expectedMinParamName = CALCULATED_FORM_COUNT.getProperty() + "Min";
        assertThat(query.getQuery()).isEqualTo(CALCULATED_FORM_COUNT.getColumnName() + " BETWEEN :" + expectedMinParamName + " AND :" + expectedMaxParamName);
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMinParamName, expectedMaxParamName);
        assertThat(query.getMapSqlProperties().get(expectedMinParamName)).isEqualTo(1);
        assertThat(query.getMapSqlProperties().get(expectedMaxParamName)).isEqualTo(2);
    }

    @Test
    public void shouldCreateMinMaxQueryAndBlank() {
        IntegerRangeSearchFilter filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, 1, 2, true);

        FilterQuery query = filter.getFilterQuery().get();

        final String expectedMaxParamName = CALCULATED_FORM_COUNT.getProperty() + "Max";
        final String expectedMinParamName = CALCULATED_FORM_COUNT.getProperty() + "Min";
        assertThat(query.getQuery()).isEqualTo(CALCULATED_FORM_COUNT.getColumnName() + " BETWEEN :" + expectedMinParamName + " AND :" + expectedMaxParamName + " OR " + CALCULATED_FORM_COUNT.getColumnName() + " IS NULL ");
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMinParamName, expectedMaxParamName);
        assertThat(query.getMapSqlProperties().get(expectedMinParamName)).isEqualTo(1);
        assertThat(query.getMapSqlProperties().get(expectedMaxParamName)).isEqualTo(2);
    }

    @Test
    public void shouldCreateBlankQuery() {
        IntegerRangeSearchFilter filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, null, null, true);

        FilterQuery query = filter.getFilterQuery().get();

        assertThat(query.getQuery()).isEqualTo(CALCULATED_FORM_COUNT.getColumnName() + " IS NULL ");
        assertThat(query.getMapSqlProperties()).isEmpty();
    }
}