package org.opentestsystem.ap.imrt.iss.model;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Test;
import org.opentestsystem.ap.imrt.iss.dto.ItemSearchResult;

import java.util.List;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toList;
import static org.hamcrest.CoreMatchers.either;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.endsWith;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.isEmptyString;
import static org.hamcrest.Matchers.lessThanOrEqualTo;
import static org.hamcrest.Matchers.not;
import static org.opentestsystem.ap.imrt.iss.model.KeywordResultsHighlighter.MAX_HIGHLIGHT;
import static org.opentestsystem.ap.imrt.iss.model.KeywordSearchToRegexEvaluator.AND_SYMBOL;
import static org.opentestsystem.ap.imrt.iss.model.KeywordSearchToRegexEvaluator.MULTI_WILDCARD;
import static org.opentestsystem.ap.imrt.iss.model.KeywordSearchToRegexEvaluator.NEGATE_SYMBOL;
import static org.opentestsystem.ap.imrt.iss.model.KeywordSearchToRegexEvaluator.OR_SYMBOL;
import static org.opentestsystem.ap.imrt.iss.model.KeywordSearchToRegexEvaluator.SINGLE_WILDCARD;

public class KeywordResultsHighlighterTest {
    private KeywordResultsHighlighter highlighter = new KeywordResultsHighlighter();

    @Test
    public void testSingleWord() {
        final String searchExpression = "good";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Now is the time for all good men and women to come to aid of their country.",
                "Working for the public good should be the top priority of all men and women");

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("good"));
        assertThat(results.get(1).getKeywordContent(), containsString("good"));
    }

    @Test
    public void testConsecutiveWords() {
        final String searchExpression = "good men";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Now is the time for all good men and women to come to aid of their country.",
                "Working for the public good should be the top priority of all men and women");

        // match consecutive words only
        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("good men"));
        assertThat(results.get(1).getKeywordContent(), isEmptyString());
    }

    @Test
    public void testCaseSensitive() {
        final String searchExpression = "jack";
        final boolean caseSensitive = true;
        final List<ItemSearchResult> results = buildSearchResults(
                "Jack and Jill went up the hill to play a game of poker.",
                "Jack had a pair of queens and thought he would win, but Jill had three jacks.");

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), isEmptyString());
        assertThat(results.get(1).getKeywordContent(), containsString("jack"));

        // The following is true only because the added context does not extend as far as the word Jack.
        // If the max highlight value is tuned higher, this could fail.
        assertThat(results.get(1).getKeywordContent(), not(containsString("Jack")));
    }

    @Test
    public void testSingleQuotes() {
        final String searchExpression = "man's";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "A dog is man's best friend.");

        // match consecutive words only
        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("man's"));
    }

    @Test
    public void testDoubleQuotes() {
        final String searchExpression = "\"\"Early to bed";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Benjamin Franklin said, \"Early to bed, early to rise ...\"");

        // match consecutive words only
        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("\"Early to bed"));
    }

    @Test
    public void testLogicalAnd() {
        final String searchExpression = "good " + AND_SYMBOL + " men";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Now is the time for all good men and women to come to aid of their country.",
                "Working for the public good should be the top priority of all men and women");

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("good men"));
        assertThat(results.get(1).getKeywordContent(), containsString("good"));
        assertThat(results.get(1).getKeywordContent().length(), is(lessThanOrEqualTo(MAX_HIGHLIGHT)));
    }

    @Test
    public void testLogicalOr() {
        final String searchExpression = "good " + OR_SYMBOL + " working";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Now is the time for all good men and women to come to aid of their country.",
                "Working for the public good should be the top priority of all men and women");

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("good"));
        assertThat(results.get(1).getKeywordContent(),
                either(containsString("Working")).or(containsString("good")));
    }

    @Test
    public void testLogicalNot() {
        final String searchExpression = NEGATE_SYMBOL + "working";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Now is the time for all good men and women to come to aid of their country.",
                "Working for the public good should be the top priority of all men and women");

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), startsWith("Now is the time"));
        assertThat(results.get(0).getKeywordContent().length(), is(lessThanOrEqualTo(MAX_HIGHLIGHT)));
        assertThat(results.get(1).getKeywordContent(), isEmptyString());
    }

    @Test
    public void testLogicalExpression() {
        final String searchExpression = "{good " + OR_SYMBOL + " bad} " + AND_SYMBOL + " " + NEGATE_SYMBOL + "working";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Now is the time for all good men and women to come to aid of their country.",
                "Working for the public good should be the top priority of all men and women",
                "Bad news is a headline, and gradual improvement is not." );

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("good"));
        assertThat(results.get(1).getKeywordContent(), isEmptyString());
        assertThat(results.get(2).getKeywordContent(), containsString("Bad"));
    }

    @Test
    public void testSingleWildcard() {
        final String searchExpression = "te" + SINGLE_WILDCARD + "t";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Here is some text to search.",
                "The students all said the test was hard but fair",
                "Today, 'termagant' is considered a sexist word.",
                "The Vietnamese new year is called Tet Nguyen Dan");

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("text"));
        assertThat(results.get(1).getKeywordContent(), containsString("test"));
        assertThat(results.get(2).getKeywordContent(), isEmptyString());
        assertThat(results.get(3).getKeywordContent(), isEmptyString());
    }

    @Test
    public void testMultiWildcard() {
        final String searchExpression = "te" + MULTI_WILDCARD + "t";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(
                "Here is some text to search.",
                "The students all said the test was hard but fair",
                "Today, 'termagant' is considered a sexist word.",
                "The Vietnamese new year is called Tet Nguyen Dan");

        highlighter.highlight(searchExpression, caseSensitive, results);

        assertThat(results.get(0).getKeywordContent(), containsString("text"));
        assertThat(results.get(1).getKeywordContent(), containsString("test"));
        assertThat(results.get(2).getKeywordContent(), containsString("termagant"));
        assertThat(results.get(3).getKeywordContent(), containsString("Tet"));
    }

    @Test
    public void testQuotedString() {
        final String searchExpression = "\"" + AND_SYMBOL + ", " + OR_SYMBOL + ", " + NEGATE_SYMBOL +
                ", {, }, " + SINGLE_WILDCARD + ", and " + MULTI_WILDCARD + " should be escaped when inside " +
                "a quoted string\"";
        final boolean caseSensitive = false;
        final List<ItemSearchResult> results = buildSearchResults(searchExpression);

        highlighter.highlight(searchExpression, caseSensitive, results);
        assertThat(results.get(0).getKeywordContent(), containsString("" + AND_SYMBOL + ", " + OR_SYMBOL +
                ", " + NEGATE_SYMBOL + ", {, }, " + SINGLE_WILDCARD + ", and " + MULTI_WILDCARD));
    }

    @Test
    public void testContextPadding() {
        final String searchExpression = "my text";
        final boolean caseSensitive = false;

        // Context highlights may be trimmed, so replace whitespace here to test for exactly MAX_HIGHLIGHT chars.
        final List<ItemSearchResult> results = buildSearchResults(
                "Lorem.ipsum.dolor.sit.amet,.consectetur.adipiscing.my text.elit..Aenean.venenatis.rutrum.sem,.interdum.amet",
                "my text Lorem.ipsum.dolor.sit.amet,.consectetur.adipiscing.elit..Aenean.venenatis.rutrum.sem,.interdum.amet",
                "Lorem.ipsum.dolor.sit.amet,.consectetur.adipiscing.elit..Aenean.venenatis.rutrum.sem,.interdum.amet my text");

        highlighter.highlight(searchExpression, caseSensitive, results);

        // Context padding should go on both sides when match is in the middle of the content.
        assertThat(results.get(0).getKeywordContent(), containsString("my text"));
        assertThat(results.get(0).getKeywordContent(), not(startsWith("my text")));
        assertThat(results.get(0).getKeywordContent(), not(endsWith("my text")));
        assertThat(results.get(0).getKeywordContent().length(), equalTo(MAX_HIGHLIGHT));

        // Context padding should go on right when match at the beginning of the content.
        assertThat(results.get(1).getKeywordContent(), containsString("my text"));
        assertThat(results.get(1).getKeywordContent(), startsWith("my text"));
        assertThat(results.get(1).getKeywordContent().length(), equalTo(MAX_HIGHLIGHT));

        // Context padding should go on right when match at the beginning of the content.
        assertThat(results.get(2).getKeywordContent(), containsString("my text"));
        assertThat(results.get(2).getKeywordContent(), endsWith("my text"));
        assertThat(results.get(2).getKeywordContent().length(), equalTo(MAX_HIGHLIGHT));
    }

    @Test
    public void testPreferLeftPadding() {
        final String searchExpression = RandomStringUtils.random(MAX_HIGHLIGHT - 5, true, false);
        final boolean caseSensitive = true;

        // Context highlights may be trimmed, so replace whitespace here to test for exactly MAX_HIGHLIGHT chars.
        final List<ItemSearchResult> results = buildSearchResults(
                "Lorem.ipsum.dolor.sit.amet." + searchExpression + "consectetur.adipiscing.elit.");

        highlighter.highlight(searchExpression, caseSensitive, results);

        assertThat(results.get(0).getKeywordContent(), endsWith(searchExpression));
        assertThat(results.get(0).getKeywordContent().length(), equalTo(MAX_HIGHLIGHT));
    }

    private List<ItemSearchResult> buildSearchResults(String ... contents) {
        return Stream.of(contents)
                .map(this::buildSearchResult)
                .collect(toList());
    }

    private ItemSearchResult buildSearchResult(String content) {
        return ItemSearchResult
                .builder()
                .withKeywordContent(content)
                .build();
    }
}