package org.opentestsystem.ap.imrt.iss.model;


import org.junit.Before;
import org.junit.Test;

import java.sql.Timestamp;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.WORKFLOW_STATUS_UPDATE_DATE;

public class DateRangeSearchFilterTest {
    private static final String TO_PARAM = WORKFLOW_STATUS_UPDATE_DATE.getProperty() + "To";
    private static final String FROM_PARAM = WORKFLOW_STATUS_UPDATE_DATE.getProperty() + "From";

    private SearchPermissions searchPermissions;

    @Before
    public void setUp() {
        searchPermissions = new SearchPermissions();
    }

    @Test
    public void shouldHandleToQuery() {
        Instant to = Instant.now();
        DateRangeSearchFilter filter = new DateRangeSearchFilter(WORKFLOW_STATUS_UPDATE_DATE, to, null);

        FilterQuery filterQuery = filter.getFilterQuery(searchPermissions).get();

        assertThat(filterQuery.getQuery()).isEqualTo("workflow_status_set_at <= :" + TO_PARAM);
        assertThat(filterQuery.getMapSqlProperties()).hasSize(1);
        assertThat(filterQuery.getMapSqlProperties()).containsKeys(TO_PARAM);
        assertThat(filterQuery.getMapSqlProperties().get(TO_PARAM)).isEqualTo(Timestamp.from(to));
    }

    @Test
    public void shouldHandleFromQuery() {
        Instant from = Instant.now();
        DateRangeSearchFilter filter = new DateRangeSearchFilter(WORKFLOW_STATUS_UPDATE_DATE, null, from);

        FilterQuery filterQuery = filter.getFilterQuery(searchPermissions).get();

        assertThat(filterQuery.getQuery()).isEqualTo("workflow_status_set_at >= :" + FROM_PARAM);
        assertThat(filterQuery.getMapSqlProperties()).hasSize(1);
        assertThat(filterQuery.getMapSqlProperties()).containsKeys(FROM_PARAM);
        assertThat(filterQuery.getMapSqlProperties().get(FROM_PARAM)).isEqualTo(Timestamp.from(from));
    }

    @Test
    public void shouldHandleFromAndToQuery() {
        Instant from = Instant.now().minus(1, ChronoUnit.DAYS);
        Instant to = Instant.now();
        DateRangeSearchFilter filter = new DateRangeSearchFilter(WORKFLOW_STATUS_UPDATE_DATE, to, from);

        FilterQuery filterQuery = filter.getFilterQuery(searchPermissions).get();

        assertThat(filterQuery.getQuery()).isEqualTo("workflow_status_set_at <= :" + TO_PARAM + " AND workflow_status_set_at >= :" + FROM_PARAM);
        assertThat(filterQuery.getMapSqlProperties()).hasSize(2);
        assertThat(filterQuery.getMapSqlProperties()).containsKeys(TO_PARAM, FROM_PARAM);
        assertThat(filterQuery.getMapSqlProperties().get(FROM_PARAM)).isEqualTo(Timestamp.from(from));
        assertThat(filterQuery.getMapSqlProperties().get(TO_PARAM)).isEqualTo(Timestamp.from(to));
    }
}