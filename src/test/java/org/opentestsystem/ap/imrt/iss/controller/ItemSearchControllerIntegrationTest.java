package org.opentestsystem.ap.imrt.iss.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.opentestsystem.ap.common.imrt.config.OperationalEventConfiguration;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.config.JacksonObjectMapperConfiguration;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoModelConverter;
import org.opentestsystem.ap.imrt.iss.dto.ItemSearchResult;
import org.opentestsystem.ap.imrt.iss.dto.SearchResults;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilterConverter;
import org.opentestsystem.ap.imrt.iss.service.ItemSearchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.net.URI;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = ItemSearchController.class)
@Import({
        JacksonObjectMapperConfiguration.class,
        OperationalEventConfiguration.class,
        ItemDtoModelConverter.class,
        SearchFilterConverter.class
})
public class ItemSearchControllerIntegrationTest {
    @Autowired
    private MockMvc http;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ItemDtoModelConverter converter;

    @MockBean
    private ItemSearchService mockItemSearchService;

    @Captor
    private ArgumentCaptor<List<SearchFilter>> searchFiltersCaptor;

    @Test
    public void shouldSearchResults() throws Exception {
        ImrtItem item = new ImrtItemBuilder().build();
        List<Filter> filterRequest = Collections.singletonList(new MatchFilter("id", false, Collections.singletonList("123")));
        Sort sort = new Sort("id", Sort.Direction.DESC);
        PageDto pageDto = new PageDto(1, 1);
        SearchRequest searchRequest = new SearchRequest(filterRequest, sort, pageDto);

        String searchRequestJson = objectMapper.writeValueAsString(searchRequest);

        SearchResults<ItemSearchResult> results = new SearchResults<>(Collections.singletonList(converter.convert(item)), 1, pageDto);

        when(mockItemSearchService.searchItems(searchFiltersCaptor.capture(), isA(Sort.class), isA(PageDto.class))).thenReturn(results);

        http.perform(post(new URI("/v1/items/search"))
                .contentType(MediaType.APPLICATION_JSON)
                .content(searchRequestJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.results", hasSize(1)))
                .andExpect(jsonPath("$.results[0].id", is(String.valueOf(item.getId()))));
    }

    @Test
    public void shouldGetCounts() throws Exception {
        List<Filter> filters = Collections.singletonList(new MatchFilter("id", false, Collections.singletonList("123")));
        CountRequest countRequest = new CountRequest(filters, "intendedGrade");
        Map<String, Long> counts = new HashMap<>();
        counts.put("3", 23L);
        counts.put("4", 25L);

        String countRequestJson = objectMapper.writeValueAsString(countRequest);

        when(mockItemSearchService.getCounts(searchFiltersCaptor.capture(), isA(SearchProperty.class))).thenReturn(Optional.of(counts));

        http.perform(post(new URI("/v1/items/count"))
                .contentType(MediaType.APPLICATION_JSON)
                .content(countRequestJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.groupBy", is("intendedGrade")))
                .andExpect(jsonPath("$.totalCount", is(48)))
                .andExpect(jsonPath("$.counts", hasSize(2)))
                .andExpect(jsonPath("$.counts[0].value", is("3")))
                .andExpect(jsonPath("$.counts[0].count", is(23)))
                .andExpect(jsonPath("$.counts[1].value", is("4")))
                .andExpect(jsonPath("$.counts[1].count", is(25)));
    }
}