package org.opentestsystem.ap.imrt.iss.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.imrt.common.config.OperationalEventConfiguration;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.config.JacksonObjectMapperConfiguration;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.service.ItemSearchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.net.URI;
import java.util.Collections;
import java.util.List;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = ItemSearchController.class)
@Import({JacksonObjectMapperConfiguration.class, OperationalEventConfiguration.class})
public class ItemSearchControllerIntegrationTest {
    @Autowired
    private MockMvc http;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private ItemSearchService mockItemSearchService;

    @Test
    public void shouldSearchResults() throws Exception {
        ImrtItem item = new ImrtItemBuilder().build();
        List<Filter> filters = Collections.singletonList(new MatchFilter("itemId", Collections.singletonList("123")));
        SearchRequest searchRequest = new SearchRequest(filters);

        String searchRequestJson = objectMapper.writeValueAsString(searchRequest);

        when(mockItemSearchService.searchItems(isA(SearchRequest.class))).thenReturn(Collections.singletonList(item));

        http.perform(post(new URI("/v1/items/search"))
                .contentType(MediaType.APPLICATION_JSON)
                .content(searchRequestJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("[0].id", is(item.getId())));
    }
}