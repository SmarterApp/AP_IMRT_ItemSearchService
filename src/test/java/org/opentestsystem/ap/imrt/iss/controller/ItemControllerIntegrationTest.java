package org.opentestsystem.ap.imrt.iss.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.imrt.common.config.OperationalEventConfiguration;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.Optional;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = ItemController.class)
@Import(OperationalEventConfiguration.class)
public class ItemControllerIntegrationTest {

    @Autowired
    private MockMvc http;

    @MockBean
    private ItemService mockItemService;

    @Test
    public void shouldFindImrtItem() throws Exception {
        ImrtItem imrtItem = new ImrtItemBuilder()
            .withDepthOfKnowledge("dok")
            .withGrade("3")
            .withId("someId")
            .withKey(1)
            .withSubject("ELA")
            .build();


        when(mockItemService.findItemById("someId")).thenReturn(Optional.of(imrtItem));

        String requestUri = UriComponentsBuilder.fromUriString("/items/someId")
            .build()
            .toUriString();

        http.perform(get(requestUri)
            .contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk());
    }

    @Test
    public void shouldNotFindImrtItem() throws Exception{
        when(mockItemService.findItemById("someId")).thenReturn(Optional.empty());

        String requestUri = UriComponentsBuilder.fromUriString("/items/someId")
            .build()
            .toUriString();

        http.perform(get(requestUri)
            .contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isNotFound());
    }
}
