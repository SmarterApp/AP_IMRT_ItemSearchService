package org.opentestsystem.ap.imrt.iss.dto.search;

import org.apache.commons.compress.utils.Sets;
import org.junit.Test;

import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

public class SearchPropertyTest {
    private static final Set<String> IMRT_SEARCH_PROPERTY_STRINGS = Sets.newHashSet(
            SearchFields.ITEM_ID,
            SearchFields.CREATED_BY,
            SearchFields.GRADE,
            SearchFields.SUBJECT,
            SearchFields.DOK,
            SearchFields.WORKFLOW_STATUS,
            SearchFields.ITEM_TYPE,
            SearchFields.STIMULUS_ID,
            SearchFields.DAYS_IN_WORKFLOW_STATUS,
            SearchFields.BEING_CREATED,
            SearchFields.ORG_TYPE_ID,
            SearchFields.ORG_NAME,
            SearchFields.CONTENT_TASK_MODEL,
            SearchFields.ITEM_AUTHOR,
            SearchFields.WORKFLOW_STATUS_UPDATE_DATE,
            SearchFields.CREATE_DATE,
            SearchFields.CALCULATED_FORM_COUNT,
            SearchFields.CALCULATED_EXPOSURES_COUNT,
            SearchFields.ITEM_DIFFICULTY_QUINTILE,
            SearchFields.ASL_REQUIRED,
            SearchFields.ASL_PROVIDED,
            SearchFields.BRAILLE_REQUIRED,
            SearchFields.BRAILLE_PROVIDED,
            SearchFields.CC_REQUIRED,
            SearchFields.CC_PROVIDED,
            SearchFields.TRANSLATION_REQUIRED,
            SearchFields.TRANSLATION_PROVIDED,
            SearchFields.WRITING_PURPOSE,
            SearchFields.PERFORMANCE_TASK,
            SearchFields.TTS_SIGHT_PROVIDED,
            SearchFields.TTS_VISUAL_PROVIDED,
            SearchFields.TTS_VISUAL_REQUIRED,
            SearchFields.FORM_TYPE,
            SearchFields.ASSESSMENT_TYPE,
            SearchFields.TEST_CATEGORY,
            SearchFields.ENGLISH_CONTENT_LAST_UPDATED_DATE,
            SearchFields.SPANISH_CONTENT_LAST_UPDATED_DATE,
            SearchFields.SCORING_ENGINE,
            SearchFields.ALLOW_CALCULATOR,
            SearchFields.UPDATED_DATE,
            SearchFields.ASL_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE,
            SearchFields.BRAILLE_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE,
            SearchFields.CLOSED_CAPTIONING_UPLOADED_PRIOR_TO_LAST_CONTENT_UPDATE,
            SearchFields.PRIMARY_CLAIM,
            SearchFields.PRIMARY_TARGET,
            SearchFields.PRIMARY_CONTENT_DOMAIN,
            SearchFields.PRIMARY_COMMON_CORE_STANDARD,
            SearchFields.SECONDARY_CLAIM,
            SearchFields.SECONDARY_TARGET,
            SearchFields.SECONDARY_CONTENT_DOMAIN,
            SearchFields.SECONDARY_COMMON_CORE_STANDARD,
            SearchFields.QUATERNARY_CLAIM,
            SearchFields.QUATERNARY_TARGET,
            SearchFields.QUATERNARY_CONTENT_DOMAIN,
            SearchFields.QUATERNARY_COMMON_CORE_STANDARD,
            SearchFields.TERTIARY_CLAIM,
            SearchFields.TERTIARY_TARGET,
            SearchFields.TERTIARY_CONTENT_DOMAIN,
            SearchFields.TERTIARY_COMMON_CORE_STANDARD,
            SearchFields.ASSOCIATED_ITEM_COUNT,
            SearchFields.ENGLISH_PASSAGES_COUNT,
            SearchFields.SPANISH_PASSAGES_COUNT,
            SearchFields.CONTENT_CHANGED_AFTER_OPERATIONAL,
            SearchFields.HAS_UNRESOLVED_UPDATE_NEED,
            SearchFields.CURRENT_UPDATE_NEED_CREATED_DATE,
            SearchFields.CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION,
            SearchFields.CURRENT_UPDATE_NEED_INTERNAL_RESOLUTION_DATE,
            SearchFields.CURRENT_UPDATE_NEED_RESOLUTION,
            SearchFields.CURRENT_UPDATE_NEED_RESOLUTION_DATE,
            SearchFields.ENGLISH_GLOSSARY_PROVIDED,
            SearchFields.ILLUSTRATED_GLOSSARY_PROVIDED,
            SearchFields.ILLUSTRATED_GLOSSARY_REQUIRED,
            SearchFields.TRANSLATED_GLOSSARY_PROVIDED,
            SearchFields.TRANSLATED_GLOSSARY_REQUIRED
    );

    @Test
    public void searchPropertyShouldMatchSearchFieds() {
        for (SearchProperty property : SearchProperty.values()) {
            assertThat(IMRT_SEARCH_PROPERTY_STRINGS).contains(property.getProperty());
        }
    }

    @Test
    public void searchFieldsShouldBeSearchProperties() {
        IMRT_SEARCH_PROPERTY_STRINGS.forEach(s -> assertThat(SearchProperty.findSearchProperty(s)).isPresent());
    }
}