package org.opentestsystem.ap.imrt.iss.controller;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.service.ItemService;
import org.opentestsystem.ap.imrt.iss.web.exception.NotFoundException;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemControllerTest {
    private ItemController itemController;

    @Mock
    private ItemService mockItemService;

    @Before
    public void setUp() {
        itemController = new ItemController(mockItemService);
    }

    @Test
    public void shouldFindAnItem() {
        ImrtItem item = new ImrtItem();
        item.setStandardIds(Collections.emptyList());

        when(mockItemService.findItemById("someId")).thenReturn(Optional.of(item));

        ItemDto dto = itemController.getItemDtoById("someId");

        assertThat(dto.getId()).isEqualTo(item.getId());
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreatedAt()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getItemType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getStandardIds()).hasSize(item.getStandardIds().size());
    }

    @Test (expected = NotFoundException.class)
    public void shouldThrowNotFoundWhenItemCannotBeFound() {
        when(mockItemService.findItemById("someId")).thenReturn(Optional.empty());
        itemController.getItemDtoById("someId");
    }

    @Test
    public void shouldFindImrtItemsByIds() {
        List<String> itemIds = Collections.singletonList("testId");
        when(mockItemService.findItemsByIds(itemIds)).thenReturn(Collections.emptyList());
        assertThat(itemController.getItemDtosByIds(itemIds)).isEmpty();

        verify(mockItemService).findItemsByIds(itemIds);
    }
}