package org.opentestsystem.ap.imrt.iss.controller;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoConverter;
import org.opentestsystem.ap.imrt.iss.service.ItemService;
import org.opentestsystem.ap.imrt.iss.web.exception.NotFoundException;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemControllerTest {
    private ItemController itemController;

    @Mock
    private ItemService mockItemService;

    @Before
    public void setUp() {
        itemController = new ItemController(mockItemService, new ItemDtoConverter());
    }

    @Test
    public void shouldFindAnItem() {
        ImrtItem item = new ImrtItem();

        when(mockItemService.findItemById("someId")).thenReturn(Optional.of(item));

        ItemDto dto = itemController.getItemDtoById("someId", false);

        assertThat(dto.getId()).isEqualTo(item.getId());
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreatedAt()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getItemType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getItemDetail()).isNotPresent();
    }

    @Test
    public void shouldFindAnItemWithDetail() {
        Item itemDetail = mock(Item.class);
        ImrtItem item = new ImrtItemBuilder().withItemJson(itemDetail).build();

        when(mockItemService.findItemById("someId")).thenReturn(Optional.of(item));

        ItemDto dto = itemController.getItemDtoById("someId", false);

        assertThat(dto.getId()).isEqualTo(item.getId());
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreatedAt()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getItemType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getItemDetail()).isNotPresent();
    }

    @Test(expected = NotFoundException.class)
    public void shouldThrowNotFoundWhenItemCannotBeFound() {
        when(mockItemService.findItemById("someId")).thenReturn(Optional.empty());
        itemController.getItemDtoById("someId", false);
    }

    @Test
    public void shouldFindImrtItemsByIds() {
        ImrtItem item = new ImrtItemBuilder().build();
        List<String> itemIds = Collections.singletonList("testId");
        when(mockItemService.findItemsByIds(itemIds)).thenReturn(Collections.singletonList(item));

        Collection<ItemDto> items = itemController.getItemDtosByIds(itemIds, false);

        verify(mockItemService).findItemsByIds(itemIds);
        assertThat(items).hasSize(1);
        ItemDto itemDto = items.iterator().next();

        assertThat(itemDto.getItemDetail()).isNotPresent();
        assertThat(itemDto.getItemType()).isEqualTo("EQ");
        assertThat(itemDto.getSubject()).isEqualTo("ELA");
        assertThat(itemDto.getGrade()).isEqualTo("3");
        assertThat(itemDto.getWorkflowStatus()).isEqualTo("Draft");
    }

    @Test
    public void shouldFindImrtItemsByIdsWithDetail() {
        Item itemDetail = mock(Item.class);
        ImrtItem item = new ImrtItemBuilder().withItemJson(itemDetail).build();
        List<String> itemIds = Collections.singletonList("testId");
        when(mockItemService.findItemsByIds(itemIds)).thenReturn(Collections.singletonList(item));

        Collection<ItemDto> items = itemController.getItemDtosByIds(itemIds, true);

        verify(mockItemService).findItemsByIds(itemIds);
        assertThat(items).hasSize(1);
        ItemDto itemDto = items.iterator().next();

        assertThat(itemDto.getItemDetail().get()).isEqualTo(itemDetail);
        assertThat(itemDto.getItemType()).isEqualTo("EQ");
        assertThat(itemDto.getSubject()).isEqualTo("ELA");
        assertThat(itemDto.getGrade()).isEqualTo("3");
        assertThat(itemDto.getWorkflowStatus()).isEqualTo("Draft");
    }
}