package org.opentestsystem.ap.imrt.iss.service;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iss.config.ItemSearchServiceProperties;
import org.opentestsystem.ap.imrt.iss.dto.ItemSearchResult;
import org.opentestsystem.ap.imrt.iss.dto.SearchResults;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.IdMatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IntegerRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.repository.GeneralSearchRepository;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemSearchServiceImplTest {
    @Mock
    private GeneralSearchRepository mockGeneralSearchRepository;

    private ItemSearchServiceImpl itemSearchService;

    private Sort sort;
    private PageDto page;

    @Captor
    private ArgumentCaptor<List<SearchFilter>> filterCaptor;

    @Captor
    private ArgumentCaptor<List<Sort>> sortsCaptor;

    @Before
    public void setUp() {
        ItemSearchServiceProperties properties = new ItemSearchServiceProperties();
        properties.setMaxSearchResults(1000);
        itemSearchService = new ItemSearchServiceImpl(mockGeneralSearchRepository, properties);
        page = new PageDto(10, 0);
        sort = new Sort(SearchProperty.ITEM_ID.getProperty(), Sort.Direction.DESC);
    }

    @Test
    public void shouldReturnEmptySearchResultForInvalidFilters() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("ABBC"));

        SearchResults<ItemSearchResult> results = itemSearchService.searchItems(Collections.singletonList(filter), sort, page);

        verifyZeroInteractions(mockGeneralSearchRepository);

        assertThat(results.getResults()).isEmpty();
        assertThat(results.getPage()).isEqualTo(page);
        assertThat(results.getTotalResults()).isZero();
    }


    @Test
    public void shouldReturnEmptyCountResultForInvalidFilters() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("ABBC"));

        Optional<Map<String, Long>> counts = itemSearchService.getCounts(Collections.singletonList(filter), SearchProperty.PRIMARY_CLAIM);

        verifyZeroInteractions(mockGeneralSearchRepository);

        assertThat(counts).isNotPresent();
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenPageSizeLessThanOne() {
        PageDto page = new PageDto(-1, 1);

        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("123"));

        itemSearchService.searchItems(Collections.singletonList(filter), sort, page);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenPageSizeGreaterThanOneThousand() {
        PageDto page = new PageDto(10000, 1);

        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("123"));

        itemSearchService.searchItems(Collections.singletonList(filter), sort, page);
    }

    @Test
    public void shouldReturnEmptySearchResultWhenNoRecordsFound() {
        List<SearchFilter> filters = Collections.singletonList(new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("123")));

        when(mockGeneralSearchRepository.getTotalItemsCount(filters)).thenReturn(0);

        SearchResults<ItemSearchResult> results = itemSearchService.searchItems(filters, sort, page);

        assertThat(results.getResults()).isEmpty();
        assertThat(results.getPage()).isEqualTo(page);
        assertThat(results.getTotalResults()).isZero();
    }

    @Test
    public void shouldReturnSearchResult() {
        List<SearchFilter> filters = Collections.singletonList(new IntegerRangeSearchFilter(SearchProperty.DAYS_IN_WORKFLOW_STATUS, 1, 10));
        ItemSearchResult itemDto = ItemSearchResult.builder().build();
        when(mockGeneralSearchRepository.getTotalItemsCount(filters)).thenReturn(1);
        when(mockGeneralSearchRepository.findSlice(isA(PageDto.class), sortsCaptor.capture(), filterCaptor.capture())).thenReturn(Collections.singletonList(itemDto));
        SearchResults<ItemSearchResult> results = itemSearchService.searchItems(filters, sort, page);

        assertThat(results.getResults()).containsExactly(itemDto);
        assertThat(results.getPage()).isEqualTo(page);
        assertThat(results.getTotalResults()).isEqualTo(1);
        assertThat(filterCaptor.getValue()).isEqualTo(filters);

        List<Sort> sorts = sortsCaptor.getValue();

        assertThat(sorts).hasSize(1);
        assertThat(sorts.get(0).getDirection()).isEqualTo(sort.getDirection());
        assertThat(sorts.get(0).getSearchProperty()).isEqualTo(sort.getSearchProperty());
    }

    @Test
    public void shouldHandleDaysInWorkflowStatusSort() {
        List<SearchFilter> filters = Collections.singletonList(new IntegerRangeSearchFilter(SearchProperty.DAYS_IN_WORKFLOW_STATUS, 1, 10));
        ItemSearchResult itemDto = ItemSearchResult.builder().build();
        Sort sort = new Sort(SearchProperty.DAYS_IN_WORKFLOW_STATUS.getProperty(), Sort.Direction.ASC);

        when(mockGeneralSearchRepository.getTotalItemsCount(filters)).thenReturn(1);
        when(mockGeneralSearchRepository.findSlice(isA(PageDto.class), sortsCaptor.capture(), filterCaptor.capture())).thenReturn(Collections.singletonList(itemDto));
        SearchResults<ItemSearchResult> results = itemSearchService.searchItems(filters, sort, page);

        assertThat(results.getResults()).containsExactly(itemDto);
        assertThat(results.getPage()).isEqualTo(page);
        assertThat(results.getTotalResults()).isEqualTo(1);
        assertThat(filterCaptor.getValue()).isEqualTo(filters);

        List<Sort> sorts = sortsCaptor.getValue();

        assertThat(sorts).hasSize(1);
        assertThat(sorts.get(0).getDirection()).isEqualTo(Sort.Direction.DESC);
        assertThat(sorts.get(0).getSearchProperty()).isEqualTo(sort.getSearchProperty());
    }

    @Test
    public void shouldReturnCounts() {
        List<SearchFilter> filters = Collections.singletonList(new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("123")));
        Map<String, Long> counts = new HashMap<>();
        counts.put("1", 23L);
        when(mockGeneralSearchRepository.getGroupCounts(SearchProperty.PRIMARY_CLAIM, filters)).thenReturn(counts);

        Optional<Map<String, Long>> maybeCounts = itemSearchService.getCounts(filters, SearchProperty.PRIMARY_CLAIM);

        assertThat(maybeCounts).isPresent();
        assertThat(maybeCounts.get()).isEqualTo(counts);
    }
}