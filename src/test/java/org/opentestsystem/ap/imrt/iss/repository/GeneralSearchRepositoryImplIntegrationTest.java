package org.opentestsystem.ap.imrt.iss.repository;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoModelConverter;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.BooleanFlagSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.ContainsSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IdMatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SortQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CONTENT_TASK_MODEL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class GeneralSearchRepositoryImplIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private GeneralSearchRepositoryImpl generalSearchRepository;

    @Autowired
    private ItemDtoModelConverter converter;

    private PageDto defaultPage;
    private SortQuery defaultSortQuery;

    @Before
    public void setUp() {
        defaultPage = new PageDto(10, 0);
        defaultSortQuery = new SortQuery(SearchProperty.ITEM_ID, Sort.Direction.DESC);
    }

    @Test
    public void shouldSearchMatchFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        MatchSearchFilter gradeFilter = new MatchSearchFilter(INTENDED_GRADE.getProperty(), Collections.singletonList("3"));

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(gradeFilter));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        assertThat(slice).hasSize(1);

        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchIdMatchFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        IdMatchSearchFilter gradeFilter = new IdMatchSearchFilter(SearchProperty.ITEM_ID.getProperty(), Arrays.asList("123", "345"));

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(gradeFilter));
        assertThat(slice).hasSize(2);
        assertThat(slice).extracting(ItemDto::getId).containsExactly("345", "123");

        gradeFilter = new IdMatchSearchFilter(SearchProperty.ITEM_ID.getProperty(), Collections.singletonList("123"));
        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(gradeFilter));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        assertThat(slice).hasSize(1);

        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchBooleanFlagFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        BooleanFlagSearchFilter flagFilter = new BooleanFlagSearchFilter(BEING_CREATED.getProperty(), Boolean.FALSE);

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(flagFilter));

        ImrtItem persistedItem = imrtItemRepository.findById(item2.getId());
        assertThat(slice).hasSize(1);

        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchContainsFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .withContentTaskModel("tAsk MOdel")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withContentTaskModel("Something")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(56)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withContentTaskModel("")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2, item3));

        ContainsSearchFilter filter = new ContainsSearchFilter(CONTENT_TASK_MODEL.getProperty(), Collections.singletonList("task"));

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(filter));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new ContainsSearchFilter(CONTENT_TASK_MODEL.getProperty(), Collections.singletonList("task"), true);
        ImrtItem emptyModelPersistedItem = imrtItemRepository.findById(item3.getId());

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(filter));

        assertThat(slice).hasSize(2);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
        assertThat(slice.get(1)).isEqualToComparingFieldByField(converter.convert(emptyModelPersistedItem));

        filter = new ContainsSearchFilter(CONTENT_TASK_MODEL.getProperty(), Arrays.asList("task", "some"), true);
        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSortQuery), Collections.singletonList(filter));

        assertThat(slice).hasSize(3);
    }
}