package org.opentestsystem.ap.imrt.iss.repository;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.imrt.common.model.Form;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.FormBuilder;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoModelConverter;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.BooleanFlagSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.ContainsSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.DateRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.DaysBetweenSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.FormMatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IdMatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IntegerRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ASSESSMENT_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.CONTENT_TASK_MODEL;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.WORKFLOW_STATUS_UPDATE_DATE;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class GeneralSearchRepositoryImplIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private GeneralSearchRepositoryImpl generalSearchRepository;

    @Autowired
    private ItemDtoModelConverter converter;

    private PageDto defaultPage;
    private Sort defaultSort;

    @Before
    public void setUp() {
        defaultPage = new PageDto(10, 0);
        defaultSort = new Sort(SearchProperty.ITEM_ID.getProperty(), Sort.Direction.DESC);
    }

    @Test
    public void shouldSearchMatchFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        MatchSearchFilter gradeFilter = new MatchSearchFilter(INTENDED_GRADE, Collections.singletonList("3"));

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(gradeFilter));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        assertThat(slice).hasSize(1);

        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchIdMatchFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        IdMatchSearchFilter gradeFilter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Arrays.asList("123", "345"));

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(gradeFilter));
        assertThat(slice).hasSize(2);
        assertThat(slice).extracting(ItemDto::getId).containsExactly("345", "123");

        gradeFilter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Collections.singletonList("123"));
        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(gradeFilter));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        assertThat(slice).hasSize(1);

        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchBooleanFlagFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        BooleanFlagSearchFilter flagFilter = new BooleanFlagSearchFilter(BEING_CREATED, Boolean.FALSE);

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(flagFilter));

        ImrtItem persistedItem = imrtItemRepository.findById(item2.getId());
        assertThat(slice).hasSize(1);

        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchContainsFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .withContentTaskModel("tAsk MOdel")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withContentTaskModel("Something")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(56)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withContentTaskModel("")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2, item3));

        ContainsSearchFilter filter = new ContainsSearchFilter(CONTENT_TASK_MODEL, Collections.singletonList("task"));

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new ContainsSearchFilter(CONTENT_TASK_MODEL, Collections.singletonList("task"), true);
        ImrtItem emptyModelPersistedItem = imrtItemRepository.findById(item3.getId());

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(2);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
        assertThat(slice.get(1)).isEqualToComparingFieldByField(converter.convert(emptyModelPersistedItem));

        filter = new ContainsSearchFilter(CONTENT_TASK_MODEL, Arrays.asList("task", "some"), true);
        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(3);
    }

    @Test
    public void shouldSearchDates() {
        Instant early = Instant.now().minus(30, ChronoUnit.DAYS);
        Instant late = Instant.now().plus(30, ChronoUnit.DAYS);

        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .withContentTaskModel("tAsk MOdel")
                .withWorkflowStatusSetAt(early)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withWorkflowStatusSetAt(late)
                .withContentTaskModel("Something")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));

        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        ImrtItem persistedItem2 = imrtItemRepository.findById(item2.getId());

        DateRangeSearchFilter filter = new DateRangeSearchFilter(WORKFLOW_STATUS_UPDATE_DATE, null, Instant.now());

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem2));

        filter = new DateRangeSearchFilter(WORKFLOW_STATUS_UPDATE_DATE, Instant.now(), null);

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new DateRangeSearchFilter(WORKFLOW_STATUS_UPDATE_DATE, Instant.now().plus(1000, ChronoUnit.DAYS), Instant.now().minus(1000, ChronoUnit.DAYS));

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(2);
    }

    @Test
    public void shouldSearchIntegerRange() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .withFormCount(1)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withFormCount(23)
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(1)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withFormCount(null)
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2, item3));
        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        ImrtItem persistedItem2 = imrtItemRepository.findById(item2.getId());
        ImrtItem persistedItem3 = imrtItemRepository.findById(item3.getId());

        IntegerRangeSearchFilter filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, 2, null);

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem2));

        filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, null, 22);

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));


        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, 1, 50);

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(2);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem2));
        assertThat(slice.get(1)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new IntegerRangeSearchFilter(CALCULATED_FORM_COUNT, 1, 50, true);

        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(3);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem2));
        assertThat(slice.get(1)).isEqualToComparingFieldByField(converter.convert(persistedItem));
        assertThat(slice.get(2)).isEqualToComparingFieldByField(converter.convert(persistedItem3));
    }

    @Test
    public void shouldSearchDaysInWorkflowStatus() {
        Instant early = Instant.now().minus(30, ChronoUnit.DAYS);
        Instant earlier = Instant.now().minus(60, ChronoUnit.DAYS);

        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .withContentTaskModel("tAsk MOdel")
                .withWorkflowStatusSetAt(early)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withBeingCreated(false)
                .withSubject("MATH")
                .withWorkflowStatusSetAt(earlier)
                .withContentTaskModel("Something")
                .build();

        imrtItemRepository.save(Arrays.asList(item, item2));
        ImrtItem persistedItem = imrtItemRepository.findById(item.getId());
        ImrtItem persistedItem2 = imrtItemRepository.findById(item2.getId());

        DaysBetweenSearchFilter filter = new DaysBetweenSearchFilter(DAYS_IN_WORKFLOW_STATUS, 30, 45);

        List<ItemDto> slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new DaysBetweenSearchFilter(DAYS_IN_WORKFLOW_STATUS, 30, null);
        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(2);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem2));
        assertThat(slice.get(1)).isEqualToComparingFieldByField(converter.convert(persistedItem));

        filter = new DaysBetweenSearchFilter(DAYS_IN_WORKFLOW_STATUS, null, 35);
        slice = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));

        assertThat(slice).hasSize(1);
        assertThat(slice.get(0)).isEqualToComparingFieldByField(converter.convert(persistedItem));
    }

    @Test
    public void shouldSearchForFormMatchSearchFilters() {
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .build();

        final ImrtItem fourthItem = new ImrtItemBuilder()
                .withId(777)
                .withItemJson(ms3)
                .build();

        Form form = new FormBuilder()
                .withItem(secondItem)
                .withFormType("Operational")
                .withAssessmentType("Interim")
                .build();

        secondItem.setForms(Collections.singletonList(form));

        Form form2 = new FormBuilder()
                .withItem(thirdItem)
                .withAssessmentType("Summative")
                .withFormType("Field Test")
                .build();

        thirdItem.setForms(Collections.singletonList(form2));

        Form form3 = new FormBuilder()
                .withItem(fourthItem)
                .withFormType("")
                .withAssessmentType("")
                .build();

        fourthItem.setForms(Collections.singletonList(form3));

        imrtItemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem, fourthItem));

        FormMatchSearchFilter filter = new FormMatchSearchFilter(SearchProperty.FORM_TYPE, Arrays.asList("Operational", "Field Test"));

        List<ItemDto> result = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));
        assertThat(result).extracting(ItemDto::getId).containsExactly("555", "456");

        filter = new FormMatchSearchFilter(ASSESSMENT_TYPE, Collections.singletonList("Interim"));

        result = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));
        assertThat(result).extracting(ItemDto::getId).containsExactly("456");

        filter = new FormMatchSearchFilter(ASSESSMENT_TYPE, Arrays.asList("Interim", "Summative"), true);

        result = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));
        assertThat(result).extracting(ItemDto::getId).containsExactly("777", "555", "456", "123");

        filter = new FormMatchSearchFilter(ASSESSMENT_TYPE, Collections.emptyList(), true);

        result = generalSearchRepository.findSlice(defaultPage, Collections.singletonList(defaultSort), Collections.singletonList(filter));
        assertThat(result).extracting(ItemDto::getId).containsExactly("777", "123");
    }

    @Test
    public void shouldFindTotalSearchResultsCount() {
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .build();

        final ImrtItem fourthItem = new ImrtItemBuilder()
                .withId(777)
                .withItemJson(ms3)
                .build();

        Form form = new FormBuilder()
                .withItem(secondItem)
                .withFormType("Operational")
                .withAssessmentType("Interim")
                .build();

        secondItem.setForms(Collections.singletonList(form));

        Form form2 = new FormBuilder()
                .withItem(thirdItem)
                .withAssessmentType("Summative")
                .withFormType("Field Test")
                .build();

        thirdItem.setForms(Collections.singletonList(form2));

        Form form3 = new FormBuilder()
                .withItem(fourthItem)
                .withFormType("")
                .withAssessmentType("")
                .build();

        fourthItem.setForms(Collections.singletonList(form3));

        imrtItemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem, fourthItem));

        FormMatchSearchFilter filter = new FormMatchSearchFilter(ASSESSMENT_TYPE, Arrays.asList("Interim", "Summative"), true);

        int count = generalSearchRepository.getTotalItemsCount(Collections.singletonList(filter));
        assertThat(count).isEqualTo(4);
    }

    @Test
    public void shouldGetGroupByCount() {
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemType("mc")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemType("mc")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withItemType("ms")
                .build();

        final ImrtItem fourthItem = new ImrtItemBuilder()
                .withId(777)
                .withItemJson(ms3)
                .withItemType("eq")
                .build();

        imrtItemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem, fourthItem));

        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.ITEM_ID, Arrays.asList("123", "456", "555", "777"));

        Map<String, Long> counts = generalSearchRepository.getGroupCounts(SearchProperty.ITEM_TYPE, Collections.singletonList(filter));

        assertThat(counts).hasSize(3);
        assertThat(counts).containsEntry("mc", 2L);
        assertThat(counts).containsEntry("ms", 1L);
        assertThat(counts).containsEntry("eq", 1L);
    }
}