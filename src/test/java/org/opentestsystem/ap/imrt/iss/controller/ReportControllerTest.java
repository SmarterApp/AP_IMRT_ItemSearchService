package org.opentestsystem.ap.imrt.iss.controller;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.exception.NotFoundException;
import org.opentestsystem.ap.common.model.admin.AuthenticatedUserModel;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.opentestsystem.ap.imrt.iss.core.mapper.PermissionsMapper;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.GapReportRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SearchPermissions;
import org.opentestsystem.ap.imrt.iss.service.GapReportService;
import org.springframework.core.io.FileSystemResource;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SUBJECT;

@RunWith(MockitoJUnitRunner.class)
public class ReportControllerTest {
    @Mock
    private GapReportService mockGapReportService;

    @Mock
    private ModelConverter<Filter, SearchFilter> mockSearchFilterModelConverter;

    @Mock
    private HttpServletResponse mockHttpServletResponse;

    @Mock
    private SecurityUtil securityUtil;

    @Mock
    private PermissionsMapper mapper;

    @Mock
    private ReportController reportController;

    @Captor
    private ArgumentCaptor<SearchPermissions> searchPermissionsArgumentCaptor;

    @Before
    public void setUp() {
        reportController = new ReportController(mockGapReportService, mockSearchFilterModelConverter, securityUtil,
            mapper);

        when(securityUtil.getAuthenticatedUser()).thenReturn(new AuthenticatedUserModel());
        when(mapper.transform(isA(AuthenticatedUserModel.class))).thenReturn(mock(SearchPermissions.class));
    }

    @Test
    public void shouldReturnAGapReportFile() {
        final Filter subjectFilter = new MatchFilter(SUBJECT.getProperty(),
            false,
            Collections.singletonList("ELA"));
        final SearchFilter subjectSearchFilter = new MatchSearchFilter(SUBJECT,
            ((MatchFilter) subjectFilter).getValues());

        final List<String> groups = Arrays.asList(SUBJECT.getProperty(),
            INTENDED_GRADE.getProperty(),
            ITEM_TYPE.getProperty());
        final List<SearchProperty> groupProperties = Arrays.asList(SUBJECT, INTENDED_GRADE, ITEM_TYPE);
        final GapReportRequest gapReportRequest = new GapReportRequest(Collections.singletonList(subjectFilter),
            groups);

        when(mockSearchFilterModelConverter.convert(Collections.singletonList(subjectFilter)))
            .thenReturn(Collections.singletonList(subjectSearchFilter));
        when(mockGapReportService
            .getGapReport(searchPermissionsArgumentCaptor.capture(),  isA(List.class),
                isA(List.class)))
            .thenReturn(Optional.of(new File("gap-report-test.xlsx")));

        final FileSystemResource result = reportController.getGapReport(gapReportRequest, mockHttpServletResponse);

        verify(mockSearchFilterModelConverter).convert(Collections.singletonList(subjectFilter));
        verify(mockGapReportService).getGapReport(isA(SearchPermissions.class),  isA(Collection.class),
            isA(Collection.class));

        assertThat(result).isNotNull();
    }

    @Test(expected = NotFoundException.class)
    public void shouldThrowNotFoundExceptionWhenFileIsNotFound() {
        final Filter subjectFilter = new MatchFilter(SUBJECT.getProperty(),
            false,
            Collections.singletonList("ELA"));
        final SearchFilter subjectSearchFilter = new MatchSearchFilter(SUBJECT,
            ((MatchFilter) subjectFilter).getValues());

        final List<String> groups = Arrays.asList(SUBJECT.getProperty(),
            INTENDED_GRADE.getProperty(),
            ITEM_TYPE.getProperty());
        final List<SearchProperty> groupProperties = Arrays.asList(SUBJECT, INTENDED_GRADE, ITEM_TYPE);
        final GapReportRequest gapReportRequest = new GapReportRequest(Collections.singletonList(subjectFilter),
            groups);

        when(mockSearchFilterModelConverter.convert(Collections.singletonList(subjectFilter)))
            .thenReturn(Collections.singletonList(subjectSearchFilter));
        when(mockGapReportService
            .getGapReport(searchPermissionsArgumentCaptor.capture(), isA(List.class),
                isA(List.class)))
            .thenReturn(Optional.empty());

        reportController.getGapReport(gapReportRequest, mockHttpServletResponse);

        verify(mockSearchFilterModelConverter).convert(Collections.singletonList(subjectFilter));
        verify(mockGapReportService)
            .getGapReport(isA(SearchPermissions.class),  isA(List.class),
                isA(List.class));
    }
}
