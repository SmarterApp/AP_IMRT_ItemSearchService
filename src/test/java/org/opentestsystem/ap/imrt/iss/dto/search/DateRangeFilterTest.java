package org.opentestsystem.ap.imrt.iss.dto.search;

import org.junit.Test;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.UPDATED_DATE;

public class DateRangeFilterTest {
    @Test
    public void filterCanBeCreated() {
        Instant toDate = Instant.now();
        Instant fromDate = Instant.now();
        DateRangeFilter filter = new DateRangeFilter(UPDATED_DATE.getProperty(), false, toDate, fromDate);
        assertThat(filter.getTo()).isPresent();
        assertThat(filter.getFrom()).isPresent();
        assertThat(filter.getTo().get()).isEqualTo(toDate);
        assertThat(filter.getFrom().get()).isEqualTo(fromDate);
    }

    @Test
    public void shouldCreateADateRangeFilterWhenOnlyToDateIsSet() {
        final DateRangeFilter filter = new DateRangeFilter(UPDATED_DATE.getProperty(), false, Instant.now(), null);

        assertThat(filter.getTo()).isPresent();
        assertThat(filter.getFrom()).isNotPresent();
    }

    @Test
    public void shouldCreateADateRangeFilterWhenOnlyFromDateIsSet() {
        final DateRangeFilter filter = new DateRangeFilter(UPDATED_DATE.getProperty(), false, null, Instant.now());

        assertThat(filter.getTo()).isNotPresent();
        assertThat(filter.getFrom()).isPresent();
    }

    @Test
    public void shouldCreateADateRangeFilterWhenNeitherDateIsSet() {
        final DateRangeFilter filter = new DateRangeFilter(UPDATED_DATE.getProperty(), false, null, null);

        assertThat(filter.getTo()).isNotPresent();
        assertThat(filter.getFrom()).isNotPresent();
    }
}