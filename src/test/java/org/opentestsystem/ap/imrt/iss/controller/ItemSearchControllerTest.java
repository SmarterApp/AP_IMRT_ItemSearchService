package org.opentestsystem.ap.imrt.iss.controller;

import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iss.dto.CountResultDto;
import org.opentestsystem.ap.imrt.iss.dto.ItemDto;
import org.opentestsystem.ap.imrt.iss.dto.SearchResults;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.ModelConverter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.service.ItemSearchService;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static java.util.Collections.emptyList;
import static java.util.Collections.singletonList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_TYPE;

@RunWith(MockitoJUnitRunner.class)
public class ItemSearchControllerTest {
    @Mock
    private ItemSearchService itemSearchService;

    @Mock
    private ModelConverter<Filter, SearchFilter> searchFilterMapper;

    private ItemSearchController itemSearchController;

    @Before
    public void setUp() {
        itemSearchController = new ItemSearchController(itemSearchService, searchFilterMapper);
    }

    @Test
    public void shouldSearchItems() {
        Sort sort = new Sort(INTENDED_GRADE.getProperty(), Sort.Direction.ASC);
        PageDto pageDto = new PageDto(1, 0);
        SearchRequest searchRequest = new SearchRequest(
                Collections.emptyList(),
                sort,
                pageDto
        );

        SearchResults<ItemDto> itemDtoSearchResults = new SearchResults<>(Collections.singletonList(ItemDto.builder().build()), 1, pageDto);

        when(itemSearchService.searchItems(emptyList(), sort, pageDto)).thenReturn(itemDtoSearchResults);

        assertThat(itemSearchController.search(searchRequest).getResults()).hasSize(1);
    }

    @Test
    public void shouldGetCounts() {
        Map<String, Long> counts = new HashMap<>();
        Filter matchFilter = new MatchFilter(ITEM_TYPE.getProperty(), false, singletonList("ms"));
        SearchFilter matchSearchFilter = new MatchSearchFilter(ITEM_TYPE, singletonList("ms"));
        CountRequest countRequest = new CountRequest(singletonList(matchFilter), ITEM_TYPE.getProperty());
        counts.put("2", 10L);
        counts.put("3", 23L);

        when(searchFilterMapper.convert(singletonList(matchFilter))).thenReturn(singletonList(matchSearchFilter));
        when(itemSearchService.getCounts(singletonList(matchSearchFilter), ITEM_TYPE)).thenReturn(Optional.of(counts));

        CountResultDto dto = itemSearchController.getCountByProperty(countRequest);
        assertThat(dto.getGroupBy()).isEqualTo("type");
        assertThat(dto.getTotalCount()).isEqualTo(33);
        assertThat(dto.getCounts()).hasSize(2);
        assertThat(dto.getCounts().get(0).getValue()).isEqualTo("2");
        assertThat(dto.getCounts().get(0).getCount()).isEqualTo(10);
        assertThat(dto.getCounts().get(1).getValue()).isEqualTo("3");
        assertThat(dto.getCounts().get(1).getCount()).isEqualTo(23);
    }

    @Test
    public void shouldIgnoreInvalidGroupByCounts() {
        Filter matchFilter = new MatchFilter(ITEM_TYPE.getProperty(), false, singletonList("ms"));
        SearchFilter matchSearchFilter = new MatchSearchFilter(ITEM_TYPE, singletonList("ms"));
        CountRequest countRequest = new CountRequest(singletonList(matchFilter), ITEM_TYPE.getProperty());
        when(searchFilterMapper.convert(singletonList(matchFilter))).thenReturn(singletonList(matchSearchFilter));
        when(itemSearchService.getCounts(singletonList(matchSearchFilter), ITEM_TYPE)).thenReturn(Optional.empty());

        CountResultDto dto = itemSearchController.getCountByProperty(countRequest);
        assertThat(dto.getCounts()).isEmpty();
        assertThat(dto.getGroupBy()).isEqualTo("type");
        assertThat(dto.getTotalCount()).isEqualTo(0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidRequest() {
        SearchRequest searchRequest = new SearchRequest(Lists.emptyList(), null, null);

        itemSearchController.search(searchRequest);
    }
}