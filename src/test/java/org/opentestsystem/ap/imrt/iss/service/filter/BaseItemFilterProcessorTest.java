package org.opentestsystem.ap.imrt.iss.service.filter;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iss.model.DateRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.DaysBetweenSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IntegerRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_TYPE;

public class BaseItemFilterProcessorTest {
    private BaseItemFilterProcessor processor;

    @Before
    public void setUp() {
        processor = new BaseItemFilterProcessor(mock(OperationalEventService.class));
    }

    @Test
    public void shouldReturnMatchSpecification() {
        MatchSearchFilter matchFilter = new MatchSearchFilter(ITEM_TYPE, Collections.singletonList("eq"));

        assertThat(processor.processFilter(matchFilter)).isPresent();
    }

    @Test
    public void shouldReturnNumberRangeSpecification() {
        MatchSearchFilter matchFilter = new MatchSearchFilter(ITEM_TYPE, Collections.singletonList("eq"));

        assertThat(processor.processFilter(matchFilter)).isPresent();
    }

    /**
     * When min and max are passed in a between half-open filter specification is returned
     */
    @Test
    public void shouldReturnDaysRangeBetweenSpecification() {
        IntegerRangeSearchFilter numberOfDaysRangeFilter = new IntegerRangeSearchFilter(DAYS_IN_WORKFLOW_STATUS, 1, 5);

        assertThat(processor.processFilter(numberOfDaysRangeFilter)).isPresent();
    }

    /**
     * When min is null and max is passed in, a greater-than-or-equal-to specification is returned.
     */
    @Test
    public void shouldReturnDaysRangeGreaterThanOrEqualToSpecification() {
        DaysBetweenSearchFilter numberOfDaysRangeFilter = new DaysBetweenSearchFilter(DAYS_IN_WORKFLOW_STATUS, 5, null);

        assertThat(processor.processFilter(numberOfDaysRangeFilter)).isPresent();
    }

    @Test
    public void shouldReturnGreaterThanOrEqualToDateRangeSearchFilterSpecificationWhenFromDateIsSet() {
        final DateRangeSearchFilter greaterThanOrEqualToDateFilter = new DateRangeSearchFilter("createDate",
                null,
                Instant.now().minus(100, ChronoUnit.DAYS));

        assertThat(processor.processFilter(greaterThanOrEqualToDateFilter)).isPresent();
    }

    @Test
    public void shouldReturnLessThanOrEqualToDateRangeSearchFilterSpecificationWhenToDateIsSet() {
        final DateRangeSearchFilter lessThanOrEqualToDateFilter = new DateRangeSearchFilter("createDate",
                Instant.now().plus(100, ChronoUnit.DAYS),
                null);

        assertThat(processor.processFilter(lessThanOrEqualToDateFilter)).isPresent();
    }

    @Test
    public void shouldReturnBetweenDateRangeSearchFilterSpecificationWhenFromAndToDateAreSet() {
        final DateRangeSearchFilter betweenDatesFilter = new DateRangeSearchFilter("createDate",
                Instant.now().minus(100, ChronoUnit.DAYS),
                Instant.now().plus(100, ChronoUnit.DAYS));

        assertThat(processor.processFilter(betweenDatesFilter)).isPresent();
    }
}