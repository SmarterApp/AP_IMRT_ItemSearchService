package org.opentestsystem.ap.imrt.iss.service.filter;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.NumberOfDaysRangeFilter;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class BaseItemFilterProcessorTest {
    private BaseItemFilterProcessor processor;

    @Before
    public void setUp() {
        processor = new BaseItemFilterProcessor();
    }

    @Test
    public void shouldReturnEmptyForUnknownProperties() {
        MatchFilter matchFilter = new MatchFilter("bogus", Collections.singletonList("something"));

        assertThat(processor.processFilter(matchFilter)).isNotPresent();
    }

    @Test
    public void shouldReturnMatchSpecification() {
        MatchFilter matchFilter = new MatchFilter("itemType", Collections.singletonList("eq"));

        assertThat(processor.processFilter(matchFilter)).isPresent();
    }

    @Test
    public void shouldReturnNumberRangeSpecification() {
        MatchFilter matchFilter = new MatchFilter("itemType", Collections.singletonList("eq"));

        assertThat(processor.processFilter(matchFilter)).isPresent();
    }

    /**
     * When min and max are passed in a between half-open filter specification is returned
     */
    @Test
    public void shouldReturnDaysRangeBetweenSpecification() {
        NumberOfDaysRangeFilter numberOfDaysRangeFilter = new NumberOfDaysRangeFilter("workflowStatusSetAt", 1, 5);

        assertThat(processor.processFilter(numberOfDaysRangeFilter)).isPresent();
    }

    /**
     * When min is null and max is passed in, a greater-than-or-equal-to specification is returned.
     */
    @Test
    public void shouldReturnDaysRangeGreaterThanOrEqualToSpecification() {
        NumberOfDaysRangeFilter numberOfDaysRangeFilter = new NumberOfDaysRangeFilter("workflowStatusSetAt", 5, null);

        assertThat(processor.processFilter(numberOfDaysRangeFilter)).isPresent();
    }

    @Test
    public void shouldReturnEmptyForUnknownFilter() {
        Filter filter = mock(Filter.class);

        assertThat(processor.processFilter(filter)).isNotPresent();
    }
}