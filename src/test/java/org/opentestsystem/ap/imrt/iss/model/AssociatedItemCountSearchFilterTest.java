package org.opentestsystem.ap.imrt.iss.model;

import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ASSOCIATED_ITEM_COUNT;

public class AssociatedItemCountSearchFilterTest {
    private String sql = " (select count(1) from stim_link where item_key_stim = item.key) ";

    private SearchPermissions searchPermissions;

    @Before
    public void setUp() {
        searchPermissions = new SearchPermissions();
    }

    @Test
    public void shouldCreateMinQuery() {
        AssociatedItemCountSearchFilter filter = new AssociatedItemCountSearchFilter(ASSOCIATED_ITEM_COUNT, 1, null);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        final String expectedMinParamName = ASSOCIATED_ITEM_COUNT.getProperty() + "Min";
        assertThat(query.getQuery()).isEqualTo(sql + " >= :" + expectedMinParamName);
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMinParamName);
        assertThat(query.getMapSqlProperties().get(expectedMinParamName)).isEqualTo(1);
    }

    @Test
    public void shouldCreateMaxQuery() {
        AssociatedItemCountSearchFilter filter = new AssociatedItemCountSearchFilter(ASSOCIATED_ITEM_COUNT, null, 1);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        final String expectedMaxParamName = ASSOCIATED_ITEM_COUNT.getProperty() + "Max";
        assertThat(query.getQuery()).isEqualTo(sql + " <= :" + expectedMaxParamName);
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMaxParamName);
        assertThat(query.getMapSqlProperties().get(expectedMaxParamName)).isEqualTo(1);
    }

    @Test
    public void shouldCreateMinMaxQuery() {
        AssociatedItemCountSearchFilter filter = new AssociatedItemCountSearchFilter(ASSOCIATED_ITEM_COUNT, 1, 2);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        final String expectedMaxParamName = ASSOCIATED_ITEM_COUNT.getProperty() + "Max";
        final String expectedMinParamName = ASSOCIATED_ITEM_COUNT.getProperty() + "Min";
        assertThat(query.getQuery())
            .isEqualTo(sql + " BETWEEN :" + expectedMinParamName + " AND :" + expectedMaxParamName);
        assertThat(query.getMapSqlProperties()).containsKeys(expectedMinParamName, expectedMaxParamName);
        assertThat(query.getMapSqlProperties().get(expectedMinParamName)).isEqualTo(1);
        assertThat(query.getMapSqlProperties().get(expectedMaxParamName)).isEqualTo(2);
    }
}