package org.opentestsystem.ap.imrt.iss.service;

import com.google.common.collect.Sets;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.BooleanFlagFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.ContainsFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.NumberOfDaysRangeFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.repository.ImrtItemSearchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class ItemSearchServiceImplIntegrationTest {

    @Autowired
    private ItemSearchService itemSearchService;

    @Autowired
    private ImrtItemSearchRepository itemRepository;

    @Test
    public void shouldFindItems() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        MatchFilter itemIdFilter = new MatchFilter("itemId", Arrays.asList("123", "345"));

        MatchFilter gradeFilter = new MatchFilter("grade", Collections.singletonList("3"));

        SearchRequest searchCriteria = new SearchRequest(Arrays.asList(itemIdFilter, gradeFilter), null, null);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria);

        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, item.getId());

        searchCriteria = new SearchRequest(Collections.singletonList(itemIdFilter), null, null);

        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(2);

        searchCriteria = new SearchRequest(Collections.singletonList(new MatchFilter("grade", Arrays.asList("3", "4"))), null, null);

        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(2);

        searchCriteria = new SearchRequest(Collections.singletonList(new MatchFilter("grade", Arrays.asList("2", "4"))), null, null);
        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, "345");

        searchCriteria = new SearchRequest(Arrays.asList(
                new MatchFilter("grade", Arrays.asList("2", "3")),
                new MatchFilter("subject", Collections.singletonList("ELA"))
        ), null, null);

        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, "123");
    }

    @Test
    public void shouldHandleEmptySearch() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        SearchRequest searchCriteria = new SearchRequest(Collections.emptyList(), new Sort("itemId", Sort.Direction.DESC), null);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria);

        assertThat(page.getTotalElements()).isEqualTo(2);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page.iterator().next().getId()).isEqualTo("345");

        validateItemsIncludedInPage(page, "123", "345");
    }

    @Test
    public void shouldFindItemsByBeingCreatedFlag() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withBeingCreated(false)
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        BooleanFlagFilter booleanFlagFilter = new BooleanFlagFilter("beingCreated", false);
        SearchRequest searchCriteria = new SearchRequest(Collections.singletonList(booleanFlagFilter), new Sort("itemId", Sort.Direction.DESC), null);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria);

        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page.iterator().next().getId()).isEqualTo("345");

        booleanFlagFilter = new BooleanFlagFilter("beingCreated", true);
        searchCriteria = new SearchRequest(Collections.singletonList(booleanFlagFilter), new Sort("itemId", Sort.Direction.DESC), null);

        page = itemSearchService.searchItems(searchCriteria);

        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page.iterator().next().getId()).isEqualTo("123");
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForFiveDaysOrMore() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(7, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(6, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedItem = new ImrtItemBuilder()
                .withId("678")
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, excludedItem));

        final MatchFilter statusMatchFilter = new MatchFilter("workflowStatus", Collections.singletonList("Draft"));
        final NumberOfDaysRangeFilter fiveDaysOrOlderFilter = new NumberOfDaysRangeFilter("workflowStatusSetAt", 5, null);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusBetweenFiveAndTenDays() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");
        final McItem mc3 = new McItem("000");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem itemInDraftStatusForTenDays = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(10, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId("678")
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooOld = new ImrtItemBuilder()
                .withId("000")
                .withItemJson(mc3)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(15, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, itemInDraftStatusForTenDays, excludedBecauseItsTooNew, excludedBecauseItsTooOld));

        final MatchFilter statusMatchFilter = new MatchFilter("workflowStatus", Collections.singletonList("Draft"));
        final NumberOfDaysRangeFilter fiveDaysOrOlderFilter = new NumberOfDaysRangeFilter("workflowStatusSetAt", 5, 10);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForOneDayWhenMinAndMaxAreTheSameValue() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem anotherItemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId("678")
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, anotherItemInDraftStatusForFiveDays, excludedBecauseItsTooNew));

        final MatchFilter statusMatchFilter = new MatchFilter("workflowStatus", Collections.singletonList("Draft"));
        final NumberOfDaysRangeFilter fiveDaysOrOlderFilter = new NumberOfDaysRangeFilter("workflowStatusSetAt", 5, 5);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowIfSortDirectionIsNotIncluded() {
        final MatchFilter statusMatchFilter = new MatchFilter("workflowStatus", Collections.singletonList("Draft"));
        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(statusMatchFilter),
                        new Sort("itemId", null),
                        null);

        itemSearchService.searchItems(searchRequest);
    }

    @Test
    public void shouldFindAllItemsThatHaveBeenInDraftStatusToday() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem anotherItemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId("678")
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, anotherItemInDraftStatusForFiveDays, excludedBecauseItsTooNew));

        final MatchFilter statusMatchFilter = new MatchFilter("workflowStatus", Collections.singletonList("Draft"));
        final NumberOfDaysRangeFilter fiveDaysOrOlderFilter = new NumberOfDaysRangeFilter("workflowStatusSetAt", 0, 0);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldFindCountsWithoutFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        MiItem mi = new MiItem("678");

        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId("678")
                .withItemJson(mi)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2, item3));

        CountRequest countRequest = new CountRequest(Collections.emptyList(), "grade");

        Map<String, Long> counts = itemSearchService.getCounts(countRequest);

        assertThat(counts).isNotEmpty();
        assertThat(counts.get("3")).isEqualTo(1);
        assertThat(counts.get("4")).isEqualTo(2);
    }

    @Test
    public void shouldFindCountsWithFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        MiItem mi = new MiItem("678");
        MsItem ms = new MsItem("901");

        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId("678")
                .withItemJson(mi)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item4 = new ImrtItemBuilder()
                .withId("901")
                .withItemJson(ms)
                .withGrade("3")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2, item3, item4));

        MatchFilter matchFilter = new MatchFilter("subject", Collections.singletonList("MATH"));

        CountRequest countRequest = new CountRequest(Collections.singletonList(matchFilter), "grade");

        Map<String, Long> counts = itemSearchService.getCounts(countRequest);

        assertThat(counts).isNotEmpty();
        assertThat(counts.get("3")).isEqualTo(1);
        assertThat(counts.get("4")).isEqualTo(2);
    }

    @Test
    public void shouldFindItemsByOrganizationTypeId() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final MatchFilter organizationTypeIdFilter = new MatchFilter("organizationTypeId", Collections.singletonList("smarterBalanced"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(organizationTypeIdFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldFindItemsByOrganizationNameWithOneSearchCriteriaForContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("unit-test-name")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("unit-test-name")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter("organizationName", Collections.singletonList("test"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldFindItemsByOrganizationNameWithManySearchCriteriaForContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("abcd")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("wxyz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter("organizationName", Arrays.asList("abc", "xyz"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldReturnEmptyResultsWhenSearchingByOrganizationNameAndContainsFilterFindsNoMatches() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("abcd")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("wxyz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter("organizationName", Collections.singletonList("def"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(0);
        assertThat(result.getTotalPages()).isEqualTo(0);
    }

    @Test
    public void shouldDoACaseInsensitiveComparisonWithContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter("organizationName", Arrays.asList("abc", "xyz"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest);

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo("123");

        validateItemsIncludedInPage(result, "123", "345");
    }

    @Test
    public void shouldSearchStandardIdInformation() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withPrimaryClaim("p-claim")
                .withPrimaryTarget("p-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withPrimaryClaim("another-claim")
                .withPrimaryTarget("another-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        MatchFilter matchFilter = new MatchFilter("primaryClaim", Collections.singletonList("p-claim"));

        SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(matchFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest);

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(firstItem.getId());

        matchFilter = new MatchFilter("primaryAssessmentTarget", Collections.singletonList("another-target"));

        searchRequest =
                new SearchRequest(Collections.singletonList(matchFilter),
                        new Sort("itemId", Sort.Direction.ASC),
                        null);

        page = itemSearchService.searchItems(searchRequest);

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(secondItem.getId());
    }

    @Test
    public void shouldGetStandardIdCounts() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withPrimaryClaim("p-claim")
                .withPrimaryTarget("p-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withPrimaryClaim("another-claim")
                .withPrimaryTarget("another-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        CountRequest countRequest = new CountRequest(Collections.emptyList(), "primaryClaim");

        Map<String, Long> result = itemSearchService.getCounts(countRequest);

        assertThat(result).containsKeys("p-claim", "another-claim");
        assertThat(result).containsValues(1L, 1L);
    }

    private void validateItemsIncludedInPage(Page<BaseItem> page, String... itemIds) {
        Set<String> ids = Sets.newHashSet(itemIds);
        for (BaseItem baseItem : page) {
            if (!ids.contains(baseItem.getId())) {
                fail("Invalid Id in List " + ids);
            }
        }
    }
}