package org.opentestsystem.ap.imrt.iss.service;

import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.model.BooleanFlagSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.ContainsSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.DateRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.DaysBetweenSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IdMatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.IntegerRangeSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.repository.ImrtItemSearchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ASL_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ASL_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BRAILLE_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BRAILLE_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CALCULATED_EXPOSURES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CC_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CC_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CREATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.QUATERNARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.QUATERNARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SECONDARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SECONDARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.STIMULUS_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TERTIARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TERTIARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TRANSLATION_PROVIDED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.TRANSLATION_REQUIRED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS_UPDATE_DATE;
import static org.opentestsystem.ap.imrt.iss.service.filter.FilterProperty.getImrtSearchProperty;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class ItemSearchServiceImplIntegrationTest {

    @Autowired
    private ItemSearchService itemSearchService;

    @Autowired
    private ImrtItemSearchRepository itemRepository;

    private Sort defaultSort;
    private PageDto defaultPageDto;

    @Before
    public void setUp() {
        defaultSort = new Sort(ITEM_ID, Sort.Direction.ASC);
        defaultPageDto = new PageDto(1000, 0);
    }

    @Test
    public void shouldFindItems() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        IdMatchSearchFilter itemIdFilter = new IdMatchSearchFilter(getImrtSearchProperty(ITEM_ID).get(), Arrays.asList("123", "345", "123A123"));

        MatchSearchFilter gradeFilter = new MatchSearchFilter(getImrtSearchProperty(GRADE).get(), Collections.singletonList("3"));

        Page<BaseItem> page = itemSearchService.searchItems(Arrays.asList(itemIdFilter, gradeFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page).extracting(BaseItem::getId).containsExactly(item.getId());

        page = itemSearchService.searchItems(Collections.singletonList(itemIdFilter), defaultSort, defaultPageDto).get();
        assertThat(page).hasSize(2);

        page = itemSearchService.searchItems(Collections.singletonList(new MatchSearchFilter(getImrtSearchProperty(GRADE).get(), Arrays.asList("3", "4"))), defaultSort, defaultPageDto).get();
        assertThat(page).hasSize(2);

        page = itemSearchService.searchItems(Collections.singletonList(new MatchSearchFilter(getImrtSearchProperty(GRADE).get(), Arrays.asList("2", "4"))), defaultSort, defaultPageDto).get();
        assertThat(page).hasSize(1);
        assertThat(page).extracting(BaseItem::getId).containsExactly(345);

        List<SearchFilter> searchFilters = Arrays.asList(
                new MatchSearchFilter(getImrtSearchProperty(GRADE).get(), Arrays.asList("2", "3")),
                new MatchSearchFilter(getImrtSearchProperty(SUBJECT).get(), Collections.singletonList("ELA"))
        );

        page = itemSearchService.searchItems(searchFilters, defaultSort, defaultPageDto).get();
        assertThat(page).hasSize(1);
        assertThat(page).extracting(BaseItem::getId).containsExactly(123);
    }

    @Test
    public void shouldHandleEmptySearch() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        Page<BaseItem> page = itemSearchService.searchItems(Collections.emptyList(), defaultSort, defaultPageDto).get();

        assertThat(page.getTotalElements()).isEqualTo(2);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldFindItemsByBeingCreatedFlag() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withBeingCreated(false)
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        BooleanFlagSearchFilter booleanFlagFilter = new BooleanFlagSearchFilter(getImrtSearchProperty(BEING_CREATED).get(), false);

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(booleanFlagFilter), defaultSort, defaultPageDto).get();

        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page).extracting(BaseItem::getId).containsExactly(345);

        booleanFlagFilter = new BooleanFlagSearchFilter(getImrtSearchProperty(BEING_CREATED).get(), true);

        page = itemSearchService.searchItems(Collections.singletonList(booleanFlagFilter), defaultSort, defaultPageDto).get();

        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page).extracting(BaseItem::getId).containsExactly(123);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForFiveDaysOrMore() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(7, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(6, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, excludedItem));

        final MatchSearchFilter statusMatchSearchFilter = new MatchSearchFilter(getImrtSearchProperty(WORKFLOW_STATUS).get(), Collections.singletonList("Draft"));
        final DaysBetweenSearchFilter fiveDaysOrOlderFilter = new DaysBetweenSearchFilter(getImrtSearchProperty(DAYS_IN_WORKFLOW_STATUS).get(), 5, null);

        final Page<BaseItem> result = itemSearchService.searchItems(Arrays.asList(statusMatchSearchFilter, fiveDaysOrOlderFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForFiveDaysOrLess() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem firstExcludedItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(7, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondExcludedItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem includedItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(firstExcludedItem, secondExcludedItem, includedItem));

        final MatchSearchFilter statusMatchSearchFilter = new MatchSearchFilter(getImrtSearchProperty(WORKFLOW_STATUS).get(), Collections.singletonList("Draft"));
        final DaysBetweenSearchFilter fiveDaysOrOlderFilter = new DaysBetweenSearchFilter(getImrtSearchProperty(DAYS_IN_WORKFLOW_STATUS).get(), null, 5);

        final Page<BaseItem> result = itemSearchService.searchItems(Arrays.asList(statusMatchSearchFilter, fiveDaysOrOlderFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);
        assertThat(result).extracting(BaseItem::getId).containsExactly(345, 678);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusBetweenFiveAndTenDays() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");
        final McItem mc3 = new McItem("000");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem itemInDraftStatusForTenDays = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(10, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooOld = new ImrtItemBuilder()
                .withId(0)
                .withItemJson(mc3)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(15, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, itemInDraftStatusForTenDays, excludedBecauseItsTooNew, excludedBecauseItsTooOld));

        final MatchSearchFilter statusMatchSearchFilter = new MatchSearchFilter(getImrtSearchProperty(WORKFLOW_STATUS).get(), Collections.singletonList("Draft"));
        final DaysBetweenSearchFilter fiveDaysOrOlderFilter = new DaysBetweenSearchFilter(getImrtSearchProperty(DAYS_IN_WORKFLOW_STATUS).get(), 5, 10);
        final Page<BaseItem> result = itemSearchService.searchItems(Arrays.asList(statusMatchSearchFilter, fiveDaysOrOlderFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForOneDayWhenMinAndMaxAreTheSameValue() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem anotherItemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, anotherItemInDraftStatusForFiveDays, excludedBecauseItsTooNew));

        final MatchSearchFilter statusMatchSearchFilter = new MatchSearchFilter(getImrtSearchProperty(WORKFLOW_STATUS).get(), Collections.singletonList("Draft"));
        final DaysBetweenSearchFilter fiveDaysOrOlderFilter = new DaysBetweenSearchFilter(getImrtSearchProperty(DAYS_IN_WORKFLOW_STATUS).get(), 5, 5);
        final Page<BaseItem> result = itemSearchService.searchItems(Arrays.asList(statusMatchSearchFilter, fiveDaysOrOlderFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldFindAllItemsThatHaveBeenInDraftStatusToday() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem anotherItemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, anotherItemInDraftStatusForFiveDays, excludedBecauseItsTooNew));

        final MatchSearchFilter statusMatchSearchFilter = new MatchSearchFilter(getImrtSearchProperty(WORKFLOW_STATUS).get(), Collections.singletonList("Draft"));
        final DaysBetweenSearchFilter zeroDaysFilter = new DaysBetweenSearchFilter(getImrtSearchProperty(DAYS_IN_WORKFLOW_STATUS).get(), 0, 0);
        final Page<BaseItem> result = itemSearchService.searchItems(Arrays.asList(statusMatchSearchFilter, zeroDaysFilter), defaultSort, defaultPageDto).get();


        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldFindCountsWithoutFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        MiItem mi = new MiItem("678");

        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mi)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2, item3));

        Map<String, Long> counts = itemSearchService.getCounts(Collections.emptyList(), GRADE).get();

        assertThat(counts).isNotEmpty();
        assertThat(counts.get("3")).isEqualTo(1);
        assertThat(counts.get("4")).isEqualTo(2);
    }

    @Test
    public void shouldFindCountsWithFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        MiItem mi = new MiItem("678");
        MsItem ms = new MsItem("901");

        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mi)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item4 = new ImrtItemBuilder()
                .withId(901)
                .withItemJson(ms)
                .withGrade("3")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2, item3, item4));

        MatchSearchFilter matchFilter = new MatchSearchFilter(SUBJECT, Collections.singletonList("MATH"));

        Map<String, Long> counts = itemSearchService.getCounts(Collections.singletonList(matchFilter), GRADE).get();

        assertThat(counts).isNotEmpty();
        assertThat(counts.get("3")).isEqualTo(1);
        assertThat(counts.get("4")).isEqualTo(2);
    }

    @Test
    public void shouldFindItemsByOrganizationTypeId() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final MatchSearchFilter organizationTypeIdFilter = new MatchSearchFilter(getImrtSearchProperty(ORG_TYPE_ID).get(), Collections.singletonList("smarterBalanced"));

        final Page<BaseItem> result = itemSearchService.searchItems(Collections.singletonList(organizationTypeIdFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldFindItemsByOrganizationNameWithOneSearchCriteriaForContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("unit-test-name")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("unit-test-name")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsSearchFilter containsFilter =
                new ContainsSearchFilter(getImrtSearchProperty(ORG_NAME).get(), Collections.singletonList("test"));

        final Page<BaseItem> result = itemSearchService.searchItems(Collections.singletonList(containsFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldReturnEmptyResultsWhenSearchingByOrganizationNameAndContainsFilterFindsNoMatches() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("abcd")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("wxyz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsSearchFilter containsFilter =
                new ContainsSearchFilter(getImrtSearchProperty(ORG_NAME).get(), Collections.singletonList("def"));


        final Page<BaseItem> result = itemSearchService.searchItems(Collections.singletonList(containsFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(0);
        assertThat(result.getTotalPages()).isEqualTo(0);
    }

    @Test
    public void shouldDoACaseInsensitiveComparisonWithContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsSearchFilter containsFilter =
                new ContainsSearchFilter(getImrtSearchProperty(ORG_NAME).get(), Arrays.asList("abc", "xyz"));

        final Page<BaseItem> result = itemSearchService.searchItems(Collections.singletonList(containsFilter), defaultSort, defaultPageDto).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 345);
    }

    @Test
    public void shouldSearchStandardIdInformation() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withPrimaryClaim("p-claim")
                .withPrimaryTarget("p-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withPrimaryClaim("another-claim")
                .withPrimaryTarget("another-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        MatchSearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(PRIMARY_CLAIM).get(), Collections.singletonList("p-claim"));

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(matchFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(firstItem.getId());

        matchFilter = new MatchSearchFilter(getImrtSearchProperty(PRIMARY_CLAIM).get(), Collections.singletonList("another-claim"));

        page = itemSearchService.searchItems(Collections.singletonList(matchFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(secondItem.getId());
    }

    @Test
    public void shouldGetStandardIdCounts() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withPrimaryClaim("p-claim")
                .withPrimaryTarget("p-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withPrimaryClaim("another-claim")
                .withPrimaryTarget("another-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Map<String, Long> result = itemSearchService.getCounts(Collections.emptyList(), PRIMARY_CLAIM).get();

        assertThat(result).containsKeys("p-claim", "another-claim");
        assertThat(result).containsValues(1L, 1L);
    }

    @Test
    public void shouldSearchForContentTaskModel() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withContentTaskModel("444")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withContentTaskModel("999")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        MatchSearchFilter matchFilter = new MatchSearchFilter("contentTaskModel", Collections.singletonList("444"));

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(matchFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(firstItem.getId());
    }

    @Test
    public void shouldSearchForItemAuthor() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        ContainsSearchFilter containsFilter = new ContainsSearchFilter(getImrtSearchProperty(ITEM_AUTHOR).get(), Collections.singletonList("User"));

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(containsFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(2);

        assertThat(page).extracting(BaseItem::getId).containsExactly(123, 345);

        containsFilter = new ContainsSearchFilter(getImrtSearchProperty(ITEM_AUTHOR).get(), Collections.singletonList("Some"));

        page = itemSearchService.searchItems(Collections.singletonList(containsFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldFilterOnCreateDate() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        Instant longTimeAgo = Instant.now().minus(100, ChronoUnit.DAYS);
        Instant futureTime = Instant.now().plus(100, ChronoUnit.DAYS);

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .withItemCreatedAt(longTimeAgo)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .withItemCreatedAt(futureTime)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Instant longerTimeAgo = Instant.now().minus(200, ChronoUnit.DAYS);
        DateRangeSearchFilter dateRangeFilter = new DateRangeSearchFilter(getImrtSearchProperty(CREATE_DATE).get(), Instant.now(), longerTimeAgo);

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(dateRangeFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldGetItemAuthorCount() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final MsItem ms = new MsItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(ms)
                .withItemAuthor("Another User")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        Map<String, Long> counts = itemSearchService.getCounts(Collections.emptyList(), ITEM_AUTHOR).get();

        assertThat(counts).contains(new AbstractMap.SimpleEntry<>("Some User", 1L), new AbstractMap.SimpleEntry<>("Another User", 2L));
    }

    @Test
    public void shouldGetDepthOfKnowledgeCount() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final MsItem ms = new MsItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .withDepthOfKnowledge("1")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .withDepthOfKnowledge("2")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(ms)
                .withDepthOfKnowledge("2")
                .withItemAuthor("Another User")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        Map<String, Long> counts = itemSearchService.getCounts(Collections.emptyList(), DOK).get();

        assertThat(counts).contains(new AbstractMap.SimpleEntry<>("1", 1L), new AbstractMap.SimpleEntry<>("2", 2L));
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidGroupByIsSent() {
        assertThat(itemSearchService.getCounts(Lists.emptyList(), "bogus")).isNotPresent();
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidCountFilters() {
        assertThat(itemSearchService.getCounts(Collections.singletonList(new MatchSearchFilter("bogus", Collections.singletonList("a"))), "intendedGrade")).isNotPresent();
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidSearchFilterSent() {
        assertThat(itemSearchService.searchItems(Collections.singletonList(new MatchSearchFilter("bogus", Collections.singletonList("a"))), defaultSort, defaultPageDto)).isNotPresent();
    }

    @Test
    public void shouldSearchByDateRange() {
        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withItemAuthor("Some User")
                .withWorkflowStatusSetAt(Instant.now().minus(10, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withItemAuthor("Some User")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Instant to = Instant.now().minus(1, ChronoUnit.DAYS);
        Instant from = Instant.now().minus(15, ChronoUnit.DAYS);
        DateRangeSearchFilter dateRangeFilter = new DateRangeSearchFilter(getImrtSearchProperty(WORKFLOW_STATUS_UPDATE_DATE).get(), to, from);

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(dateRangeFilter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldHandleEmptyMatchSearchFilter() {
        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(new MatchSearchFilter(getImrtSearchProperty(GRADE).get(), Collections.emptyList())), defaultSort, defaultPageDto).get();
        assertThat(page).isEmpty();
    }

    @Test
    public void shouldHandleEmptyContainsFilter() {
        ContainsSearchFilter containsFilter = new ContainsSearchFilter(getImrtSearchProperty(ITEM_AUTHOR).get(), Collections.emptyList());
        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(containsFilter), defaultSort, defaultPageDto).get();
        assertThat(page).isEmpty();
    }

    @Test
    public void shouldReturnSearchResponseWhenFilterDoesNotContainValidValues() {
        SearchFilter filter = new IdMatchSearchFilter(getImrtSearchProperty(ITEM_ID).get(), Arrays.asList("123A123", "323.33"));

        assertThat(itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto)).isNotPresent();
    }

    @Test
    public void shouldThrowWhenStimulusIdsAreInvalid() {
        SearchFilter filter = new IdMatchSearchFilter(getImrtSearchProperty(STIMULUS_ID).get(), Arrays.asList("123A123", "323.33"));

        assertThat(itemSearchService.getCounts(Collections.singletonList(filter), ITEM_ID)).isNotPresent();
    }

    @Test
    public void shouldSearchByFormCount() {
        SearchFilter filter = new IntegerRangeSearchFilter(getImrtSearchProperty(CALCULATED_FORM_COUNT).get(), 1, 5);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withFormCount(3)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withFormCount(25)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);

        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldSearchByExposuresCount() {
        SearchFilter filter = new IntegerRangeSearchFilter(getImrtSearchProperty(CALCULATED_EXPOSURES_COUNT).get(), 100, 250);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withExposuresCount(200)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withExposuresCount(300)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(page).hasSize(1);

        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldSearchByItemDifficultyQuintile() {
        SearchFilter filter = new IntegerRangeSearchFilter(getImrtSearchProperty(ITEM_DIFFICULTY_QUINTILE).get(), 1, 4);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withItemDifficultyQuintile(2)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withItemDifficultyQuintile(4)
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withItemDifficultyQuintile(5)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        Sort sort = new Sort(ITEM_DIFFICULTY_QUINTILE, Sort.Direction.DESC);

        Page<BaseItem> page = itemSearchService.searchItems(Collections.singletonList(filter), sort, defaultPageDto).get();

        assertThat(page).hasSize(2);

        Integer[] ids = new Integer[2];
        int i = 0;
        for (BaseItem item : page) {
            ids[i] = item.getId();
            i++;
        }

        assertThat(ids).containsExactly(456, 123);
    }

    @Test
    public void shouldCountByItemDifficultyQuintille() {

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withItemDifficultyQuintile(2)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withItemDifficultyQuintile(4)
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withItemDifficultyQuintile(2)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        Map<String, Long> counts = itemSearchService.getCounts(Collections.emptyList(), ITEM_DIFFICULTY_QUINTILE).get();

        assertThat(counts).contains(new AbstractMap.SimpleEntry<>("4", 1L), new AbstractMap.SimpleEntry<>("2", 2L));
    }

    @Test
    public void shouldSearchByAslRequired() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(ASL_REQUIRED).get(), Collections.singletonList("true"));
        final Sort sort = new Sort(ITEM_ID, Sort.Direction.ASC);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withAslRequired("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withAslRequired("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withAslRequired("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        sort,
                        defaultPageDto)
                        .get();

        assertThat(result.getTotalElements()).isEqualTo(2L);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchByAslProvided() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(ASL_PROVIDED).get(), Collections.singletonList("true"));

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withAslProvided("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withAslProvided("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withAslProvided("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        Page<BaseItem> result = itemSearchService.searchItems(Collections.singletonList(matchFilter), defaultSort, defaultPageDto).get();
        assertThat(result).hasSize(2);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchByBrailleRequired() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(BRAILLE_REQUIRED).get(), Collections.singletonList("true"));

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withBrailleRequired("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withBrailleRequired("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withBrailleRequired("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        defaultSort,
                        defaultPageDto)
                        .get();

        assertThat(result).hasSize(2);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchBrailleProvided() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(BRAILLE_PROVIDED).get(), Collections.singletonList("true"));

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withBrailleProvided("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withBrailleProvided("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withBrailleProvided("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        defaultSort,
                        defaultPageDto)
                        .get();

        assertThat(result.getTotalElements()).isEqualTo(2L);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchClosedCaptioningRequired() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(CC_REQUIRED).get(), Collections.singletonList("true"));

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withClosedCaptioningRequired("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withClosedCaptioningRequired("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withClosedCaptioningRequired("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        defaultSort,
                        defaultPageDto)
                        .get();

        assertThat(result.getTotalElements()).isEqualTo(2L);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchClosedCaptioningProvided() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(CC_PROVIDED).get(), Collections.singletonList("true"));
        final Sort sort = new Sort(ITEM_ID, Sort.Direction.ASC);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withClosedCaptioningProvided("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withClosedCaptioningProvided("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withClosedCaptioningProvided("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        sort,
                        defaultPageDto)
                        .get();

        assertThat(result).hasSize(2);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchTranslationRequired() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(TRANSLATION_REQUIRED).get(), Collections.singletonList("true"));

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withTranslationRequired("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withTranslationRequired("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withTranslationRequired("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        defaultSort,
                        defaultPageDto)
                        .get();

        assertThat(result).hasSize(2);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchTranslationProvided() {
        final SearchFilter matchFilter = new MatchSearchFilter(getImrtSearchProperty(TRANSLATION_PROVIDED).get(), Collections.singletonList("true"));

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withTranslationProvided("true")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withTranslationProvided("true")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withTranslationProvided("false")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final Page<BaseItem> result =
                itemSearchService.searchItems(Collections.singletonList(matchFilter),
                        defaultSort,
                        defaultPageDto)
                        .get();

        assertThat(result).hasSize(2);
        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);
    }

    @Test
    public void shouldSearchOnStandardIdFields() {
        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withPrimaryClaim("claim1")
                .withPrimaryContentDomain("content1")
                .withPrimaryCommonCoreStandard("standard1")
                .withPrimaryTarget("target1")
                .withSecondaryClaim("claim2")
                .withSecondaryContentDomain("content2")
                .withSecondaryCommonCoreStandard("standard2")
                .withSecondaryTarget("target2")
                .withQuaternaryClaim("claim3")
                .withQuaternaryContentDomain("content3")
                .withQuaternaryCommonCoreStandard("standard3")
                .withQuaternaryTarget("target3")
                .withTertiaryClaim("claim4")
                .withTertiaryContentDomain("content4")
                .withTertiaryCommonCoreStandard("standard4")
                .withTertiaryTarget("target4")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withPrimaryClaim("claim1")
                .withPrimaryContentDomain("content1")
                .withPrimaryCommonCoreStandard("standard1")
                .withPrimaryTarget("target1")
                .withSecondaryClaim("claim2")
                .withSecondaryContentDomain("content2")
                .withSecondaryCommonCoreStandard("standard2")
                .withSecondaryTarget("target2")
                .withQuaternaryClaim("claim3")
                .withQuaternaryContentDomain("content3")
                .withQuaternaryCommonCoreStandard("standard3")
                .withQuaternaryTarget("target3")
                .withTertiaryClaim("claim4")
                .withTertiaryContentDomain("content4")
                .withTertiaryCommonCoreStandard("standard4")
                .withTertiaryTarget("target4")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withPrimaryClaim("claimOther1")
                .withPrimaryContentDomain("contentOther1")
                .withPrimaryCommonCoreStandard("standardOther1")
                .withPrimaryTarget("targetOther1")
                .withSecondaryClaim("claimOther2")
                .withSecondaryContentDomain("contentOther2")
                .withSecondaryCommonCoreStandard("standardOther2")
                .withSecondaryTarget("targetOther2")
                .withQuaternaryClaim("claimOther3")
                .withQuaternaryContentDomain("contentOther3")
                .withQuaternaryCommonCoreStandard("standardOther3")
                .withQuaternaryTarget("targetOther3")
                .withTertiaryClaim("claimOther4")
                .withTertiaryContentDomain("contentOther4")
                .withTertiaryCommonCoreStandard("standardOther4")
                .withTertiaryTarget("targetOther4")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        MatchSearchFilter filter = new MatchSearchFilter(getImrtSearchProperty(PRIMARY_CLAIM).get(), Collections.singletonList("claim1"));
        Page<BaseItem> result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);

        filter = new MatchSearchFilter(getImrtSearchProperty(PRIMARY_TARGET).get(), Collections.singletonList("targetOther1"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(555);

        filter = new MatchSearchFilter(getImrtSearchProperty(SECONDARY_CLAIM).get(), Collections.singletonList("claimOther2"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(555);

        filter = new MatchSearchFilter(getImrtSearchProperty(SECONDARY_TARGET).get(), Collections.singletonList("target2"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);

        filter = new MatchSearchFilter(getImrtSearchProperty(TERTIARY_CLAIM).get(), Arrays.asList("claim4", "claimOther4"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456, 555);

        filter = new MatchSearchFilter(getImrtSearchProperty(TERTIARY_TARGET).get(), Collections.singletonList("targetOther4"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(555);

        filter = new MatchSearchFilter(getImrtSearchProperty(QUATERNARY_CLAIM).get(), Collections.singletonList("claim3"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(123, 456);

        filter = new MatchSearchFilter(getImrtSearchProperty(QUATERNARY_TARGET).get(), Collections.singletonList("targetOther3"));
        result = itemSearchService.searchItems(Collections.singletonList(filter), defaultSort, defaultPageDto).get();

        assertThat(result).extracting(BaseItem::getId).containsExactly(555);
    }
}