package org.opentestsystem.ap.imrt.iss.service;

import com.google.common.collect.Sets;
import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.BooleanFlagFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.ContainsFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.CountRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.DateRangeFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.IntegerRangeFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.PageDto;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.Sort;
import org.opentestsystem.ap.imrt.iss.repository.ImrtItemSearchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.BEING_CREATED;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CALCULATED_EXPOSURES_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CALCULATED_FORM_COUNT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.CREATE_DATE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DAYS_IN_WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.DOK;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_AUTHOR;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_DIFFICULTY_QUINTILE;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_NAME;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.ORG_TYPE_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_CLAIM;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.PRIMARY_TARGET;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.STIMULUS_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS;
import static org.opentestsystem.ap.imrt.iss.dto.search.Filter.WORKFLOW_STATUS_UPDATE_DATE;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class ItemSearchServiceImplIntegrationTest {

    @Autowired
    private ItemSearchService itemSearchService;

    @Autowired
    private ImrtItemSearchRepository itemRepository;

    private Sort defaultSort;
    private PageDto defaultPageDto;

    @Before
    public void setUp() {
        defaultSort = new Sort(ITEM_ID, Sort.Direction.ASC);
        defaultPageDto = new PageDto(1000, 0);
    }

    @Test
    public void shouldFindItems() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        MatchFilter itemIdFilter = new MatchFilter(ITEM_ID, Arrays.asList("123", "345", "123A123"));

        MatchFilter gradeFilter = new MatchFilter(GRADE, Collections.singletonList("3"));

        SearchRequest searchCriteria = new SearchRequest(
                Arrays.asList(itemIdFilter, gradeFilter),
                defaultSort,
                defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria).get();

        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, item.getId());

        searchCriteria = new SearchRequest(Collections.singletonList(itemIdFilter),
                defaultSort,
                defaultPageDto);

        page = itemSearchService.searchItems(searchCriteria).get();
        assertThat(page).hasSize(2);

        searchCriteria = new SearchRequest(Collections.singletonList(new MatchFilter(GRADE,
                Arrays.asList("3", "4"))),
                defaultSort,
                defaultPageDto);

        page = itemSearchService.searchItems(searchCriteria).get();
        assertThat(page).hasSize(2);

        searchCriteria = new SearchRequest(Collections.singletonList(new MatchFilter(GRADE, Arrays.asList("2", "4"))),
                defaultSort,
                defaultPageDto);
        page = itemSearchService.searchItems(searchCriteria).get();
        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, 345);

        searchCriteria = new SearchRequest(Arrays.asList(
                new MatchFilter(GRADE, Arrays.asList("2", "3")),
                new MatchFilter(SUBJECT, Collections.singletonList("ELA"))
        ), defaultSort, defaultPageDto);

        page = itemSearchService.searchItems(searchCriteria).get();
        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, 123);
    }

    @Test
    public void shouldHandleEmptySearch() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        SearchRequest searchCriteria = new SearchRequest(Collections.emptyList(),
                new Sort(ITEM_ID, Sort.Direction.DESC),
                defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria).get();

        assertThat(page.getTotalElements()).isEqualTo(2);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page.iterator().next().getId()).isEqualTo(345);

        validateItemsIncludedInPage(page, 123, 345);
    }

    @Test
    public void shouldFindItemsByBeingCreatedFlag() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withBeingCreated(true)
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withBeingCreated(false)
                .build();

        itemRepository.save(Arrays.asList(item, item2));

        BooleanFlagFilter booleanFlagFilter = new BooleanFlagFilter(BEING_CREATED, false);
        SearchRequest searchCriteria = new SearchRequest(
                Collections.singletonList(booleanFlagFilter),
                new Sort(ITEM_ID, Sort.Direction.DESC),
                defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria).get();

        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page.iterator().next().getId()).isEqualTo(345);

        booleanFlagFilter = new BooleanFlagFilter(BEING_CREATED, true);
        searchCriteria = new SearchRequest(
                Collections.singletonList(booleanFlagFilter),
                new Sort(ITEM_ID, Sort.Direction.DESC),
                defaultPageDto);

        page = itemSearchService.searchItems(searchCriteria).get();

        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getTotalPages()).isEqualTo(1);

        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForFiveDaysOrMore() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(7, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(6, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, excludedItem));

        final MatchFilter statusMatchFilter = new MatchFilter(WORKFLOW_STATUS, Collections.singletonList("Draft"));
        final IntegerRangeFilter fiveDaysOrOlderFilter = new IntegerRangeFilter(DAYS_IN_WORKFLOW_STATUS, 5, null);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForFiveDaysOrLess() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem firstExcludedItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(7, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondExcludedItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem includedItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(firstExcludedItem, secondExcludedItem, includedItem));

        final MatchFilter statusMatchFilter = new MatchFilter(WORKFLOW_STATUS, Collections.singletonList("Draft"));
        final IntegerRangeFilter fiveDaysOrOlderFilter = new IntegerRangeFilter(DAYS_IN_WORKFLOW_STATUS, null, 5);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        validateItemsIncludedInPage(result, 678, 345);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusBetweenFiveAndTenDays() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");
        final McItem mc3 = new McItem("000");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem itemInDraftStatusForTenDays = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(10, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooOld = new ImrtItemBuilder()
                .withId(000)
                .withItemJson(mc3)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(15, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, itemInDraftStatusForTenDays, excludedBecauseItsTooNew, excludedBecauseItsTooOld));

        final MatchFilter statusMatchFilter = new MatchFilter(WORKFLOW_STATUS, Collections.singletonList("Draft"));
        final IntegerRangeFilter fiveDaysOrOlderFilter = new IntegerRangeFilter(DAYS_IN_WORKFLOW_STATUS, 5, 10);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldFindItemsThatHaveBeenInDraftStatusForOneDayWhenMinAndMaxAreTheSameValue() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem anotherItemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(5, ChronoUnit.DAYS))
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, anotherItemInDraftStatusForFiveDays, excludedBecauseItsTooNew));

        final MatchFilter statusMatchFilter = new MatchFilter(WORKFLOW_STATUS, Collections.singletonList("Draft"));
        final IntegerRangeFilter fiveDaysOrOlderFilter = new IntegerRangeFilter(DAYS_IN_WORKFLOW_STATUS, 5, 5);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldFindAllItemsThatHaveBeenInDraftStatusToday() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem mc2 = new McItem("678");

        final ImrtItem itemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem anotherItemInDraftStatusForFiveDays = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem excludedBecauseItsTooNew = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mc2)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now().minus(1, ChronoUnit.DAYS))
                .build();

        itemRepository.save(Arrays.asList(itemInDraftStatusForFiveDays, anotherItemInDraftStatusForFiveDays, excludedBecauseItsTooNew));

        final MatchFilter statusMatchFilter = new MatchFilter(WORKFLOW_STATUS, Collections.singletonList("Draft"));
        final IntegerRangeFilter fiveDaysOrOlderFilter = new IntegerRangeFilter(DAYS_IN_WORKFLOW_STATUS, 0, 0);

        final SearchRequest searchRequest =
                new SearchRequest(Arrays.asList(statusMatchFilter, fiveDaysOrOlderFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldFindCountsWithoutFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        MiItem mi = new MiItem("678");

        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mi)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2, item3));

        CountRequest countRequest = new CountRequest(Collections.emptyList(), GRADE);

        Map<String, Long> counts = itemSearchService.getCounts(countRequest).get();

        assertThat(counts).isNotEmpty();
        assertThat(counts.get("3")).isEqualTo(1);
        assertThat(counts.get("4")).isEqualTo(2);
    }

    @Test
    public void shouldFindCountsWithFilter() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        MiItem mi = new MiItem("678");
        MsItem ms = new MsItem("901");

        ImrtItem item = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item3 = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(mi)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        ImrtItem item4 = new ImrtItemBuilder()
                .withId(901)
                .withItemJson(ms)
                .withGrade("3")
                .withSubject("MATH")
                .build();

        itemRepository.save(Arrays.asList(item, item2, item3, item4));

        MatchFilter matchFilter = new MatchFilter(SUBJECT, Collections.singletonList("MATH"));

        CountRequest countRequest = new CountRequest(Collections.singletonList(matchFilter), GRADE);

        Map<String, Long> counts = itemSearchService.getCounts(countRequest).get();

        assertThat(counts).isNotEmpty();
        assertThat(counts.get("3")).isEqualTo(1);
        assertThat(counts.get("4")).isEqualTo(2);
    }

    @Test
    public void shouldFindItemsByOrganizationTypeId() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final MatchFilter organizationTypeIdFilter = new MatchFilter(ORG_TYPE_ID, Collections.singletonList("smarterBalanced"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(organizationTypeIdFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldFindItemsByOrganizationNameWithOneSearchCriteriaForContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("unit-test-name")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("unit-test-name")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter(ORG_NAME, Collections.singletonList("test"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldFindItemsByOrganizationNameWithManySearchCriteriaForContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("abcd")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("wxyz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter(ORG_NAME, Arrays.asList("abc", "xyz"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldReturnEmptyResultsWhenSearchingByOrganizationNameAndContainsFilterFindsNoMatches() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("abcd")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("wxyz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter(ORG_NAME, Collections.singletonList("def"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(0);
        assertThat(result.getTotalPages()).isEqualTo(0);
    }

    @Test
    public void shouldDoACaseInsensitiveComparisonWithContainsFilter() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        final ContainsFilter containsFilter =
                new ContainsFilter(ORG_NAME, Arrays.asList("abc", "xyz"));

        final SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        final Page<BaseItem> result = itemSearchService.searchItems(searchRequest).get();

        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getTotalPages()).isEqualTo(1);

        assertThat(result.iterator().next().getId()).isEqualTo(123);

        validateItemsIncludedInPage(result, 123, 345);
    }

    @Test
    public void shouldSearchStandardIdInformation() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withPrimaryClaim("p-claim")
                .withPrimaryTarget("p-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withPrimaryClaim("another-claim")
                .withPrimaryTarget("another-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        MatchFilter matchFilter = new MatchFilter(PRIMARY_CLAIM, Collections.singletonList("p-claim"));

        SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(matchFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(firstItem.getId());

        matchFilter = new MatchFilter(PRIMARY_TARGET, Collections.singletonList("another-target"));

        searchRequest =
                new SearchRequest(Collections.singletonList(matchFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        defaultPageDto);

        page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(secondItem.getId());
    }

    @Test
    public void shouldGetStandardIdCounts() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withWorkflowStatus("Draft")
                .withOrganizationName("ABCD")
                .withPrimaryClaim("p-claim")
                .withPrimaryTarget("p-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withWorkflowStatus("Draft")
                .withOrganizationName("WxYz")
                .withPrimaryClaim("another-claim")
                .withPrimaryTarget("another-target")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        CountRequest countRequest = new CountRequest(Collections.emptyList(), PRIMARY_CLAIM);

        Map<String, Long> result = itemSearchService.getCounts(countRequest).get();

        assertThat(result).containsKeys("p-claim", "another-claim");
        assertThat(result).containsValues(1L, 1L);
    }

    @Test
    public void shouldSearchForContentTaskModel() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withContentTaskModel("444")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withContentTaskModel("999")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        MatchFilter matchFilter = new MatchFilter("contentTaskModel", Collections.singletonList("444"));

        SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(matchFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        new PageDto(100, 0));

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(firstItem.getId());
    }

    @Test
    public void shouldSearchForItemAuthor() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        ContainsFilter containsFilter = new ContainsFilter(ITEM_AUTHOR, Collections.singletonList("User"));

        SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        new PageDto(100, 0));

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(2);

        List<Integer> ids = new ArrayList<>();
        for (BaseItem baseItem : page) {
            ids.add(baseItem.getId());
        }

        assertThat(ids).containsExactly(123, 345);

        containsFilter = new ContainsFilter(ITEM_AUTHOR, Collections.singletonList("Some"));

        searchRequest =
                new SearchRequest(Collections.singletonList(containsFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        new PageDto(100, 0));

        page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldFilterOnCreateDate() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");

        Instant longTimeAgo = Instant.now().minus(100, ChronoUnit.DAYS);
        Instant futureTime = Instant.now().plus(100, ChronoUnit.DAYS);

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .withItemCreatedAt(longTimeAgo)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .withItemCreatedAt(futureTime)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Instant longerTimeAgo = Instant.now().minus(200, ChronoUnit.DAYS);
        DateRangeFilter dateRangeFilter = new DateRangeFilter(CREATE_DATE, Instant.now(), longerTimeAgo);

        SearchRequest searchRequest =
                new SearchRequest(Collections.singletonList(dateRangeFilter),
                        new Sort(ITEM_ID, Sort.Direction.ASC),
                        new PageDto(100, 0));

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldGetItemAuthorCount() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final MsItem ms = new MsItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(ms)
                .withItemAuthor("Another User")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final CountRequest countRequest = new CountRequest(Collections.emptyList(), ITEM_AUTHOR);

        Map<String, Long> counts = itemSearchService.getCounts(countRequest).get();

        assertThat(counts).contains(new AbstractMap.SimpleEntry<>("Some User", 1L), new AbstractMap.SimpleEntry<>("Another User", 2L));
    }

    @Test
    public void shouldGetDepthOfKnowledgeCount() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final MsItem ms = new MsItem("678");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withItemAuthor("Some User")
                .withDepthOfKnowledge("1")
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withItemAuthor("Another User")
                .withDepthOfKnowledge("2")
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(678)
                .withItemJson(ms)
                .withDepthOfKnowledge("2")
                .withItemAuthor("Another User")
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        final CountRequest countRequest = new CountRequest(Collections.emptyList(), DOK);

        Map<String, Long> counts = itemSearchService.getCounts(countRequest).get();

        assertThat(counts).contains(new AbstractMap.SimpleEntry<>("1", 1L), new AbstractMap.SimpleEntry<>("2", 2L));
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidGroupByIsSent() {
        assertThat(itemSearchService.getCounts(new CountRequest(Lists.emptyList(), "bogus"))).isNotPresent();
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidCountFilters() {
        CountRequest request = new CountRequest(Collections.singletonList(new MatchFilter("bogus", Collections.singletonList("a"))), "intendedGrade");
        assertThat(itemSearchService.getCounts(request)).isNotPresent();
    }


    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowWhenInvalidSearchFilterSent() {
        SearchRequest searchRequest = new SearchRequest(Collections.singletonList(new MatchFilter("bogus", Collections.singletonList("a"))), defaultSort, defaultPageDto);
        assertThat(itemSearchService.searchItems(searchRequest)).isNotPresent();
    }

    @Test
    public void shouldSearchByDateRange() {

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withItemAuthor("Some User")
                .withWorkflowStatusSetAt(Instant.now().minus(10, ChronoUnit.DAYS))
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withItemAuthor("Some User")
                .withWorkflowStatusSetAt(Instant.now())
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Instant to = Instant.now().minus(1, ChronoUnit.DAYS);
        Instant from = Instant.now().minus(15, ChronoUnit.DAYS);
        DateRangeFilter dateRangeFilter = new DateRangeFilter(WORKFLOW_STATUS_UPDATE_DATE, to, from);

        SearchRequest searchRequest = new SearchRequest(Collections.singletonList(dateRangeFilter), defaultSort, defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();

        assertThat(page).hasSize(1);
        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldHandleEmptyMatchFilter() {
        MatchFilter matchFilter = new MatchFilter("id", Collections.emptyList());
        SearchRequest searchRequest = new SearchRequest(Collections.singletonList(matchFilter), defaultSort, defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();
        assertThat(page).isEmpty();
    }

    @Test
    public void shouldHandleEmptyContainsFilter() {
        ContainsFilter containsFilter = new ContainsFilter("itemAuthor", Collections.emptyList());
        SearchRequest searchRequest = new SearchRequest(Collections.singletonList(containsFilter), defaultSort, defaultPageDto);

        Page<BaseItem> page = itemSearchService.searchItems(searchRequest).get();
        assertThat(page).isEmpty();
    }

    private void validateItemsIncludedInPage(Page<BaseItem> page, Integer... itemIds) {
        Set<Integer> ids = Sets.newHashSet(itemIds);
        for (BaseItem baseItem : page) {
            if (!ids.contains(baseItem.getId())) {
                fail("Invalid Id in List " + ids);
            }
        }
    }

    @Test
    public void shouldReturnSearchResponseWhenFilterDoesNotContainValidValues() {
        Filter filter = new MatchFilter(ITEM_ID, Arrays.asList("123A123", "323.33"));

        assertThat(itemSearchService.searchItems(new SearchRequest(Collections.singletonList(filter), defaultSort, defaultPageDto))).isNotPresent();
    }

    @Test
    public void shouldThrowWhenStimulusIdsAreInvalid() {
        Filter filter = new MatchFilter(STIMULUS_ID, Arrays.asList("123A123", "323.33"));

        assertThat(itemSearchService.getCounts(new CountRequest(Collections.singletonList(filter), ITEM_ID))).isNotPresent();
    }

    @Test
    public void shouldSearchByFormCount() {
        Filter filter = new IntegerRangeFilter(CALCULATED_FORM_COUNT, 1, 5);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withFormCount(3)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withFormCount(25)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Page<BaseItem> page = itemSearchService.searchItems(new SearchRequest(Collections.singletonList(filter), defaultSort, defaultPageDto)).get();

        assertThat(page).hasSize(1);

        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldSearchByExposuresCount() {
        Filter filter = new IntegerRangeFilter(CALCULATED_EXPOSURES_COUNT, 100, 250);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withExposuresCount(200)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withExposuresCount(300)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem));

        Page<BaseItem> page = itemSearchService.searchItems(new SearchRequest(Collections.singletonList(filter), defaultSort, defaultPageDto)).get();

        assertThat(page).hasSize(1);

        assertThat(page.iterator().next().getId()).isEqualTo(123);
    }

    @Test
    public void shouldSearchByItemDifficultyQuintile() {
        Filter filter = new IntegerRangeFilter(ITEM_DIFFICULTY_QUINTILE, 1, 4);

        final MsItem ms = new MsItem("123");
        final MsItem ms2 = new MsItem("456");
        final MsItem ms3 = new MsItem("555");

        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(ms)
                .withItemDifficultyQuintile(2)
                .build();

        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(456)
                .withItemJson(ms2)
                .withItemDifficultyQuintile(4)
                .build();

        final ImrtItem thirdItem = new ImrtItemBuilder()
                .withId(555)
                .withItemJson(ms3)
                .withItemDifficultyQuintile(5)
                .build();

        itemRepository.save(Arrays.asList(firstItem, secondItem, thirdItem));

        Sort sort = new Sort(ITEM_DIFFICULTY_QUINTILE, Sort.Direction.DESC);

        Page<BaseItem> page = itemSearchService.searchItems(new SearchRequest(Collections.singletonList(filter), sort, defaultPageDto)).get();

        assertThat(page).hasSize(2);

        Integer[] ids = new Integer[2];
        int i = 0;
        for (BaseItem item : page) {
            ids[i] = item.getId();
            i++;
        }

        assertThat(ids).containsExactly(456, 123);
    }
}