package org.opentestsystem.ap.imrt.iss.service;

import com.google.common.collect.Sets;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchRequest;
import org.opentestsystem.ap.imrt.iss.repository.ImrtItemSearchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Collections;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class ItemSearchServiceImplIntegrationTest {

    @Autowired
    private ItemSearchService itemSearchService;

    @Autowired
    private ImrtItemSearchRepository itemRepository;

    @Test
    public void shouldFindItems() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(item);
        itemRepository.save(item2);

        MatchFilter itemIdFilter = new MatchFilter("itemId", Arrays.asList("123", "345"));

        MatchFilter gradeFilter = new MatchFilter("grade", Collections.singletonList("3"));

        SearchRequest searchCriteria = new SearchRequest(Arrays.asList(itemIdFilter, gradeFilter), null, null);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria);

        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, item.getId());

        searchCriteria = new SearchRequest(Collections.singletonList(itemIdFilter), null, null);

        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(2);

        searchCriteria = new SearchRequest(Collections.singletonList(new MatchFilter("grade", Arrays.asList("3", "4"))), null, null);

        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(2);

        searchCriteria = new SearchRequest(Collections.singletonList(new MatchFilter("grade", Arrays.asList("2", "4"))), null, null);
        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, "345");

        searchCriteria = new SearchRequest(Arrays.asList(
                new MatchFilter("grade", Arrays.asList("2", "3")),
                new MatchFilter("subject", Collections.singletonList("ELA"))
        ), null, null);

        page = itemSearchService.searchItems(searchCriteria);
        assertThat(page).hasSize(1);
        validateItemsIncludedInPage(page, "123");
    }

    @Test
    public void shouldHandleEmptySearch() {
        EqItem eq = new EqItem("123");
        McItem mc = new McItem("345");
        ImrtItem item = new ImrtItemBuilder()
                .withId("123")
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .build();

        ImrtItem item2 = new ImrtItemBuilder()
                .withId("345")
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .build();

        itemRepository.save(item);
        itemRepository.save(item2);

        SearchRequest searchCriteria = new SearchRequest(Collections.emptyList(), null, null);

        Page<BaseItem> page = itemSearchService.searchItems(searchCriteria);

        assertThat(page.getTotalElements()).isEqualTo(2);
        assertThat(page.getTotalPages()).isEqualTo(1);

        validateItemsIncludedInPage(page, "123", "345");
    }

    private void validateItemsIncludedInPage(Page<BaseItem> page, String... itemIds) {
        Set<String> ids = Sets.newHashSet(itemIds);
        for (BaseItem baseItem : page) {
            if (!ids.contains(baseItem.getId())) {
                fail("Invalid Id in List " + ids);
            }
        }
    }
}

