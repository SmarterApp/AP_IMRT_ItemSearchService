package org.opentestsystem.ap.imrt.iss.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.opentestsystem.ap.imrt.common.config.OperationalEventConfiguration;
import org.opentestsystem.ap.imrt.iss.config.JacksonObjectMapperConfiguration;
import org.opentestsystem.ap.imrt.iss.dto.ItemDtoModelConverter;
import org.opentestsystem.ap.imrt.iss.dto.search.Filter;
import org.opentestsystem.ap.imrt.iss.dto.search.GapReportRequest;
import org.opentestsystem.ap.imrt.iss.dto.search.MatchFilter;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.SearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SearchFilterConverter;
import org.opentestsystem.ap.imrt.iss.service.GapReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.io.File;
import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.hamcrest.CoreMatchers.is;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_ID;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SUBJECT;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(controllers = ReportController.class)
@Import({
        JacksonObjectMapperConfiguration.class,
        OperationalEventConfiguration.class,
        ItemDtoModelConverter.class,
        SearchFilterConverter.class
})
public class ReportControllerIntegrationTest {
    @Autowired
    private MockMvc http;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private GapReportService gapReportService;

    @Captor
    private ArgumentCaptor<List<SearchFilter>> searchFiltersCaptor;

    @Captor
    private ArgumentCaptor<List<SearchProperty>> groupsCaptor;

    @Test
    public void shouldDownloadGapReport() throws Exception {
        final String fileName = "gap-report-example.xlsx";
        final File file = new File(fileName);

        final Filter subjectFilter = new MatchFilter(SUBJECT.getProperty(),
                false,
                Collections.singletonList("ELA"));
        final List<String> groups = Arrays.asList(SUBJECT.getProperty(),
                INTENDED_GRADE.getProperty(),
                ITEM_TYPE.getProperty());
        final GapReportRequest gapReportRequest = new GapReportRequest(Collections.singletonList(subjectFilter), groups);

        final String gapReportRequestJson = objectMapper.writeValueAsString(gapReportRequest);

        when(gapReportService.getGapReport(searchFiltersCaptor.capture(), groupsCaptor.capture()))
                .thenReturn(Optional.of(file));

        http.perform(post(new URI("/v1/items/reports/gap"))
                .contentType(MediaType.APPLICATION_JSON)
                .content(gapReportRequestJson)
                .accept("*/*"))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
                .andExpect(header().string("Content-Disposition", "attachment; filename=" + fileName));
    }

    @Test
    public void shouldReturnBadRequestWhenBadGroupsAreInRequest() throws Exception {
        final Filter subjectFilter = new MatchFilter(SUBJECT.getProperty(),
                false,
                Collections.singletonList("ELA"));
        final List<String> groups = Arrays.asList(SUBJECT.getProperty(),
                INTENDED_GRADE.getProperty(),
                ITEM_ID.getProperty());
        final GapReportRequest gapReportRequest = new GapReportRequest(Collections.singletonList(subjectFilter), groups);

        final String gapReportRequestJson = objectMapper.writeValueAsString(gapReportRequest);

        when(gapReportService.getGapReport(searchFiltersCaptor.capture(), groupsCaptor.capture()))
                .thenThrow(new IllegalArgumentException("The following group(s) are not supported: id"));

        http.perform(post(new URI("/v1/items/reports/gap"))
                .contentType(MediaType.APPLICATION_JSON)
                .content(gapReportRequestJson)
                .accept("*/*"))
                .andExpect(status().isBadRequest())
                .andExpect(header().string("Content-Type", "application/json;charset=UTF-8"))
                .andExpect(jsonPath("$.message", is("The following group(s) are not supported: id")))
                .andExpect(jsonPath("$.code", is("400")));
    }

    @Test
    public void shouldReturnNotFoundWhenFileIsNotCreated() throws Exception {
        final Filter subjectFilter = new MatchFilter(SUBJECT.getProperty(),
                false,
                Collections.singletonList("ELA"));
        final List<String> groups = Arrays.asList(SUBJECT.getProperty(),
                INTENDED_GRADE.getProperty(),
                ITEM_ID.getProperty());
        final GapReportRequest gapReportRequest = new GapReportRequest(Collections.singletonList(subjectFilter), groups);

        final String gapReportRequestJson = objectMapper.writeValueAsString(gapReportRequest);

        when(gapReportService.getGapReport(searchFiltersCaptor.capture(), groupsCaptor.capture()))
                .thenReturn(Optional.empty());

        http.perform(post(new URI("/v1/items/reports/gap"))
                .contentType(MediaType.APPLICATION_JSON)
                .content(gapReportRequestJson)
                .accept("*/*"))
                .andExpect(status().isNotFound())
                .andExpect(header().string("Content-Type", "application/json;charset=UTF-8"))
                .andExpect(jsonPath("$.message", is("could not get Gap Report file")))
                .andExpect(jsonPath("$.code", is("404")));
    }
}
