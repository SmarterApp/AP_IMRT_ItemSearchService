package org.opentestsystem.ap.imrt.iss.repository;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.repository.ImrtItemRepository;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.opentestsystem.ap.imrt.iss.model.SearchPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_TWO;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_TWO;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_TWO;

// Ignoring because this project is out of date with latest and is archived
@Ignore
@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class GapReportRepositoryImplIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private GapReportRepository gapReportRepository;

    private SearchPermissions searchPermissions;

    @Before
    public void setUp() {
        searchPermissions = new SearchPermissions();
    }

    @Test
    public void shouldGetGapReport() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final ImrtItem firstItem = new ImrtItemBuilder()
            .withId(123)
            .withItemJson(eq)
            .withGrade("3")
            .withSubject("ELA")
            .withItemDifficultyQuintile(1)
            .build();
        final ImrtItem secondItem = new ImrtItemBuilder()
            .withId(345)
            .withItemJson(mc)
            .withGrade("4")
            .withSubject("MATH")
            .withItemType("MC")
            .withItemDifficultyQuintile(2)
            .build();

        imrtItemRepository.save(Arrays.asList(firstItem, secondItem));

        final MatchSearchFilter subjectMatchFilter =
            new MatchSearchFilter(SearchProperty.SUBJECT, Arrays.asList("ELA", "MATH"));
        final List<SearchProperty> searchProperties =
            Arrays.asList(SearchProperty.SUBJECT, SearchProperty.INTENDED_GRADE, SearchProperty.ITEM_TYPE);

        final List<Map<String, Object>> result =
            gapReportRepository
                .getGapReport(searchPermissions, Collections.singletonList(subjectMatchFilter), searchProperties);

        assertThat(result).hasSize(2);

        final Map<String, Object> firstResult = result.get(0);
        assertThat(firstResult.containsKey(SearchProperty.SUBJECT.getProperty().toLowerCase())).isTrue();
        assertThat(firstResult.get(SearchProperty.SUBJECT.getProperty().toLowerCase())).isEqualTo("ELA");
        assertThat(firstResult.containsKey(SearchProperty.INTENDED_GRADE.getProperty().toLowerCase())).isTrue();
        assertThat(firstResult.get(SearchProperty.INTENDED_GRADE.getProperty().toLowerCase())).isEqualTo("3");
        assertThat(firstResult.containsKey(SearchProperty.ITEM_TYPE.getProperty().toLowerCase())).isTrue();
        assertThat(firstResult.get(SearchProperty.ITEM_TYPE.getProperty().toLowerCase())).isEqualTo("EQ");
        assertThat(firstResult.containsKey(DESIRED_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DESIRED_DIFFICULTY_ONE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DESIRED_DIFFICULTY_TWO.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DESIRED_DIFFICULTY_THREE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DESIRED_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DESIRED_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(ACTUAL_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.get(ACTUAL_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isEqualTo(1L);
        assertThat(firstResult.containsKey(ACTUAL_DIFFICULTY_ONE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.get(ACTUAL_DIFFICULTY_ONE.getFieldName().toLowerCase())).isEqualTo(1L);
        assertThat(firstResult.containsKey(ACTUAL_DIFFICULTY_TWO.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.get(ACTUAL_DIFFICULTY_TWO.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(firstResult.containsKey(ACTUAL_DIFFICULTY_THREE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.get(ACTUAL_DIFFICULTY_THREE.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(firstResult.containsKey(ACTUAL_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.get(ACTUAL_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(firstResult.containsKey(ACTUAL_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.get(ACTUAL_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(firstResult.containsKey(DELTA_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DELTA_DIFFICULTY_ONE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DELTA_DIFFICULTY_TWO.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DELTA_DIFFICULTY_THREE.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DELTA_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isTrue();
        assertThat(firstResult.containsKey(DELTA_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isTrue();


        final Map<String, Object> secondResult = result.get(1);
        assertThat(secondResult.containsKey(SearchProperty.SUBJECT.getProperty().toLowerCase())).isTrue();
        assertThat(secondResult.get(SearchProperty.SUBJECT.getProperty().toLowerCase())).isEqualTo("MATH");
        assertThat(secondResult.containsKey(SearchProperty.INTENDED_GRADE.getProperty().toLowerCase())).isTrue();
        assertThat(secondResult.get(SearchProperty.INTENDED_GRADE.getProperty().toLowerCase())).isEqualTo("4");
        assertThat(secondResult.containsKey(SearchProperty.ITEM_TYPE.getProperty().toLowerCase())).isTrue();
        assertThat(secondResult.get(SearchProperty.ITEM_TYPE.getProperty().toLowerCase())).isEqualTo("MC");
        assertThat(secondResult.containsKey(DESIRED_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DESIRED_DIFFICULTY_ONE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DESIRED_DIFFICULTY_TWO.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DESIRED_DIFFICULTY_THREE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DESIRED_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DESIRED_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(ACTUAL_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.get(ACTUAL_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isEqualTo(1L);
        assertThat(secondResult.containsKey(ACTUAL_DIFFICULTY_ONE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.get(ACTUAL_DIFFICULTY_ONE.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(secondResult.containsKey(ACTUAL_DIFFICULTY_TWO.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.get(ACTUAL_DIFFICULTY_TWO.getFieldName().toLowerCase())).isEqualTo(1L);
        assertThat(secondResult.containsKey(ACTUAL_DIFFICULTY_THREE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.get(ACTUAL_DIFFICULTY_THREE.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(secondResult.containsKey(ACTUAL_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.get(ACTUAL_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(secondResult.containsKey(ACTUAL_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.get(ACTUAL_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isEqualTo(0L);
        assertThat(secondResult.containsKey(DELTA_DIFFICULTY_COUNT.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DELTA_DIFFICULTY_ONE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DELTA_DIFFICULTY_TWO.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DELTA_DIFFICULTY_THREE.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DELTA_DIFFICULTY_FOUR.getFieldName().toLowerCase())).isTrue();
        assertThat(secondResult.containsKey(DELTA_DIFFICULTY_FIVE.getFieldName().toLowerCase())).isTrue();
    }

    @Test
    public void shouldExcludeStimulusAndTutorialItemsFromResults() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final McItem secondMc = new McItem("678");
        final ImrtItem tutItem = new ImrtItemBuilder()
            .withId(123)
            .withItemJson(eq)
            .withGrade("3")
            .withSubject("ELA")
            .withItemType("tut")
            .withItemDifficultyQuintile(1)
            .build();
        final ImrtItem stimItem = new ImrtItemBuilder()
            .withId(345)
            .withItemJson(mc)
            .withGrade("4")
            .withSubject("MATH")
            .withItemType("stim")
            .withItemDifficultyQuintile(2)
            .build();
        final ImrtItem mcItem = new ImrtItemBuilder()
            .withId(678)
            .withItemJson(secondMc)
            .withGrade("4")
            .withSubject("MATH")
            .withItemType("MC")
            .withItemDifficultyQuintile(2)
            .build();

        imrtItemRepository.save(Arrays.asList(tutItem, stimItem, mcItem));

        final MatchSearchFilter subjectMatchFilter =
            new MatchSearchFilter(SearchProperty.SUBJECT, Arrays.asList("ELA", "MATH"));
        final List<SearchProperty> searchProperties =
            Arrays.asList(SearchProperty.SUBJECT, SearchProperty.INTENDED_GRADE, SearchProperty.ITEM_TYPE);

        final List<Map<String, Object>> result =
            gapReportRepository
                .getGapReport(searchPermissions, Collections.singletonList(subjectMatchFilter), searchProperties);

        assertThat(result).hasSize(1);

        final Map<String, Object> resultItem = result.get(0);
        assertThat(resultItem.containsKey(SearchProperty.ITEM_TYPE.getProperty().toLowerCase())).isTrue();
        assertThat(resultItem.get(SearchProperty.ITEM_TYPE.getProperty().toLowerCase())).isEqualTo("MC");
    }
}
