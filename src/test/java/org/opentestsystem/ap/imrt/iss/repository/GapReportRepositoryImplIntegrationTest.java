package org.opentestsystem.ap.imrt.iss.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.iss.ItemSearchServiceApplicationConfiguration;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.MatchSearchFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Java6Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(ItemSearchServiceApplicationConfiguration.class)
@EnableJpaAuditing
public class GapReportRepositoryImplIntegrationTest {
    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Autowired
    private GapReportRepository gapReportRepository;

    @Test
    public void shouldGetGapReport() {
        final EqItem eq = new EqItem("123");
        final McItem mc = new McItem("345");
        final ImrtItem firstItem = new ImrtItemBuilder()
                .withId(123)
                .withItemJson(eq)
                .withGrade("3")
                .withSubject("ELA")
                .withItemDifficultyQuintile(1)
                .build();
        final ImrtItem secondItem = new ImrtItemBuilder()
                .withId(345)
                .withItemJson(mc)
                .withGrade("4")
                .withSubject("MATH")
                .withItemType("MC")
                .withItemDifficultyQuintile(2)
                .build();

        imrtItemRepository.save(Arrays.asList(firstItem, secondItem));

        final MatchSearchFilter subjectMatchFilter =
                new MatchSearchFilter(SearchProperty.SUBJECT, Arrays.asList("ELA", "MATH"));
        final List<SearchProperty> searchProperties =
                Arrays.asList(SearchProperty.SUBJECT, SearchProperty.INTENDED_GRADE, SearchProperty.ITEM_TYPE);

        final List<Map<String, Object>> result =
                gapReportRepository.getGapReport(Collections.singletonList(subjectMatchFilter), searchProperties);

        assertThat(result).hasSize(2);

        final Map<String, Object> firstResult = result.get(0);
        assertThat(firstResult.containsKey(SearchProperty.SUBJECT.getColumnName())).isTrue();
        assertThat(firstResult.get(SearchProperty.SUBJECT.getColumnName())).isEqualTo("ELA");
        assertThat(firstResult.containsKey(SearchProperty.INTENDED_GRADE.getColumnName())).isTrue();
        assertThat(firstResult.get(SearchProperty.INTENDED_GRADE.getColumnName())).isEqualTo("3");
        assertThat(firstResult.containsKey(SearchProperty.ITEM_TYPE.getColumnName())).isTrue();
        assertThat(firstResult.get(SearchProperty.ITEM_TYPE.getColumnName())).isEqualTo("EQ");
        assertThat(firstResult.containsKey("difficulty_1")).isTrue();
        assertThat(firstResult.get("difficulty_1")).isEqualTo(1L);
        assertThat(firstResult.containsKey("difficulty_2")).isTrue();
        assertThat(firstResult.get("difficulty_2")).isEqualTo(0L);
        assertThat(firstResult.containsKey("difficulty_3")).isTrue();
        assertThat(firstResult.get("difficulty_3")).isEqualTo(0L);
        assertThat(firstResult.containsKey("difficulty_4")).isTrue();
        assertThat(firstResult.get("difficulty_4")).isEqualTo(0L);
        assertThat(firstResult.containsKey("difficulty_5")).isTrue();
        assertThat(firstResult.get("difficulty_5")).isEqualTo(0L);

        final Map<String, Object> secondResult = result.get(1);
        assertThat(secondResult.containsKey(SearchProperty.SUBJECT.getColumnName())).isTrue();
        assertThat(secondResult.get(SearchProperty.SUBJECT.getColumnName())).isEqualTo("MATH");
        assertThat(secondResult.containsKey(SearchProperty.INTENDED_GRADE.getColumnName())).isTrue();
        assertThat(secondResult.get(SearchProperty.INTENDED_GRADE.getColumnName())).isEqualTo("4");
        assertThat(secondResult.containsKey(SearchProperty.ITEM_TYPE.getColumnName())).isTrue();
        assertThat(secondResult.get(SearchProperty.ITEM_TYPE.getColumnName())).isEqualTo("MC");
        assertThat(secondResult.containsKey("difficulty_1")).isTrue();
        assertThat(secondResult.get("difficulty_1")).isEqualTo(0L);
        assertThat(secondResult.containsKey("difficulty_2")).isTrue();
        assertThat(secondResult.get("difficulty_2")).isEqualTo(1L);
        assertThat(secondResult.containsKey("difficulty_3")).isTrue();
        assertThat(secondResult.get("difficulty_3")).isEqualTo(0L);
        assertThat(secondResult.containsKey("difficulty_4")).isTrue();
        assertThat(secondResult.get("difficulty_4")).isEqualTo(0L);
        assertThat(secondResult.containsKey("difficulty_5")).isTrue();
        assertThat(secondResult.get("difficulty_5")).isEqualTo(0L);
    }
}
