package org.opentestsystem.ap.imrt.iss.model;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.WorkflowStatusEnum;
import org.opentestsystem.ap.common.model.admin.PermissionCode;
import org.opentestsystem.ap.common.model.admin.PermissionModel;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

public class PermissionsBasedSearchFilterTest {
    private PermissionsBasedSearchFilter filter;

    @Before
    public void setUp() {
        filter = new PermissionsBasedSearchFilter();
    }

    @Test
    public void shouldReturnEmptyFilterIfPreviewPermission() {
        SearchPermissions searchPermissions = new SearchPermissions();
        PermissionModel model = new PermissionModel();
        model.setCode(PermissionCode.previewAllItemVersions);
        model.setWorkflowStatusCodes(Collections.singleton(WorkflowStatusEnum.Draft.toString()));
        searchPermissions.setPreviewAll(model);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        assertThat(query.getQuery())
            .isEqualTo(" (  ( workflow_status IN (:previewPermissionWorkflow)) ) ");

        Collection<String> workflowStatuses = (Collection<String>) query.getMapSqlProperties()
            .get("previewPermissionWorkflow");
        assertThat(workflowStatuses).contains("Draft");
    }

    @Test
    public void shouldBuildItemTypeQuery() {
        SearchPermissions searchPermissions = new SearchPermissions();
        Map<String, Collection<String>> itemTypes = new HashMap<>();
        itemTypes.put(ModelConstants.ItemType.TYPE_SA,
            Arrays.asList(WorkflowStatusEnum.AccessibilityReview.toString(), WorkflowStatusEnum.Draft.toString()));
        searchPermissions.setItemTypeToWorkflows(itemTypes);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        assertThat(query.getQuery())
            .isEqualTo(" (  ( item_type = :permission_sa AND workflow_status IN (:permission_saWorkflow) )  ) ");
        assertThat(query.getMapSqlProperties().get("permission_sa")).isEqualTo("sa");

        Collection<String> workflowStatuses = (Collection<String>) query.getMapSqlProperties()
            .get("permission_saWorkflow");
        assertThat(workflowStatuses).contains("AccessibilityReview", "Draft");
    }

    @Test
    public void shouldBuildAssigneeQuery() {
        SearchPermissions searchPermissions = new SearchPermissions();
        searchPermissions.setUserId("tesT@test.com");
        Map<String, Collection<String>> itemTypes = new HashMap<>();
        itemTypes.put(ModelConstants.ItemType.TYPE_SA,
            Arrays.asList(WorkflowStatusEnum.AccessibilityReview.toString(), WorkflowStatusEnum.Draft.toString()));
        searchPermissions.setItemTypeToAssigneeWorkflows(itemTypes);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        assertThat(query.getQuery()).isEqualTo(
            " (  ( item_type = :permission_sa AND LOWER(assigned_to) LIKE :permission_saAssignee AND workflow_status IN (:permission_saAssigneeWorkflow) )  ) ");
        assertThat(query.getMapSqlProperties().get("permission_saAssignee")).isEqualTo("%test@test.com%");
        Collection<String> workflowStatuses = (Collection<String>) query.getMapSqlProperties()
            .get("permission_saAssigneeWorkflow");
        assertThat(workflowStatuses).contains("AccessibilityReview", "Draft");
    }

    @Test
    public void shouldBuildCombinedQuery() {
        SearchPermissions searchPermissions = new SearchPermissions();
        searchPermissions.setUserId("test@test.com");
        PermissionModel model = new PermissionModel();
        model.setCode(PermissionCode.previewAllItemVersions);
        model.setWorkflowStatusCodes(Collections.singleton(WorkflowStatusEnum.Draft.toString()));
        searchPermissions.setPreviewAll(model);
        Map<String, Collection<String>> itemTypes = new HashMap<>();
        itemTypes.put(ModelConstants.ItemType.TYPE_SA,
            Arrays.asList(WorkflowStatusEnum.AccessibilityReview.toString(), WorkflowStatusEnum.Draft.toString()));
        searchPermissions.setItemTypeToAssigneeWorkflows(itemTypes);
        searchPermissions.setItemTypeToWorkflows(itemTypes);

        FilterQuery query = filter.getFilterQuery(searchPermissions).get();

        assertThat(query.getQuery()).isEqualTo(
            " (  ( workflow_status IN (:previewPermissionWorkflow)) AND (  ( item_type = :permission_sa AND workflow_status IN (:permission_saWorkflow) )  OR  ( item_type = :permission_sa AND LOWER(assigned_to) LIKE :permission_saAssignee AND workflow_status IN (:permission_saAssigneeWorkflow) )  )  ) ");
        assertThat(query.getMapSqlProperties().get("permission_sa")).isEqualTo("sa");
        assertThat(query.getMapSqlProperties().get("permission_saAssignee")).isEqualTo("%test@test.com%");

        Collection<String> workflowStatuses = (Collection<String>) query.getMapSqlProperties()
            .get("permission_saWorkflow");
        assertThat(workflowStatuses).contains("AccessibilityReview", "Draft");

        workflowStatuses = (Collection<String>) query.getMapSqlProperties().get("permission_saAssigneeWorkflow");
        assertThat(workflowStatuses).contains("AccessibilityReview", "Draft");

        workflowStatuses = (Collection<String>) query.getMapSqlProperties().get("previewPermissionWorkflow");
        assertThat(workflowStatuses).contains("Draft");
    }
}