package org.opentestsystem.ap.imrt.iss.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.repository.BaseItemSearchRepository;

import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceImplTest {
    private ItemService itemService;

    @Mock
    private BaseItemSearchRepository mockBaseItemSearchRepository;

    @Before
    public void setUp() {
        itemService = new ItemServiceImpl(mockBaseItemSearchRepository);
    }

    @Test
    public void shouldReturnAnItem() {
        ImrtItem item = new ImrtItem();
        when(mockBaseItemSearchRepository.findById(123)).thenReturn(item);

        assertThat(itemService.findItemById(123).get()).isEqualTo(item);

        verify(mockBaseItemSearchRepository).findById(123);
    }

    @Test
    public void shouldReturnItems() {
        ImrtItem imrtItem = new ImrtItem();
        ImrtItem imrtItem2 = new ImrtItem();

        List<Integer> ids = Arrays.asList(1, 2);

        when(mockBaseItemSearchRepository.findByIdIn(ids)).thenReturn(Arrays.asList(imrtItem, imrtItem2));

        assertThat(itemService.findItemsByIds(ids)).containsExactly(imrtItem, imrtItem2);

        verify(mockBaseItemSearchRepository).findByIdIn(ids);
    }
}