package org.opentestsystem.ap.imrt.iss.model;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;
import org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReport;
import org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportBuilder;
import org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.INTENDED_GRADE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.ITEM_TYPE;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.SUBJECT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.ACTUAL_DIFFICULTY_TWO;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DELTA_DIFFICULTY_TWO;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_COUNT;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_FIVE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_FOUR;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_ONE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_THREE;
import static org.opentestsystem.ap.imrt.iss.model.reports.gap.GapReportCalculationField.DESIRED_DIFFICULTY_TWO;

@RunWith(MockitoJUnitRunner.class)
public class GapReportBuilderTest {

    private GapReportBuilder gapReportBuilder = new GapReportBuilder();

    @Test
    public void shouldBuildXSSFWorkbook() {
        final Map<String, Object> gapReportRecord = new LinkedHashMap<>();
        gapReportRecord.put(SUBJECT.getProperty().toLowerCase(), "ELA");
        gapReportRecord.put(INTENDED_GRADE.getProperty().toLowerCase(), "3");
        gapReportRecord.put(ITEM_TYPE.getProperty().toLowerCase(), "EQ");
        gapReportRecord.put(DESIRED_DIFFICULTY_COUNT.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DESIRED_DIFFICULTY_ONE.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DESIRED_DIFFICULTY_TWO.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DESIRED_DIFFICULTY_THREE.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DESIRED_DIFFICULTY_FOUR.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DESIRED_DIFFICULTY_FIVE.getFieldName().toLowerCase(), "");
        gapReportRecord.put(ACTUAL_DIFFICULTY_COUNT.getFieldName().toLowerCase(), 1);
        gapReportRecord.put(ACTUAL_DIFFICULTY_ONE.getFieldName().toLowerCase(), 0);
        gapReportRecord.put(ACTUAL_DIFFICULTY_TWO.getFieldName().toLowerCase(), 0);
        gapReportRecord.put(ACTUAL_DIFFICULTY_THREE.getFieldName().toLowerCase(), 0);
        gapReportRecord.put(ACTUAL_DIFFICULTY_FOUR.getFieldName().toLowerCase(), 0);
        gapReportRecord.put(ACTUAL_DIFFICULTY_FIVE.getFieldName().toLowerCase(), 0);
        gapReportRecord.put(DELTA_DIFFICULTY_ONE.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DELTA_DIFFICULTY_TWO.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DELTA_DIFFICULTY_THREE.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DELTA_DIFFICULTY_FOUR.getFieldName().toLowerCase(), "");
        gapReportRecord.put(DELTA_DIFFICULTY_FIVE.getFieldName().toLowerCase(), "");

        final List<SearchFilter> searchFilters =
                Collections.singletonList(new MatchSearchFilter(SUBJECT, Collections.singletonList("ELA")));
        final List<SearchProperty> groupFilters = Arrays.asList(SUBJECT, INTENDED_GRADE, ITEM_TYPE);

        final GapReport gapReport = new GapReport(searchFilters,
                groupFilters,
                Collections.singletonList(gapReportRecord),
                Instant.now());

        final XSSFWorkbook result = gapReportBuilder.getReport(gapReport);

        assertThat(result).isNotNull();
        assertThat(result.getNumberOfSheets()).isEqualTo(2);

        final XSSFSheet reportParamsSheet = result.getSheetAt(0);
        assertThat(reportParamsSheet.getSheetName()).isEqualTo("Report Parameters");
        assertThat(reportParamsSheet.getRow(0).getCell(0).getStringCellValue()).isEqualTo("Date Created");
        assertThat(reportParamsSheet.getRow(1).getCell(0).getStringCellValue()).isEqualTo("Filters");
        assertThat(reportParamsSheet.getRow(1).getCell(1).getStringCellValue()).isEqualTo("Subject");
        assertThat(reportParamsSheet.getRow(1).getCell(2).getStringCellValue()).isEqualTo("ELA");
        assertThat(reportParamsSheet.getRow(2).getCell(0).getStringCellValue()).isEqualTo("Groups");
        assertThat(reportParamsSheet.getRow(2).getCell(1).getStringCellValue()).isEqualTo("Subject");
        assertThat(reportParamsSheet.getRow(3).getCell(1).getStringCellValue()).isEqualTo("Intended Grade");
        assertThat(reportParamsSheet.getRow(4).getCell(1).getStringCellValue()).isEqualTo("Type");

        assertThat(result.getSheetAt(1).getSheetName()).isEqualTo("Report");
        assertThat(result.getSheetAt(1).getLastRowNum()).isEqualTo(1);
    }
}
