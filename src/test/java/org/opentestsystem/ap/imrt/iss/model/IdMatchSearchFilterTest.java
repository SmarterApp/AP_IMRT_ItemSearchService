package org.opentestsystem.ap.imrt.iss.model;

import org.junit.Before;
import org.junit.Test;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.data.MapEntry.entry;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.STIMULUS_ID;

public class IdMatchSearchFilterTest {
    private SearchPermissions searchPermissions;

    @Before
    public void setUp() {
        searchPermissions = new SearchPermissions();
    }

    @Test
    public void shouldCreateIdSearchQuery() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList("123"), true);

        FilterQuery filterQuery = filter.getFilterQuery(searchPermissions).get();

        assertThat(filterQuery.getQuery())
            .isEqualTo("associated_stimulus_id IS NULL  OR associated_stimulus_id IN (:stimulusId ) ");
        assertThat(filterQuery.getMapSqlProperties())
            .contains(entry(STIMULUS_ID.getProperty(), Collections.singletonList(123)));
    }

    @Test
    public void shouldCreateIdSearchQueryWithoutBlank() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList("123"));

        FilterQuery filterQuery = filter.getFilterQuery(searchPermissions).get();

        assertThat(filterQuery.getQuery()).isEqualTo("associated_stimulus_id IN (:stimulusId ) ");
        assertThat(filterQuery.getMapSqlProperties())
            .contains(entry(STIMULUS_ID.getProperty(), Collections.singletonList(123)));
    }

    @Test
    public void shouldCreateIdSearchQueryWithOnlyBlank() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.emptyList(), true);

        FilterQuery filterQuery = filter.getFilterQuery(searchPermissions).get();

        assertThat(filterQuery.getQuery()).isEqualTo("associated_stimulus_id IS NULL ");
        assertThat(filterQuery.getMapSqlProperties()).isEmpty();
    }
}