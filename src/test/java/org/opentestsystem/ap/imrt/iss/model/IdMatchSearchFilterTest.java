package org.opentestsystem.ap.imrt.iss.model;

import org.junit.Test;
import org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.data.MapEntry.entry;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchFields.STIMULUS_ID;

public class IdMatchSearchFilterTest {
    @Test
    public void shouldBeValidWithValidIntegerIds() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList("123"));
        assertThat(filter.isValid()).isTrue();
        assertThat(filter.isEmpty()).isFalse();
    }

    @Test
    public void shouldBeValidWithInvalidIdsAndIncludeBlanks() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList("123ABC"), true);
        assertThat(filter.isValid()).isTrue();
        assertThat(filter.isEmpty()).isFalse();
    }

    @Test
    public void shouldBeValidWithValidIdsAndIncludeBlanks() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList("123"), true);
        assertThat(filter.isValid()).isTrue();
        assertThat(filter.isEmpty()).isFalse();
    }

    @Test
    public void shouldBeInvalidWithInvalidIds() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList("123ABC"));
        assertThat(filter.isValid()).isFalse();
        assertThat(filter.isEmpty()).isFalse();
    }

    @Test
    public void shouldBeInvalidWithBlank() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(STIMULUS_ID, Collections.singletonList(""));
        assertThat(filter.isValid()).isTrue();
        assertThat(filter.isEmpty()).isFalse();
    }

    @Test
    public void shouldCreateIdSearchQuery() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.STIMULUS_ID.getProperty(), Collections.singletonList("123"), true);

        FilterQuery filterQuery = filter.getFilterQuery();

        assertThat(filterQuery.getQuery()).isEqualTo("associated_stimulus_id IS NULL  OR associated_stimulus_id IN (:stimulusId ) ");
        assertThat(filterQuery.getMapSqlProperties()).contains(entry(SearchProperty.STIMULUS_ID.getProperty(), Collections.singletonList(123)));
    }

    @Test
    public void shouldCreateIdSearchQueryWithoutBlank() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.STIMULUS_ID.getProperty(), Collections.singletonList("123"));

        FilterQuery filterQuery = filter.getFilterQuery();

        assertThat(filterQuery.getQuery()).isEqualTo("associated_stimulus_id IN (:stimulusId ) ");
        assertThat(filterQuery.getMapSqlProperties()).contains(entry(SearchProperty.STIMULUS_ID.getProperty(), Collections.singletonList(123)));
    }

    @Test
    public void shouldCreateIdSearchQueryWithOnlyBlank() {
        IdMatchSearchFilter filter = new IdMatchSearchFilter(SearchProperty.STIMULUS_ID.getProperty(), Collections.emptyList(), true);

        FilterQuery filterQuery = filter.getFilterQuery();

        assertThat(filterQuery.getQuery()).isEqualTo("associated_stimulus_id IS NULL ");
        assertThat(filterQuery.getMapSqlProperties()).isEmpty();
    }
}