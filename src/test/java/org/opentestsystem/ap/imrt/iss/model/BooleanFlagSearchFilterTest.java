package org.opentestsystem.ap.imrt.iss.model;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.imrt.iss.dto.search.SearchProperty.BEING_CREATED;


public class BooleanFlagSearchFilterTest {
    @Test
    public void shouldCreateNullQuery() {
        BooleanFlagSearchFilter filter = new BooleanFlagSearchFilter(BEING_CREATED, null, true);

        FilterQuery filterQuery = filter.getFilterQuery();

        assertThat(filterQuery.getQuery()).isEqualTo(BEING_CREATED.getColumnName() + " IS NULL ");
        assertThat(filterQuery.getMapSqlProperties()).isEmpty();
    }

    @Test
    public void shouldCreateCombinedQuery() {
        BooleanFlagSearchFilter filter = new BooleanFlagSearchFilter(BEING_CREATED, true, true);

        FilterQuery filterQuery = filter.getFilterQuery();

        assertThat(filterQuery.getQuery()).isEqualTo(String.format("(%s IS NULL  OR %s = :%s)", BEING_CREATED.getColumnName(), BEING_CREATED.getColumnName(), BEING_CREATED.getProperty()));
        assertThat(filterQuery.getMapSqlProperties()).containsKeys(BEING_CREATED.getProperty());
        assertThat(filterQuery.getMapSqlProperties().get(BEING_CREATED.getProperty())).isEqualTo(true);
    }

    @Test
    public void shouldCreateFlagQuery() {
        BooleanFlagSearchFilter filter = new BooleanFlagSearchFilter(BEING_CREATED, true, false);

        FilterQuery filterQuery = filter.getFilterQuery();

        assertThat(filterQuery.getQuery()).isEqualTo(String.format("%s = :%s", BEING_CREATED.getColumnName(), BEING_CREATED.getProperty()));
        assertThat(filterQuery.getMapSqlProperties()).containsKeys(BEING_CREATED.getProperty());
        assertThat(filterQuery.getMapSqlProperties().get(BEING_CREATED.getProperty())).isEqualTo(true);
    }
}