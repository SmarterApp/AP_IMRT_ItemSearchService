package org.opentestsystem.ap.imrt.iss.dto;


import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.imrt.common.model.Attachment;
import org.opentestsystem.ap.imrt.common.model.AttachmentFileTypes;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class ItemDtoConverterTest {
    private ItemDtoConverter mapper;

    @Before
    public void setUp() {
        mapper = new ItemDtoConverter();
    }

    @Test
    public void shouldMapToItemDto() {
        Instant workflowStatusSetAt = Instant.now().minus(5, ChronoUnit.DAYS);
        ImrtItem item = new ImrtItemBuilder()
                .withWorkflowStatusSetAt(workflowStatusSetAt)
                .build();

        ItemDto dto = mapper.convert(item);

        validateItem(dto, item);
        assertThat(dto.getItemDetail()).isNull();
        assertThat(dto.getWorkflowStatusUpdatedDate()).isEqualTo(workflowStatusSetAt);
        assertThat(dto.getDaysInWorkflowStatus()).isPresent();
        assertThat(dto.getDaysInWorkflowStatus().get()).isEqualTo("5");
    }

    @Test
    public void shouldMapToItemDtoWithItem() {
        Item itemJson = mock(Item.class);
        ImrtItem item = new ImrtItemBuilder().withItemJson(itemJson).build();

        ItemDto dto = mapper.mapWithDetail(item);

        validateItem(dto, item);
        assertThat(dto.getItemDetail()).isNotNull();
        assertThat(dto.getItemDetail()).isEqualTo(itemJson);
    }

    @Test
    public void shouldMapToItemDtoWithContentAttachments() {
        ImrtItem item = new ImrtItemBuilder()
                .build();

        item.setAslAttachments(Collections.singletonList(new Attachment(item, AttachmentFileTypes.ASL, "asl-file", Instant.now(), "me")));
        item.setBrailleAttachments(Collections.singletonList(new Attachment(item, AttachmentFileTypes.BRAILLE, "braille-file", Instant.now(), "me")));
        item.setCcAttachments(Collections.singletonList(new Attachment(item, AttachmentFileTypes.CC, "cc-file", Instant.now(), "me")));

        ItemDto dto = mapper.convert(item);

        validateItem(dto, item);
    }

    private void validateItem(ItemDto dto, BaseItem item) {
        assertThat(dto.getId()).isEqualTo(String.valueOf(item.getId()));
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreateDate()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getIntendedGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getStimulusId()).isEqualTo(String.valueOf(item.getAssociatedStimulusId()));
        assertThat(dto.getOrganizationTypeId()).isEqualTo(item.getOrganizationTypeId());
        assertThat(dto.getOrganizationName()).isEqualTo(item.getOrganizationName());
        assertThat(dto.isBeingCreated()).isEqualTo(Boolean.TRUE.toString());
        assertThat(dto.getContentTaskModel()).isEqualTo(item.getContentTaskModel());

        assertThat(dto.getPrimaryClaim()).isEqualTo(item.getPrimaryClaim());
        assertThat(dto.getPrimaryTarget()).isEqualTo(item.getPrimaryTarget());
        assertThat(dto.getPrimaryCommonCoreStandard()).isEqualTo(item.getPrimaryCommonCoreStandard());
        assertThat(dto.getPrimaryContentDomain()).isEqualTo(item.getPrimaryContentDomain());

        assertThat(dto.getSecondaryClaim()).isEqualTo(item.getSecondaryClaim());
        assertThat(dto.getSecondaryTarget()).isEqualTo(item.getSecondaryTarget());
        assertThat(dto.getSecondaryCommonCoreStandard()).isEqualTo(item.getSecondaryCommonCoreStandard());
        assertThat(dto.getSecondaryContentDomain()).isEqualTo(item.getSecondaryContentDomain());

        assertThat(dto.getTertiaryClaim()).isEqualTo(item.getTertiaryClaim());
        assertThat(dto.getTertiaryTarget()).isEqualTo(item.getTertiaryTarget());
        assertThat(dto.getTertiaryCommonCoreStandard()).isEqualTo(item.getTertiaryCommonCoreStandard());
        assertThat(dto.getTertiaryContentDomain()).isEqualTo(item.getTertiaryContentDomain());

        assertThat(dto.getQuaternaryClaim()).isEqualTo(item.getQuaternaryClaim());
        assertThat(dto.getQuaternaryTarget()).isEqualTo(item.getQuaternaryTarget());
        assertThat(dto.getQuaternaryCommonCoreStandard()).isEqualTo(item.getQuaternaryCommonCoreStandard());
        assertThat(dto.getQuaternaryContentDomain()).isEqualTo(item.getQuaternaryContentDomain());
        assertThat(dto.getItemAuthor()).isEqualTo(item.getItemAuthor());

        assertThat(dto.getItemDifficultyQuintile()).isEqualTo(item.getItemDifficultyQuintile().toString());
        assertThat(dto.getCalculatedFormCount()).isEqualTo(item.getFormCount().toString());
        assertThat(dto.getCalculatedExposuresCount()).isEqualTo(item.getExposuresCount().toString());

        assertThat(dto.getAslRequired()).isEqualTo(item.getAslRequired());
        assertThat(dto.getBrailleRequired()).isEqualTo(item.getBrailleRequired());
        assertThat(dto.getClosedCaptioningRequired()).isEqualTo(item.getCcRequired());
        assertThat(dto.getTranslationRequired()).isEqualTo(item.getTranslationRequired());
        assertThat(dto.getTranslationProvided()).isEqualTo(item.getTranslationProvided());

        assertThat(dto.getAslAttachments()).hasSize(item.getAslAttachments().size());
        assertThat(dto.getBrailleAttachments()).hasSize(item.getBrailleAttachments().size());
        assertThat(dto.getClosedCaptioningAttachments()).hasSize(item.getCcAttachments().size());
    }
}