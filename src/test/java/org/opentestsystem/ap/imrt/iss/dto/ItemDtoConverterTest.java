package org.opentestsystem.ap.imrt.iss.dto;


import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.StandardId;
import org.opentestsystem.ap.imrt.common.model.StandardIdKey;
import org.opentestsystem.ap.imrt.iss.builder.ImrtItemBuilder;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class ItemDtoConverterTest {
    private ItemDtoConverter mapper;

    @Before
    public void setUp() {
        mapper = new ItemDtoConverter(new StandardIdDtoConverter());
    }

    @Test
    public void shouldMapToItemDto() {
        ImrtItem item = new ImrtItemBuilder().build();

        StandardId standardId = new StandardId.StandardIdBuilder()
                .withStandardIdKey(new StandardIdKey(item, 1))
                .withCommonCoreStandard("common")
                .withClaim("1")
                .withContentDomain("contentDomain")
                .withEmphasis("emp")
                .withTarget("target")
                .build();

        item.setStandardIds(Collections.singletonList(standardId));

        ItemDto dto = mapper.convert(item);

        assertThat(dto.getId()).isEqualTo(item.getId());
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreatedAt()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getItemType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getStandardIds()).hasSize(item.getStandardIds().size());
        assertThat(dto.getItemDetail()).isNotPresent();
    }

    @Test
    public void shouldMapToItemDtoWithItem() {
        Item itemJson = mock(Item.class);
        ImrtItem item = new ImrtItemBuilder().withItemJson(itemJson).build();

        StandardId standardId = new StandardId.StandardIdBuilder()
                .withStandardIdKey(new StandardIdKey(item, 1))
                .withCommonCoreStandard("common")
                .withClaim("1")
                .withContentDomain("contentDomain")
                .withEmphasis("emp")
                .withTarget("target")
                .build();

        item.setStandardIds(Collections.singletonList(standardId));

        ItemDto dto = mapper.mapWithDetail(item);

        assertThat(dto.getId()).isEqualTo(item.getId());
        assertThat(dto.getDepthOfKnowledge()).isEqualTo(item.getDepthOfKnowledge());
        assertThat(dto.getCreatedAt()).isEqualTo(item.getItemCreatedAt());
        assertThat(dto.getGrade()).isEqualTo(item.getGrade());
        assertThat(dto.getItemType()).isEqualTo(item.getItemType());
        assertThat(dto.getWorkflowStatus()).isEqualTo(item.getWorkflowStatus());
        assertThat(dto.getSubject()).isEqualTo(item.getSubject());
        assertThat(dto.getStandardIds()).hasSize(item.getStandardIds().size());
        assertThat(dto.getItemDetail().get()).isEqualTo(itemJson);
    }
}